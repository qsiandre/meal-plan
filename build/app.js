var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);

// node_modules/react/cjs/react.development.js
var require_react_development = __commonJS((exports, module) => {
  if (true) {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
      }
      var ReactVersion = "18.2.0";
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactCurrentDispatcher = {
        current: null
      };
      var ReactCurrentBatchConfig = {
        transition: null
      };
      var ReactCurrentActQueue = {
        current: null,
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
      };
      var ReactCurrentOwner = {
        current: null
      };
      var ReactDebugCurrentFrame = {};
      var currentExtraStackFrame = null;
      function setExtraStackFrame(stack) {
        {
          currentExtraStackFrame = stack;
        }
      }
      {
        ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
          {
            currentExtraStackFrame = stack;
          }
        };
        ReactDebugCurrentFrame.getCurrentStack = null;
        ReactDebugCurrentFrame.getStackAddendum = function() {
          var stack = "";
          if (currentExtraStackFrame) {
            stack += currentExtraStackFrame;
          }
          var impl = ReactDebugCurrentFrame.getCurrentStack;
          if (impl) {
            stack += impl() || "";
          }
          return stack;
        };
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var ReactSharedInternals = {
        ReactCurrentDispatcher,
        ReactCurrentBatchConfig,
        ReactCurrentOwner
      };
      {
        ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
      }
      function warn(format) {
        {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
      }
      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var didWarnStateUpdateForUnmountedComponent = {};
      function warnNoop(publicInstance, callerName) {
        {
          var _constructor = publicInstance.constructor;
          var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
          var warningKey = componentName + "." + callerName;
          if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
            return;
          }
          error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
          didWarnStateUpdateForUnmountedComponent[warningKey] = true;
        }
      }
      var ReactNoopUpdateQueue = {
        isMounted: function(publicInstance) {
          return false;
        },
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
          warnNoop(publicInstance, "forceUpdate");
        },
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
          warnNoop(publicInstance, "replaceState");
        },
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
          warnNoop(publicInstance, "setState");
        }
      };
      var assign = Object.assign;
      var emptyObject = {};
      {
        Object.freeze(emptyObject);
      }
      function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component.prototype.isReactComponent = {};
      Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        }
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      {
        var deprecatedAPIs = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        };
        var defineDeprecationWarning = function(methodName, info) {
          Object.defineProperty(Component.prototype, methodName, {
            get: function() {
              warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
              return;
            }
          });
        };
        for (var fnName in deprecatedAPIs) {
          if (deprecatedAPIs.hasOwnProperty(fnName)) {
            defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
          }
        }
      }
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component.prototype;
      function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent.prototype = new ComponentDummy;
      pureComponentPrototype.constructor = PureComponent;
      assign(pureComponentPrototype, Component.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      function createRef() {
        var refObject = {
          current: null
        };
        {
          Object.seal(refObject);
        }
        return refObject;
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }
      function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
          {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, "key", {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
      function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
          {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, "ref", {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
      function warnIfStringRefCannotBeAutoConverted(config) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function createElement(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            {
              warnIfStringRefCannotBeAutoConverted(config);
            }
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          self = config.__self === undefined ? null : config.__self;
          source = config.__source === undefined ? null : config.__source;
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0;i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          {
            if (Object.freeze) {
              Object.freeze(childArray);
            }
          }
          props.children = childArray;
        }
        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        {
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
      }
      function cloneElement(element, config, children) {
        if (element === null || element === undefined) {
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        }
        var propName;
        var props = assign({}, element.props);
        var key = element.key;
        var ref = element.ref;
        var self = element._self;
        var source = element._source;
        var owner = element._owner;
        if (config != null) {
          if (hasValidRef(config)) {
            ref = config.ref;
            owner = ReactCurrentOwner.current;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          var defaultProps;
          if (element.type && element.type.defaultProps) {
            defaultProps = element.type.defaultProps;
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              if (config[propName] === undefined && defaultProps !== undefined) {
                props[propName] = defaultProps[propName];
              } else {
                props[propName] = config[propName];
              }
            }
          }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) {
          props.children = children;
        } else if (childrenLength > 1) {
          var childArray = Array(childrenLength);
          for (var i = 0;i < childrenLength; i++) {
            childArray[i] = arguments[i + 2];
          }
          props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
      }
      function isValidElement(object) {
        return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      var SEPARATOR = ".";
      var SUBSEPARATOR = ":";
      function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
          "=": "=0",
          ":": "=2"
        };
        var escapedString = key.replace(escapeRegex, function(match) {
          return escaperLookup[match];
        });
        return "$" + escapedString;
      }
      var didWarnAboutMaps = false;
      var userProvidedKeyEscapeRegex = /\/+/g;
      function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, "$&/");
      }
      function getElementKey(element, index) {
        if (typeof element === "object" && element !== null && element.key != null) {
          {
            checkKeyStringCoercion(element.key);
          }
          return escape("" + element.key);
        }
        return index.toString(36);
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === "undefined" || type === "boolean") {
          children = null;
        }
        var invokeCallback = false;
        if (children === null) {
          invokeCallback = true;
        } else {
          switch (type) {
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
              }
          }
        }
        if (invokeCallback) {
          var _child = children;
          var mappedChild = callback(_child);
          var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
          if (isArray(mappedChild)) {
            var escapedChildKey = "";
            if (childKey != null) {
              escapedChildKey = escapeUserProvidedKey(childKey) + "/";
            }
            mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
              return c;
            });
          } else if (mappedChild != null) {
            if (isValidElement(mappedChild)) {
              {
                if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                  checkKeyStringCoercion(mappedChild.key);
                }
              }
              mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
            }
            array.push(mappedChild);
          }
          return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children)) {
          for (var i = 0;i < children.length; i++) {
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else {
          var iteratorFn = getIteratorFn(children);
          if (typeof iteratorFn === "function") {
            var iterableChildren = children;
            {
              if (iteratorFn === iterableChildren.entries) {
                if (!didWarnAboutMaps) {
                  warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
            }
            var iterator = iteratorFn.call(iterableChildren);
            var step;
            var ii = 0;
            while (!(step = iterator.next()).done) {
              child = step.value;
              nextName = nextNamePrefix + getElementKey(child, ii++);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else if (type === "object") {
            var childrenString = String(children);
            throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
          }
        }
        return subtreeCount;
      }
      function mapChildren(children, func, context) {
        if (children == null) {
          return children;
        }
        var result = [];
        var count = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        });
        return result;
      }
      function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
          n++;
        });
        return n;
      }
      function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
          forEachFunc.apply(this, arguments);
        }, forEachContext);
      }
      function toArray(children) {
        return mapChildren(children, function(child) {
          return child;
        }) || [];
      }
      function onlyChild(children) {
        if (!isValidElement(children)) {
          throw new Error("React.Children.only expected to receive a single React element child.");
        }
        return children;
      }
      function createContext(defaultValue) {
        var context = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null,
          _defaultValue: null,
          _globalName: null
        };
        context.Provider = {
          $$typeof: REACT_PROVIDER_TYPE,
          _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        {
          var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
          };
          Object.defineProperties(Consumer, {
            Provider: {
              get: function() {
                if (!hasWarnedAboutUsingConsumerProvider) {
                  hasWarnedAboutUsingConsumerProvider = true;
                  error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                }
                return context.Provider;
              },
              set: function(_Provider) {
                context.Provider = _Provider;
              }
            },
            _currentValue: {
              get: function() {
                return context._currentValue;
              },
              set: function(_currentValue) {
                context._currentValue = _currentValue;
              }
            },
            _currentValue2: {
              get: function() {
                return context._currentValue2;
              },
              set: function(_currentValue2) {
                context._currentValue2 = _currentValue2;
              }
            },
            _threadCount: {
              get: function() {
                return context._threadCount;
              },
              set: function(_threadCount) {
                context._threadCount = _threadCount;
              }
            },
            Consumer: {
              get: function() {
                if (!hasWarnedAboutUsingNestedContextConsumers) {
                  hasWarnedAboutUsingNestedContextConsumers = true;
                  error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
                return context.Consumer;
              }
            },
            displayName: {
              get: function() {
                return context.displayName;
              },
              set: function(displayName) {
                if (!hasWarnedAboutDisplayNameOnConsumer) {
                  warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                  hasWarnedAboutDisplayNameOnConsumer = true;
                }
              }
            }
          });
          context.Consumer = Consumer;
        }
        {
          context._currentRenderer = null;
          context._currentRenderer2 = null;
        }
        return context;
      }
      var Uninitialized = -1;
      var Pending = 0;
      var Resolved = 1;
      var Rejected = 2;
      function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
          var ctor = payload._result;
          var thenable = ctor();
          thenable.then(function(moduleObject2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var resolved = payload;
              resolved._status = Resolved;
              resolved._result = moduleObject2;
            }
          }, function(error2) {
            if (payload._status === Pending || payload._status === Uninitialized) {
              var rejected = payload;
              rejected._status = Rejected;
              rejected._result = error2;
            }
          });
          if (payload._status === Uninitialized) {
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
          }
        }
        if (payload._status === Resolved) {
          var moduleObject = payload._result;
          {
            if (moduleObject === undefined) {
              error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
            }
          }
          {
            if (!("default" in moduleObject)) {
              error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
            }
          }
          return moduleObject.default;
        } else {
          throw payload._result;
        }
      }
      function lazy(ctor) {
        var payload = {
          _status: Uninitialized,
          _result: ctor
        };
        var lazyType = {
          $$typeof: REACT_LAZY_TYPE,
          _payload: payload,
          _init: lazyInitializer
        };
        {
          var defaultProps;
          var propTypes;
          Object.defineProperties(lazyType, {
            defaultProps: {
              configurable: true,
              get: function() {
                return defaultProps;
              },
              set: function(newDefaultProps) {
                error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                defaultProps = newDefaultProps;
                Object.defineProperty(lazyType, "defaultProps", {
                  enumerable: true
                });
              }
            },
            propTypes: {
              configurable: true,
              get: function() {
                return propTypes;
              },
              set: function(newPropTypes) {
                error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                propTypes = newPropTypes;
                Object.defineProperty(lazyType, "propTypes", {
                  enumerable: true
                });
              }
            }
          });
        }
        return lazyType;
      }
      function forwardRef(render) {
        {
          if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
            error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
          } else if (typeof render !== "function") {
            error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
          } else {
            if (render.length !== 0 && render.length !== 2) {
              error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
            }
          }
          if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) {
              error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
            }
          }
        }
        var elementType = {
          $$typeof: REACT_FORWARD_REF_TYPE,
          render
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!render.name && !render.displayName) {
                render.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
            return true;
          }
        }
        return false;
      }
      function memo(type, compare) {
        {
          if (!isValidElementType(type)) {
            error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
          }
        }
        var elementType = {
          $$typeof: REACT_MEMO_TYPE,
          type,
          compare: compare === undefined ? null : compare
        };
        {
          var ownName;
          Object.defineProperty(elementType, "displayName", {
            enumerable: false,
            configurable: true,
            get: function() {
              return ownName;
            },
            set: function(name) {
              ownName = name;
              if (!type.name && !type.displayName) {
                type.displayName = name;
              }
            }
          });
        }
        return elementType;
      }
      function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        {
          if (dispatcher === null) {
            error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
        }
        return dispatcher;
      }
      function useContext(Context) {
        var dispatcher = resolveDispatcher();
        {
          if (Context._context !== undefined) {
            var realContext = Context._context;
            if (realContext.Consumer === Context) {
              error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            } else if (realContext.Provider === Context) {
              error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
            }
          }
        }
        return dispatcher.useContext(Context);
      }
      function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
      }
      function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
      }
      function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
      }
      function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
      }
      function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
      }
      function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
      }
      function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
      }
      function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
      }
      function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
      }
      function useDebugValue(value, formatterFn) {
        {
          var dispatcher = resolveDispatcher();
          return dispatcher.useDebugValue(value, formatterFn);
        }
      }
      function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
      }
      function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
      }
      function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
      }
      function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
      }
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return "\n" + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap;
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (;s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = undefined;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
          } else {
            setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
          var name = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (name) {
            return "\n\nCheck the render method of `" + name + "`.";
          }
        }
        return "";
      }
      function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, "");
          var lineNumber = source.lineNumber;
          return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
        }
        return "";
      }
      function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) {
          return getSourceInfoErrorAddendum(elementProps.__source);
        }
        return "";
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info;
      }
      function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = "";
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }
        {
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node, parentType) {
        if (typeof node !== "object") {
          return;
        }
        if (isArray(node)) {
          for (var i = 0;i < node.length; i++) {
            var child = node[i];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === "function") {
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === undefined || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i = 0;i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
          var info = "";
          if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendumForProps(props);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = "null";
          } else if (isArray(type)) {
            typeString = "array";
          } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
            info = " Did you accidentally export a JSX literal instead of a component?";
          } else {
            typeString = typeof type;
          }
          {
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
        }
        var element = createElement.apply(this, arguments);
        if (element == null) {
          return element;
        }
        if (validType) {
          for (var i = 2;i < arguments.length; i++) {
            validateChildKeys(arguments[i], type);
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
      var didWarnAboutDeprecatedCreateFactory = false;
      function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        {
          if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
          }
          Object.defineProperty(validatedFactory, "type", {
            enumerable: false,
            get: function() {
              warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
              Object.defineProperty(this, "type", {
                value: type
              });
              return type;
            }
          });
        }
        return validatedFactory;
      }
      function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for (var i = 2;i < arguments.length; i++) {
          validateChildKeys(arguments[i], newElement.type);
        }
        validatePropTypes(newElement);
        return newElement;
      }
      function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        {
          ReactCurrentBatchConfig.transition._updatedFibers = new Set;
        }
        try {
          scope();
        } finally {
          ReactCurrentBatchConfig.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              if (updatedFibersCount > 10) {
                warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
              }
              currentTransition._updatedFibers.clear();
            }
          }
        }
      }
      var didWarnAboutMessageChannel = false;
      var enqueueTaskImpl = null;
      function enqueueTask(task) {
        if (enqueueTaskImpl === null) {
          try {
            var requireString = ("require" + Math.random()).slice(0, 7);
            var nodeRequire = module && module[requireString];
            enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
          } catch (_err) {
            enqueueTaskImpl = function(callback) {
              {
                if (didWarnAboutMessageChannel === false) {
                  didWarnAboutMessageChannel = true;
                  if (typeof MessageChannel === "undefined") {
                    error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                  }
                }
              }
              var channel = new MessageChannel;
              channel.port1.onmessage = callback;
              channel.port2.postMessage(undefined);
            };
          }
        }
        return enqueueTaskImpl(task);
      }
      var actScopeDepth = 0;
      var didWarnNoAwaitAct = false;
      function act(callback) {
        {
          var prevActScopeDepth = actScopeDepth;
          actScopeDepth++;
          if (ReactCurrentActQueue.current === null) {
            ReactCurrentActQueue.current = [];
          }
          var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
          var result;
          try {
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback();
            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                flushActQueue(queue);
              }
            }
          } catch (error2) {
            popActScope(prevActScopeDepth);
            throw error2;
          } finally {
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
          }
          if (result !== null && typeof result === "object" && typeof result.then === "function") {
            var thenableResult = result;
            var wasAwaited = false;
            var thenable = {
              then: function(resolve, reject) {
                wasAwaited = true;
                thenableResult.then(function(returnValue2) {
                  popActScope(prevActScopeDepth);
                  if (actScopeDepth === 0) {
                    recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                  } else {
                    resolve(returnValue2);
                  }
                }, function(error2) {
                  popActScope(prevActScopeDepth);
                  reject(error2);
                });
              }
            };
            {
              if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                Promise.resolve().then(function() {
                }).then(function() {
                  if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                  }
                });
              }
            }
            return thenable;
          } else {
            var returnValue = result;
            popActScope(prevActScopeDepth);
            if (actScopeDepth === 0) {
              var _queue = ReactCurrentActQueue.current;
              if (_queue !== null) {
                flushActQueue(_queue);
                ReactCurrentActQueue.current = null;
              }
              var _thenable = {
                then: function(resolve, reject) {
                  if (ReactCurrentActQueue.current === null) {
                    ReactCurrentActQueue.current = [];
                    recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                  } else {
                    resolve(returnValue);
                  }
                }
              };
              return _thenable;
            } else {
              var _thenable2 = {
                then: function(resolve, reject) {
                  resolve(returnValue);
                }
              };
              return _thenable2;
            }
          }
        }
      }
      function popActScope(prevActScopeDepth) {
        {
          if (prevActScopeDepth !== actScopeDepth - 1) {
            error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
          }
          actScopeDepth = prevActScopeDepth;
        }
      }
      function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        {
          var queue = ReactCurrentActQueue.current;
          if (queue !== null) {
            try {
              flushActQueue(queue);
              enqueueTask(function() {
                if (queue.length === 0) {
                  ReactCurrentActQueue.current = null;
                  resolve(returnValue);
                } else {
                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                }
              });
            } catch (error2) {
              reject(error2);
            }
          } else {
            resolve(returnValue);
          }
        }
      }
      var isFlushing = false;
      function flushActQueue(queue) {
        {
          if (!isFlushing) {
            isFlushing = true;
            var i = 0;
            try {
              for (;i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(true);
                } while (callback !== null);
              }
              queue.length = 0;
            } catch (error2) {
              queue = queue.slice(i + 1);
              throw error2;
            } finally {
              isFlushing = false;
            }
          }
        }
      }
      var createElement$1 = createElementWithValidation;
      var cloneElement$1 = cloneElementWithValidation;
      var createFactory = createFactoryWithValidation;
      var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray,
        only: onlyChild
      };
      exports.Children = Children;
      exports.Component = Component;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.Profiler = REACT_PROFILER_TYPE;
      exports.PureComponent = PureComponent;
      exports.StrictMode = REACT_STRICT_MODE_TYPE;
      exports.Suspense = REACT_SUSPENSE_TYPE;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
      exports.cloneElement = cloneElement$1;
      exports.createContext = createContext;
      exports.createElement = createElement$1;
      exports.createFactory = createFactory;
      exports.createRef = createRef;
      exports.forwardRef = forwardRef;
      exports.isValidElement = isValidElement;
      exports.lazy = lazy;
      exports.memo = memo;
      exports.startTransition = startTransition;
      exports.unstable_act = act;
      exports.useCallback = useCallback;
      exports.useContext = useContext;
      exports.useDebugValue = useDebugValue;
      exports.useDeferredValue = useDeferredValue;
      exports.useEffect = useEffect;
      exports.useId = useId;
      exports.useImperativeHandle = useImperativeHandle;
      exports.useInsertionEffect = useInsertionEffect;
      exports.useLayoutEffect = useLayoutEffect;
      exports.useMemo = useMemo;
      exports.useReducer = useReducer;
      exports.useRef = useRef;
      exports.useState = useState;
      exports.useSyncExternalStore = useSyncExternalStore;
      exports.useTransition = useTransition;
      exports.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
      }
    })();
  }
});

// node_modules/react/index.js
var require_react = __commonJS((exports, module) => {
  var react_development = __toESM(require_react_development(), 1);
  if (false) {
  } else {
    module.exports = react_development;
  }
});

// node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS((exports) => {
  if (true) {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
      }
      var enableSchedulerDebugging = false;
      var enableProfiling = false;
      var frameYieldMs = 5;
      function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
      }
      function peek(heap) {
        return heap.length === 0 ? null : heap[0];
      }
      function pop(heap) {
        if (heap.length === 0) {
          return null;
        }
        var first = heap[0];
        var last = heap.pop();
        if (last !== first) {
          heap[0] = last;
          siftDown(heap, last, 0);
        }
        return first;
      }
      function siftUp(heap, node, i) {
        var index = i;
        while (index > 0) {
          var parentIndex = index - 1 >>> 1;
          var parent = heap[parentIndex];
          if (compare(parent, node) > 0) {
            heap[parentIndex] = node;
            heap[index] = parent;
            index = parentIndex;
          } else {
            return;
          }
        }
      }
      function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        var halfLength = length >>> 1;
        while (index < halfLength) {
          var leftIndex = (index + 1) * 2 - 1;
          var left = heap[leftIndex];
          var rightIndex = leftIndex + 1;
          var right = heap[rightIndex];
          if (compare(left, node) < 0) {
            if (rightIndex < length && compare(right, left) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              heap[index] = left;
              heap[leftIndex] = node;
              index = leftIndex;
            }
          } else if (rightIndex < length && compare(right, node) < 0) {
            heap[index] = right;
            heap[rightIndex] = node;
            index = rightIndex;
          } else {
            return;
          }
        }
      }
      function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
      }
      var ImmediatePriority = 1;
      var UserBlockingPriority = 2;
      var NormalPriority = 3;
      var LowPriority = 4;
      var IdlePriority = 5;
      function markTaskErrored(task, ms) {
      }
      var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
      if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
          return localDate.now() - initialTime;
        };
      }
      var maxSigned31BitInt = 1073741823;
      var IMMEDIATE_PRIORITY_TIMEOUT = -1;
      var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
      var NORMAL_PRIORITY_TIMEOUT = 5000;
      var LOW_PRIORITY_TIMEOUT = 1e4;
      var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var currentTask = null;
      var currentPriorityLevel = NormalPriority;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;
      var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
      var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
      var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
      var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
      function advanceTimers(currentTime) {
        var timer = peek(timerQueue);
        while (timer !== null) {
          if (timer.callback === null) {
            pop(timerQueue);
          } else if (timer.startTime <= currentTime) {
            pop(timerQueue);
            timer.sortIndex = timer.expirationTime;
            push(taskQueue, timer);
          } else {
            return;
          }
          timer = peek(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
          if (peek(taskQueue) !== null) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
          }
        }
      }
      function flushWork(hasTimeRemaining, initialTime2) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
          isHostTimeoutScheduled = false;
          cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          if (enableProfiling) {
            try {
              return workLoop(hasTimeRemaining, initialTime2);
            } catch (error) {
              if (currentTask !== null) {
                var currentTime = exports.unstable_now();
                markTaskErrored(currentTask, currentTime);
                currentTask.isQueued = false;
              }
              throw error;
            }
          } else {
            return workLoop(hasTimeRemaining, initialTime2);
          }
        } finally {
          currentTask = null;
          currentPriorityLevel = previousPriorityLevel;
          isPerformingWork = false;
        }
      }
      function workLoop(hasTimeRemaining, initialTime2) {
        var currentTime = initialTime2;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while (currentTask !== null && !enableSchedulerDebugging) {
          if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
            break;
          }
          var callback = currentTask.callback;
          if (typeof callback === "function") {
            currentTask.callback = null;
            currentPriorityLevel = currentTask.priorityLevel;
            var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
            var continuationCallback = callback(didUserCallbackTimeout);
            currentTime = exports.unstable_now();
            if (typeof continuationCallback === "function") {
              currentTask.callback = continuationCallback;
            } else {
              if (currentTask === peek(taskQueue)) {
                pop(taskQueue);
              }
            }
            advanceTimers(currentTime);
          } else {
            pop(taskQueue);
          }
          currentTask = peek(taskQueue);
        }
        if (currentTask !== null) {
          return true;
        } else {
          var firstTimer = peek(timerQueue);
          if (firstTimer !== null) {
            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
          return false;
        }
      }
      function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
          case LowPriority:
          case IdlePriority:
            break;
          default:
            priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_next(eventHandler) {
        var priorityLevel;
        switch (currentPriorityLevel) {
          case ImmediatePriority:
          case UserBlockingPriority:
          case NormalPriority:
            priorityLevel = NormalPriority;
            break;
          default:
            priorityLevel = currentPriorityLevel;
            break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      }
      function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      }
      function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime2;
        if (typeof options === "object" && options !== null) {
          var delay = options.delay;
          if (typeof delay === "number" && delay > 0) {
            startTime2 = currentTime + delay;
          } else {
            startTime2 = currentTime;
          }
        } else {
          startTime2 = currentTime;
        }
        var timeout;
        switch (priorityLevel) {
          case ImmediatePriority:
            timeout = IMMEDIATE_PRIORITY_TIMEOUT;
            break;
          case UserBlockingPriority:
            timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
            break;
          case IdlePriority:
            timeout = IDLE_PRIORITY_TIMEOUT;
            break;
          case LowPriority:
            timeout = LOW_PRIORITY_TIMEOUT;
            break;
          case NormalPriority:
          default:
            timeout = NORMAL_PRIORITY_TIMEOUT;
            break;
        }
        var expirationTime = startTime2 + timeout;
        var newTask = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: startTime2,
          expirationTime,
          sortIndex: -1
        };
        if (startTime2 > currentTime) {
          newTask.sortIndex = startTime2;
          push(timerQueue, newTask);
          if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
            if (isHostTimeoutScheduled) {
              cancelHostTimeout();
            } else {
              isHostTimeoutScheduled = true;
            }
            requestHostTimeout(handleTimeout, startTime2 - currentTime);
          }
        } else {
          newTask.sortIndex = expirationTime;
          push(taskQueue, newTask);
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        return newTask;
      }
      function unstable_pauseExecution() {
      }
      function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
          isHostCallbackScheduled = true;
          requestHostCallback(flushWork);
        }
      }
      function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
      }
      function unstable_cancelCallback(task) {
        task.callback = null;
      }
      function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
      }
      var isMessageLoopRunning = false;
      var scheduledHostCallback = null;
      var taskTimeoutID = -1;
      var frameInterval = frameYieldMs;
      var startTime = -1;
      function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        if (timeElapsed < frameInterval) {
          return false;
        }
        return true;
      }
      function requestPaint() {
      }
      function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
          console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        if (fps > 0) {
          frameInterval = Math.floor(1000 / fps);
        } else {
          frameInterval = frameYieldMs;
        }
      }
      var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
          var currentTime = exports.unstable_now();
          startTime = currentTime;
          var hasTimeRemaining = true;
          var hasMoreWork = true;
          try {
            hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
          } finally {
            if (hasMoreWork) {
              schedulePerformWorkUntilDeadline();
            } else {
              isMessageLoopRunning = false;
              scheduledHostCallback = null;
            }
          }
        } else {
          isMessageLoopRunning = false;
        }
      };
      var schedulePerformWorkUntilDeadline;
      if (typeof localSetImmediate === "function") {
        schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      } else if (typeof MessageChannel !== "undefined") {
        var channel = new MessageChannel;
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else {
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      }
      function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
          isMessageLoopRunning = true;
          schedulePerformWorkUntilDeadline();
        }
      }
      function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports.unstable_now());
        }, ms);
      }
      function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
      }
      var unstable_requestPaint = requestPaint;
      var unstable_Profiling = null;
      exports.unstable_IdlePriority = IdlePriority;
      exports.unstable_ImmediatePriority = ImmediatePriority;
      exports.unstable_LowPriority = LowPriority;
      exports.unstable_NormalPriority = NormalPriority;
      exports.unstable_Profiling = unstable_Profiling;
      exports.unstable_UserBlockingPriority = UserBlockingPriority;
      exports.unstable_cancelCallback = unstable_cancelCallback;
      exports.unstable_continueExecution = unstable_continueExecution;
      exports.unstable_forceFrameRate = forceFrameRate;
      exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
      exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
      exports.unstable_next = unstable_next;
      exports.unstable_pauseExecution = unstable_pauseExecution;
      exports.unstable_requestPaint = unstable_requestPaint;
      exports.unstable_runWithPriority = unstable_runWithPriority;
      exports.unstable_scheduleCallback = unstable_scheduleCallback;
      exports.unstable_shouldYield = shouldYieldToHost;
      exports.unstable_wrapCallback = unstable_wrapCallback;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
      }
    })();
  }
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS((exports, module) => {
  var scheduler_development = __toESM(require_scheduler_development(), 1);
  if (false) {
  } else {
    module.exports = scheduler_development;
  }
});

// node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS((exports) => {
  var React = __toESM(require_react(), 1);
  var Scheduler = __toESM(require_scheduler(), 1);
  if (true) {
    (function() {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);
      }
      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var suppressWarning = false;
      function setSuppressWarning(newSuppressWarning) {
        {
          suppressWarning = newSuppressWarning;
        }
      }
      function warn(format) {
        {
          if (!suppressWarning) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
      }
      function error(format) {
        {
          if (!suppressWarning) {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var FunctionComponent = 0;
      var ClassComponent = 1;
      var IndeterminateComponent = 2;
      var HostRoot = 3;
      var HostPortal = 4;
      var HostComponent = 5;
      var HostText = 6;
      var Fragment = 7;
      var Mode = 8;
      var ContextConsumer = 9;
      var ContextProvider = 10;
      var ForwardRef = 11;
      var Profiler = 12;
      var SuspenseComponent = 13;
      var MemoComponent = 14;
      var SimpleMemoComponent = 15;
      var LazyComponent = 16;
      var IncompleteClassComponent = 17;
      var DehydratedFragment = 18;
      var SuspenseListComponent = 19;
      var ScopeComponent = 21;
      var OffscreenComponent = 22;
      var LegacyHiddenComponent = 23;
      var CacheComponent = 24;
      var TracingMarkerComponent = 25;
      var enableClientRenderFallbackOnTextMismatch = true;
      var enableNewReconciler = false;
      var enableLazyContextPropagation = false;
      var enableLegacyHidden = false;
      var enableSuspenseAvoidThisFallback = false;
      var disableCommentsAsDOMContainers = true;
      var enableCustomElementPropertySupport = false;
      var warnAboutStringRefs = false;
      var enableSchedulingProfiler = true;
      var enableProfilerTimer = true;
      var enableProfilerCommitHooks = true;
      var allNativeEvents = new Set;
      var registrationNameDependencies = {};
      var possibleRegistrationNames = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        {
          if (registrationNameDependencies[registrationName]) {
            error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
          }
        }
        registrationNameDependencies[registrationName] = dependencies;
        {
          var lowerCasedName = registrationName.toLowerCase();
          possibleRegistrationNames[lowerCasedName] = registrationName;
          if (registrationName === "onDoubleClick") {
            possibleRegistrationNames.ondblclick = registrationName;
          }
        }
        for (var i = 0;i < dependencies.length; i++) {
          allNativeEvents.add(dependencies[i]);
        }
      }
      var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkAttributeStringCoercion(value, attributeName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkPropStringCoercion(value, propName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkCSSPropertyStringCoercion(value, propName) {
        {
          if (willCoercionThrow(value)) {
            error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkHtmlStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      function checkFormFieldValueStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var RESERVED = 0;
      var STRING = 1;
      var BOOLEANISH_STRING = 2;
      var BOOLEAN = 3;
      var OVERLOADED_BOOLEAN = 4;
      var NUMERIC = 5;
      var POSITIVE_NUMERIC = 6;
      var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
      var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
      var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
      var illegalAttributeNameCache = {};
      var validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
          return true;
        }
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
          return false;
        }
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
          validatedAttributeNameCache[attributeName] = true;
          return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        {
          error("Invalid attribute name: `%s`", attributeName);
        }
        return false;
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) {
          return propertyInfo.type === RESERVED;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
          return true;
        }
        return false;
      }
      function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) {
          return false;
        }
        switch (typeof value) {
          case "function":
          case "symbol":
            return true;
          case "boolean": {
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix2 = name.toLowerCase().slice(0, 5);
              return prefix2 !== "data-" && prefix2 !== "aria-";
            }
          }
          default:
            return false;
        }
      }
      function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === "undefined") {
          return true;
        }
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
          return true;
        }
        if (isCustomComponentTag) {
          return false;
        }
        if (propertyInfo !== null) {
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value;
            case OVERLOADED_BOOLEAN:
              return value === false;
            case NUMERIC:
              return isNaN(value);
            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1;
          }
        }
        return false;
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
      }
      function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL2;
        this.removeEmptyString = removeEmptyString;
      }
      var properties = {};
      var reservedProps = [
        "children",
        "dangerouslySetInnerHTML",
        "defaultValue",
        "defaultChecked",
        "innerHTML",
        "suppressContentEditableWarning",
        "suppressHydrationWarning",
        "style"
      ];
      reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
      });
      [
        "allowFullScreen",
        "async",
        "autoFocus",
        "autoPlay",
        "controls",
        "default",
        "defer",
        "disabled",
        "disablePictureInPicture",
        "disableRemotePlayback",
        "formNoValidate",
        "hidden",
        "loop",
        "noModule",
        "noValidate",
        "open",
        "playsInline",
        "readOnly",
        "required",
        "reversed",
        "scoped",
        "seamless",
        "itemScope"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
      });
      [
        "checked",
        "multiple",
        "muted",
        "selected"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
      });
      [
        "capture",
        "download"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
      });
      [
        "cols",
        "rows",
        "size",
        "span"
      ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
      });
      var CAMELIZE = /[\-\:]([a-z])/g;
      var capitalize = function(token) {
        return token[1].toUpperCase();
      };
      [
        "accent-height",
        "alignment-baseline",
        "arabic-form",
        "baseline-shift",
        "cap-height",
        "clip-path",
        "clip-rule",
        "color-interpolation",
        "color-interpolation-filters",
        "color-profile",
        "color-rendering",
        "dominant-baseline",
        "enable-background",
        "fill-opacity",
        "fill-rule",
        "flood-color",
        "flood-opacity",
        "font-family",
        "font-size",
        "font-size-adjust",
        "font-stretch",
        "font-style",
        "font-variant",
        "font-weight",
        "glyph-name",
        "glyph-orientation-horizontal",
        "glyph-orientation-vertical",
        "horiz-adv-x",
        "horiz-origin-x",
        "image-rendering",
        "letter-spacing",
        "lighting-color",
        "marker-end",
        "marker-mid",
        "marker-start",
        "overline-position",
        "overline-thickness",
        "paint-order",
        "panose-1",
        "pointer-events",
        "rendering-intent",
        "shape-rendering",
        "stop-color",
        "stop-opacity",
        "strikethrough-position",
        "strikethrough-thickness",
        "stroke-dasharray",
        "stroke-dashoffset",
        "stroke-linecap",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "text-anchor",
        "text-decoration",
        "text-rendering",
        "underline-position",
        "underline-thickness",
        "unicode-bidi",
        "unicode-range",
        "units-per-em",
        "v-alphabetic",
        "v-hanging",
        "v-ideographic",
        "v-mathematical",
        "vector-effect",
        "vert-adv-y",
        "vert-origin-x",
        "vert-origin-y",
        "word-spacing",
        "writing-mode",
        "xmlns:xlink",
        "x-height"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
      });
      [
        "xlink:actuate",
        "xlink:arcrole",
        "xlink:role",
        "xlink:show",
        "xlink:title",
        "xlink:type"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
      });
      [
        "xml:base",
        "xml:lang",
        "xml:space"
      ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
      });
      var xlinkHref = "xlinkHref";
      properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
      });
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
      var didWarn = false;
      function sanitizeURL(url) {
        {
          if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
          }
        }
      }
      function getValueForProperty(node, name, expected, propertyInfo) {
        {
          if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
          } else {
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL("" + expected);
            }
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
              if (node.hasAttribute(attributeName)) {
                var value = node.getAttribute(attributeName);
                if (value === "") {
                  return true;
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return value;
                }
                if (value === "" + expected) {
                  return expected;
                }
                return value;
              }
            } else if (node.hasAttribute(attributeName)) {
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return node.getAttribute(attributeName);
              }
              if (propertyInfo.type === BOOLEAN) {
                return expected;
              }
              stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return stringValue === null ? expected : stringValue;
            } else if (stringValue === "" + expected) {
              return expected;
            } else {
              return stringValue;
            }
          }
        }
      }
      function getValueForAttribute(node, name, expected, isCustomComponentTag) {
        {
          if (!isAttributeNameSafe(name)) {
            return;
          }
          if (!node.hasAttribute(name)) {
            return expected === undefined ? undefined : null;
          }
          var value = node.getAttribute(name);
          {
            checkAttributeStringCoercion(expected, name);
          }
          if (value === "" + expected) {
            return expected;
          }
          return value;
        }
      }
      function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
          return;
        }
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
          value = null;
        }
        if (isCustomComponentTag || propertyInfo === null) {
          if (isAttributeNameSafe(name)) {
            var _attributeName = name;
            if (value === null) {
              node.removeAttribute(_attributeName);
            } else {
              {
                checkAttributeStringCoercion(value, name);
              }
              node.setAttribute(_attributeName, "" + value);
            }
          }
          return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          if (value === null) {
            var type = propertyInfo.type;
            node[propertyName] = type === BOOLEAN ? false : "";
          } else {
            node[propertyName] = value;
          }
          return;
        }
        var { attributeName, attributeNamespace } = propertyInfo;
        if (value === null) {
          node.removeAttribute(attributeName);
        } else {
          var _type = propertyInfo.type;
          var attributeValue;
          if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
            attributeValue = "";
          } else {
            {
              {
                checkAttributeStringCoercion(value, attributeName);
              }
              attributeValue = "" + value;
            }
            if (propertyInfo.sanitizeURL) {
              sanitizeURL(attributeValue.toString());
            }
          }
          if (attributeNamespace) {
            node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
          } else {
            node.setAttribute(attributeName, attributeValue);
          }
        }
      }
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_SCOPE_TYPE = Symbol.for("react.scope");
      var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
      var REACT_CACHE_TYPE = Symbol.for("react.cache");
      var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var assign = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return "\n" + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap;
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (;s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeClassComponentFrame(ctor, source, ownerFn) {
        {
          return describeNativeComponentFrame(ctor, true);
        }
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type);
          case LazyComponent:
            return describeBuiltInComponentFrame("Lazy");
          case SuspenseComponent:
            return describeBuiltInComponentFrame("Suspense");
          case SuspenseListComponent:
            return describeBuiltInComponentFrame("SuspenseList");
          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type);
          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render);
          case ClassComponent:
            return describeClassComponentFrame(fiber.type);
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info = "";
          var node = workInProgress2;
          do {
            info += describeFiber(node);
            node = node.return;
          } while (node);
          return info;
        } catch (x) {
          return "\nError generating stack: " + x.message + "\n" + x.stack;
        }
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || "";
        return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
      }
      function getContextName$1(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromFiber(fiber) {
        var { tag, type } = fiber;
        switch (tag) {
          case CacheComponent:
            return "Cache";
          case ContextConsumer:
            var context = type;
            return getContextName$1(context) + ".Consumer";
          case ContextProvider:
            var provider = type;
            return getContextName$1(provider._context) + ".Provider";
          case DehydratedFragment:
            return "DehydratedFragment";
          case ForwardRef:
            return getWrappedName$1(type, type.render, "ForwardRef");
          case Fragment:
            return "Fragment";
          case HostComponent:
            return type;
          case HostPortal:
            return "Portal";
          case HostRoot:
            return "Root";
          case HostText:
            return "Text";
          case LazyComponent:
            return getComponentNameFromType(type);
          case Mode:
            if (type === REACT_STRICT_MODE_TYPE) {
              return "StrictMode";
            }
            return "Mode";
          case OffscreenComponent:
            return "Offscreen";
          case Profiler:
            return "Profiler";
          case ScopeComponent:
            return "Scope";
          case SuspenseComponent:
            return "Suspense";
          case SuspenseListComponent:
            return "SuspenseList";
          case TracingMarkerComponent:
            return "TracingMarker";
          case ClassComponent:
          case FunctionComponent:
          case IncompleteClassComponent:
          case IndeterminateComponent:
          case MemoComponent:
          case SimpleMemoComponent:
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            break;
        }
        return null;
      }
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var current = null;
      var isRendering = false;
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null;
          }
          var owner = current._debugOwner;
          if (owner !== null && typeof owner !== "undefined") {
            return getComponentNameFromFiber(owner);
          }
        }
        return null;
      }
      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return "";
          }
          return getStackByFiberInDevAndProd(current);
        }
      }
      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame.getCurrentStack = null;
          current = null;
          isRendering = false;
        }
      }
      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
          current = fiber;
          isRendering = false;
        }
      }
      function getCurrentFiber() {
        {
          return current;
        }
      }
      function setIsRendering(rendering) {
        {
          isRendering = rendering;
        }
      }
      function toString(value) {
        return "" + value;
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            {
              checkFormFieldValueStringCoercion(value);
            }
            return value;
          default:
            return "";
        }
      }
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      function checkControlledValueProps(tagName, props) {
        {
          if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
            error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
          }
          if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
            error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
          }
        }
      }
      function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
      }
      function getTracker(node) {
        return node._valueTracker;
      }
      function detachTracker(node) {
        node._valueTracker = null;
      }
      function getValueFromNode(node) {
        var value = "";
        if (!node) {
          return value;
        }
        if (isCheckable(node)) {
          value = node.checked ? "true" : "false";
        } else {
          value = node.value;
        }
        return value;
      }
      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value";
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        {
          checkFormFieldValueStringCoercion(node[valueField]);
        }
        var currentValue = "" + node[valueField];
        if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
          return;
        }
        var { get: get2, set: set2 } = descriptor;
        Object.defineProperty(node, valueField, {
          configurable: true,
          get: function() {
            return get2.call(this);
          },
          set: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
            set2.call(this, value);
          }
        });
        Object.defineProperty(node, valueField, {
          enumerable: descriptor.enumerable
        });
        var tracker = {
          getValue: function() {
            return currentValue;
          },
          setValue: function(value) {
            {
              checkFormFieldValueStringCoercion(value);
            }
            currentValue = "" + value;
          },
          stopTracking: function() {
            detachTracker(node);
            delete node[valueField];
          }
        };
        return tracker;
      }
      function track(node) {
        if (getTracker(node)) {
          return;
        }
        node._valueTracker = trackValueOnNode(node);
      }
      function updateValueIfChanged(node) {
        if (!node) {
          return false;
        }
        var tracker = getTracker(node);
        if (!tracker) {
          return true;
        }
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
          tracker.setValue(nextValue);
          return true;
        }
        return false;
      }
      function getActiveElement(doc) {
        doc = doc || (typeof document !== "undefined" ? document : undefined);
        if (typeof doc === "undefined") {
          return null;
        }
        try {
          return doc.activeElement || doc.body;
        } catch (e) {
          return doc.body;
        }
      }
      var didWarnValueDefaultValue = false;
      var didWarnCheckedDefaultChecked = false;
      var didWarnControlledToUncontrolled = false;
      var didWarnUncontrolledToControlled = false;
      function isControlled(props) {
        var usesChecked = props.type === "checkbox" || props.type === "radio";
        return usesChecked ? props.checked != null : props.value != null;
      }
      function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = assign({}, props, {
          defaultChecked: undefined,
          defaultValue: undefined,
          value: undefined,
          checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
      }
      function initWrapperState(element, props) {
        {
          checkControlledValueProps("input", props);
          if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnCheckedDefaultChecked = true;
          }
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
            didWarnValueDefaultValue = true;
          }
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
        node._wrapperState = {
          initialChecked: props.checked != null ? props.checked : props.defaultChecked,
          initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
          controlled: isControlled(props)
        };
      }
      function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) {
          setValueForProperty(node, "checked", checked, false);
        }
      }
      function updateWrapper(element, props) {
        var node = element;
        {
          var controlled = isControlled(props);
          if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
          }
          if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
          }
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
          if (type === "number") {
            if (value === 0 && node.value === "" || node.value != value) {
              node.value = toString(value);
            }
          } else if (node.value !== toString(value)) {
            node.value = toString(value);
          }
        } else if (type === "submit" || type === "reset") {
          node.removeAttribute("value");
          return;
        }
        {
          if (props.hasOwnProperty("value")) {
            setDefaultValue(node, props.type, value);
          } else if (props.hasOwnProperty("defaultValue")) {
            setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
          }
        }
        {
          if (props.checked == null && props.defaultChecked != null) {
            node.defaultChecked = !!props.defaultChecked;
          }
        }
      }
      function postMountWrapper(element, props, isHydrating2) {
        var node = element;
        if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
          var type = props.type;
          var isButton = type === "submit" || type === "reset";
          if (isButton && (props.value === undefined || props.value === null)) {
            return;
          }
          var initialValue = toString(node._wrapperState.initialValue);
          if (!isHydrating2) {
            {
              if (initialValue !== node.value) {
                node.value = initialValue;
              }
            }
          }
          {
            node.defaultValue = initialValue;
          }
        }
        var name = node.name;
        if (name !== "") {
          node.name = "";
        }
        {
          node.defaultChecked = !node.defaultChecked;
          node.defaultChecked = !!node._wrapperState.initialChecked;
        }
        if (name !== "") {
          node.name = name;
        }
      }
      function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
      }
      function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === "radio" && name != null) {
          var queryRoot = rootNode;
          while (queryRoot.parentNode) {
            queryRoot = queryRoot.parentNode;
          }
          {
            checkAttributeStringCoercion(name, "name");
          }
          var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
          for (var i = 0;i < group.length; i++) {
            var otherNode = group[i];
            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
              continue;
            }
            var otherProps = getFiberCurrentPropsFromNode(otherNode);
            if (!otherProps) {
              throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
            }
            updateValueIfChanged(otherNode);
            updateWrapper(otherNode, otherProps);
          }
        }
      }
      function setDefaultValue(node, type, value) {
        if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
          if (value == null) {
            node.defaultValue = toString(node._wrapperState.initialValue);
          } else if (node.defaultValue !== toString(value)) {
            node.defaultValue = toString(value);
          }
        }
      }
      var didWarnSelectedSetOnOption = false;
      var didWarnInvalidChild = false;
      var didWarnInvalidInnerHTML = false;
      function validateProps(element, props) {
        {
          if (props.value == null) {
            if (typeof props.children === "object" && props.children !== null) {
              React.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
              });
            } else if (props.dangerouslySetInnerHTML != null) {
              if (!didWarnInvalidInnerHTML) {
                didWarnInvalidInnerHTML = true;
                error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
              }
            }
          }
          if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
          }
        }
      }
      function postMountWrapper$1(element, props) {
        if (props.value != null) {
          element.setAttribute("value", toString(getToStringValue(props.value)));
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      var didWarnValueDefaultValue$1;
      {
        didWarnValueDefaultValue$1 = false;
      }
      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) {
          return "\n\nCheck the render method of `" + ownerName + "`.";
        }
        return "";
      }
      var valuePropNames = ["value", "defaultValue"];
      function checkSelectPropTypes(props) {
        {
          checkControlledValueProps("select", props);
          for (var i = 0;i < valuePropNames.length; i++) {
            var propName = valuePropNames[i];
            if (props[propName] == null) {
              continue;
            }
            var propNameIsArray = isArray(props[propName]);
            if (props.multiple && !propNameIsArray) {
              error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            } else if (!props.multiple && propNameIsArray) {
              error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
            }
          }
        }
      }
      function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options2 = node.options;
        if (multiple) {
          var selectedValues = propValue;
          var selectedValue = {};
          for (var i = 0;i < selectedValues.length; i++) {
            selectedValue["$" + selectedValues[i]] = true;
          }
          for (var _i = 0;_i < options2.length; _i++) {
            var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
            if (options2[_i].selected !== selected) {
              options2[_i].selected = selected;
            }
            if (selected && setDefaultSelected) {
              options2[_i].defaultSelected = true;
            }
          }
        } else {
          var _selectedValue = toString(getToStringValue(propValue));
          var defaultSelected = null;
          for (var _i2 = 0;_i2 < options2.length; _i2++) {
            if (options2[_i2].value === _selectedValue) {
              options2[_i2].selected = true;
              if (setDefaultSelected) {
                options2[_i2].defaultSelected = true;
              }
              return;
            }
            if (defaultSelected === null && !options2[_i2].disabled) {
              defaultSelected = options2[_i2];
            }
          }
          if (defaultSelected !== null) {
            defaultSelected.selected = true;
          }
        }
      }
      function getHostProps$1(element, props) {
        return assign({}, props, {
          value: undefined
        });
      }
      function initWrapperState$1(element, props) {
        var node = element;
        {
          checkSelectPropTypes(props);
        }
        node._wrapperState = {
          wasMultiple: !!props.multiple
        };
        {
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
          }
        }
      }
      function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        } else if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        }
      }
      function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        } else if (wasMultiple !== !!props.multiple) {
          if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          } else {
            updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
          }
        }
      }
      function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) {
          updateOptions(node, !!props.multiple, value, false);
        }
      }
      var didWarnValDefaultVal = false;
      function getHostProps$2(element, props) {
        var node = element;
        if (props.dangerouslySetInnerHTML != null) {
          throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
        }
        var hostProps = assign({}, props, {
          value: undefined,
          defaultValue: undefined,
          children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
      }
      function initWrapperState$2(element, props) {
        var node = element;
        {
          checkControlledValueProps("textarea", props);
          if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
            didWarnValDefaultVal = true;
          }
        }
        var initialValue = props.value;
        if (initialValue == null) {
          var { children, defaultValue } = props;
          if (children != null) {
            {
              error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
            }
            {
              if (defaultValue != null) {
                throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              }
              if (isArray(children)) {
                if (children.length > 1) {
                  throw new Error("<textarea> can only have at most one child.");
                }
                children = children[0];
              }
              defaultValue = children;
            }
          }
          if (defaultValue == null) {
            defaultValue = "";
          }
          initialValue = defaultValue;
        }
        node._wrapperState = {
          initialValue: getToStringValue(initialValue)
        };
      }
      function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
          var newValue = toString(value);
          if (newValue !== node.value) {
            node.value = newValue;
          }
          if (props.defaultValue == null && node.defaultValue !== newValue) {
            node.defaultValue = newValue;
          }
        }
        if (defaultValue != null) {
          node.defaultValue = toString(defaultValue);
        }
      }
      function postMountWrapper$3(element, props) {
        var node = element;
        var textContent = node.textContent;
        if (textContent === node._wrapperState.initialValue) {
          if (textContent !== "" && textContent !== null) {
            node.value = textContent;
          }
        }
      }
      function restoreControlledState$2(element, props) {
        updateWrapper$1(element, props);
      }
      var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
      var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
      var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
      function getIntrinsicNamespace(type) {
        switch (type) {
          case "svg":
            return SVG_NAMESPACE;
          case "math":
            return MATH_NAMESPACE;
          default:
            return HTML_NAMESPACE;
        }
      }
      function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
          return getIntrinsicNamespace(type);
        }
        if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
          return HTML_NAMESPACE;
        }
        return parentNamespace;
      }
      var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
          return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
              return func(arg0, arg1, arg2, arg3);
            });
          };
        } else {
          return func;
        }
      };
      var reusableSVGContainer;
      var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === SVG_NAMESPACE) {
          if (!("innerHTML" in node)) {
            reusableSVGContainer = reusableSVGContainer || document.createElement("div");
            reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
            var svgNode = reusableSVGContainer.firstChild;
            while (node.firstChild) {
              node.removeChild(node.firstChild);
            }
            while (svgNode.firstChild) {
              node.appendChild(svgNode.firstChild);
            }
            return;
          }
        }
        node.innerHTML = html;
      });
      var ELEMENT_NODE = 1;
      var TEXT_NODE = 3;
      var COMMENT_NODE = 8;
      var DOCUMENT_NODE = 9;
      var DOCUMENT_FRAGMENT_NODE = 11;
      var setTextContent = function(node, text) {
        if (text) {
          var firstChild = node.firstChild;
          if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
            firstChild.nodeValue = text;
            return;
          }
        }
        node.textContent = text;
      };
      var shorthandToLonghand = {
        animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
        background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
        backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
        border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
        borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
        borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
        borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
        borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
        borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
        borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
        borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
        borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
        borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
        borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
        borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
        borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
        columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
        columns: ["columnCount", "columnWidth"],
        flex: ["flexBasis", "flexGrow", "flexShrink"],
        flexFlow: ["flexDirection", "flexWrap"],
        font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
        fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
        gap: ["columnGap", "rowGap"],
        grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
        gridColumn: ["gridColumnEnd", "gridColumnStart"],
        gridColumnGap: ["columnGap"],
        gridGap: ["columnGap", "rowGap"],
        gridRow: ["gridRowEnd", "gridRowStart"],
        gridRowGap: ["rowGap"],
        gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
        listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
        margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
        marker: ["markerEnd", "markerMid", "markerStart"],
        mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
        maskPosition: ["maskPositionX", "maskPositionY"],
        outline: ["outlineColor", "outlineStyle", "outlineWidth"],
        overflow: ["overflowX", "overflowY"],
        padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
        placeContent: ["alignContent", "justifyContent"],
        placeItems: ["alignItems", "justifyItems"],
        placeSelf: ["alignSelf", "justifySelf"],
        textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
        textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
        transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
        wordWrap: ["overflowWrap"]
      };
      var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      function prefixKey(prefix2, key) {
        return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
      }
      var prefixes = ["Webkit", "ms", "Moz", "O"];
      Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix2) {
          isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
        });
      });
      function dangerousStyleValue(name, value, isCustomProperty) {
        var isEmpty = value == null || typeof value === "boolean" || value === "";
        if (isEmpty) {
          return "";
        }
        if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
          return value + "px";
        }
        {
          checkCSSPropertyStringCoercion(value, name);
        }
        return ("" + value).trim();
      }
      var uppercasePattern = /([A-Z])/g;
      var msPattern = /^ms-/;
      function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
      }
      var warnValidStyle = function() {
      };
      {
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
        var msPattern$1 = /^-ms-/;
        var hyphenPattern = /-(.)/g;
        var badStyleValueWithSemicolonPattern = /;\s*$/;
        var warnedStyleNames = {};
        var warnedStyleValues = {};
        var warnedForNaNValue = false;
        var warnedForInfinityValue = false;
        var camelize = function(string) {
          return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
          });
        };
        var warnHyphenatedStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
        };
        var warnBadVendoredStyleName = function(name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return;
          }
          warnedStyleNames[name] = true;
          error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
        };
        var warnStyleValueWithSemicolon = function(name, value) {
          if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
            return;
          }
          warnedStyleValues[value] = true;
          error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
        };
        var warnStyleValueIsNaN = function(name, value) {
          if (warnedForNaNValue) {
            return;
          }
          warnedForNaNValue = true;
          error("`NaN` is an invalid value for the `%s` css style property.", name);
        };
        var warnStyleValueIsInfinity = function(name, value) {
          if (warnedForInfinityValue) {
            return;
          }
          warnedForInfinityValue = true;
          error("`Infinity` is an invalid value for the `%s` css style property.", name);
        };
        warnValidStyle = function(name, value) {
          if (name.indexOf("-") > -1) {
            warnHyphenatedStyleName(name);
          } else if (badVendoredStyleNamePattern.test(name)) {
            warnBadVendoredStyleName(name);
          } else if (badStyleValueWithSemicolonPattern.test(value)) {
            warnStyleValueWithSemicolon(name, value);
          }
          if (typeof value === "number") {
            if (isNaN(value)) {
              warnStyleValueIsNaN(name, value);
            } else if (!isFinite(value)) {
              warnStyleValueIsInfinity(name, value);
            }
          }
        };
      }
      var warnValidStyle$1 = warnValidStyle;
      function createDangerousStringForStyles(styles) {
        {
          var serialized = "";
          var delimiter = "";
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var styleValue = styles[styleName];
            if (styleValue != null) {
              var isCustomProperty = styleName.indexOf("--") === 0;
              serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
              serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
              delimiter = ";";
            }
          }
          return serialized || null;
        }
      }
      function setValueForStyles(node, styles) {
        var style2 = node.style;
        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }
          var isCustomProperty = styleName.indexOf("--") === 0;
          {
            if (!isCustomProperty) {
              warnValidStyle$1(styleName, styles[styleName]);
            }
          }
          var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
          if (styleName === "float") {
            styleName = "cssFloat";
          }
          if (isCustomProperty) {
            style2.setProperty(styleName, styleValue);
          } else {
            style2[styleName] = styleValue;
          }
        }
      }
      function isValueEmpty(value) {
        return value == null || typeof value === "boolean" || value === "";
      }
      function expandShorthandMap(styles) {
        var expanded = {};
        for (var key in styles) {
          var longhands = shorthandToLonghand[key] || [key];
          for (var i = 0;i < longhands.length; i++) {
            expanded[longhands[i]] = key;
          }
        }
        return expanded;
      }
      function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        {
          if (!nextStyles) {
            return;
          }
          var expandedUpdates = expandShorthandMap(styleUpdates);
          var expandedStyles = expandShorthandMap(nextStyles);
          var warnedAbout = {};
          for (var key in expandedUpdates) {
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
              var warningKey = originalKey + "," + correctOriginalKey;
              if (warnedAbout[warningKey]) {
                continue;
              }
              warnedAbout[warningKey] = true;
              error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
            }
          }
        }
      }
      var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
      };
      var voidElementTags = assign({
        menuitem: true
      }, omittedCloseTags);
      var HTML = "__html";
      function assertValidProps(tag, props) {
        if (!props) {
          return;
        }
        if (voidElementTags[tag]) {
          if (props.children != null || props.dangerouslySetInnerHTML != null) {
            throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
          }
        }
        if (props.dangerouslySetInnerHTML != null) {
          if (props.children != null) {
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
          }
          if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
          }
        }
        {
          if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
            error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
          }
        }
        if (props.style != null && typeof props.style !== "object") {
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
        }
      }
      function isCustomComponent(tagName, props) {
        if (tagName.indexOf("-") === -1) {
          return typeof props.is === "string";
        }
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var possibleStandardNames = {
        accept: "accept",
        acceptcharset: "acceptCharset",
        "accept-charset": "acceptCharset",
        accesskey: "accessKey",
        action: "action",
        allowfullscreen: "allowFullScreen",
        alt: "alt",
        as: "as",
        async: "async",
        autocapitalize: "autoCapitalize",
        autocomplete: "autoComplete",
        autocorrect: "autoCorrect",
        autofocus: "autoFocus",
        autoplay: "autoPlay",
        autosave: "autoSave",
        capture: "capture",
        cellpadding: "cellPadding",
        cellspacing: "cellSpacing",
        challenge: "challenge",
        charset: "charSet",
        checked: "checked",
        children: "children",
        cite: "cite",
        class: "className",
        classid: "classID",
        classname: "className",
        cols: "cols",
        colspan: "colSpan",
        content: "content",
        contenteditable: "contentEditable",
        contextmenu: "contextMenu",
        controls: "controls",
        controlslist: "controlsList",
        coords: "coords",
        crossorigin: "crossOrigin",
        dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
        data: "data",
        datetime: "dateTime",
        default: "default",
        defaultchecked: "defaultChecked",
        defaultvalue: "defaultValue",
        defer: "defer",
        dir: "dir",
        disabled: "disabled",
        disablepictureinpicture: "disablePictureInPicture",
        disableremoteplayback: "disableRemotePlayback",
        download: "download",
        draggable: "draggable",
        enctype: "encType",
        enterkeyhint: "enterKeyHint",
        for: "htmlFor",
        form: "form",
        formmethod: "formMethod",
        formaction: "formAction",
        formenctype: "formEncType",
        formnovalidate: "formNoValidate",
        formtarget: "formTarget",
        frameborder: "frameBorder",
        headers: "headers",
        height: "height",
        hidden: "hidden",
        high: "high",
        href: "href",
        hreflang: "hrefLang",
        htmlfor: "htmlFor",
        httpequiv: "httpEquiv",
        "http-equiv": "httpEquiv",
        icon: "icon",
        id: "id",
        imagesizes: "imageSizes",
        imagesrcset: "imageSrcSet",
        innerhtml: "innerHTML",
        inputmode: "inputMode",
        integrity: "integrity",
        is: "is",
        itemid: "itemID",
        itemprop: "itemProp",
        itemref: "itemRef",
        itemscope: "itemScope",
        itemtype: "itemType",
        keyparams: "keyParams",
        keytype: "keyType",
        kind: "kind",
        label: "label",
        lang: "lang",
        list: "list",
        loop: "loop",
        low: "low",
        manifest: "manifest",
        marginwidth: "marginWidth",
        marginheight: "marginHeight",
        max: "max",
        maxlength: "maxLength",
        media: "media",
        mediagroup: "mediaGroup",
        method: "method",
        min: "min",
        minlength: "minLength",
        multiple: "multiple",
        muted: "muted",
        name: "name",
        nomodule: "noModule",
        nonce: "nonce",
        novalidate: "noValidate",
        open: "open",
        optimum: "optimum",
        pattern: "pattern",
        placeholder: "placeholder",
        playsinline: "playsInline",
        poster: "poster",
        preload: "preload",
        profile: "profile",
        radiogroup: "radioGroup",
        readonly: "readOnly",
        referrerpolicy: "referrerPolicy",
        rel: "rel",
        required: "required",
        reversed: "reversed",
        role: "role",
        rows: "rows",
        rowspan: "rowSpan",
        sandbox: "sandbox",
        scope: "scope",
        scoped: "scoped",
        scrolling: "scrolling",
        seamless: "seamless",
        selected: "selected",
        shape: "shape",
        size: "size",
        sizes: "sizes",
        span: "span",
        spellcheck: "spellCheck",
        src: "src",
        srcdoc: "srcDoc",
        srclang: "srcLang",
        srcset: "srcSet",
        start: "start",
        step: "step",
        style: "style",
        summary: "summary",
        tabindex: "tabIndex",
        target: "target",
        title: "title",
        type: "type",
        usemap: "useMap",
        value: "value",
        width: "width",
        wmode: "wmode",
        wrap: "wrap",
        about: "about",
        accentheight: "accentHeight",
        "accent-height": "accentHeight",
        accumulate: "accumulate",
        additive: "additive",
        alignmentbaseline: "alignmentBaseline",
        "alignment-baseline": "alignmentBaseline",
        allowreorder: "allowReorder",
        alphabetic: "alphabetic",
        amplitude: "amplitude",
        arabicform: "arabicForm",
        "arabic-form": "arabicForm",
        ascent: "ascent",
        attributename: "attributeName",
        attributetype: "attributeType",
        autoreverse: "autoReverse",
        azimuth: "azimuth",
        basefrequency: "baseFrequency",
        baselineshift: "baselineShift",
        "baseline-shift": "baselineShift",
        baseprofile: "baseProfile",
        bbox: "bbox",
        begin: "begin",
        bias: "bias",
        by: "by",
        calcmode: "calcMode",
        capheight: "capHeight",
        "cap-height": "capHeight",
        clip: "clip",
        clippath: "clipPath",
        "clip-path": "clipPath",
        clippathunits: "clipPathUnits",
        cliprule: "clipRule",
        "clip-rule": "clipRule",
        color: "color",
        colorinterpolation: "colorInterpolation",
        "color-interpolation": "colorInterpolation",
        colorinterpolationfilters: "colorInterpolationFilters",
        "color-interpolation-filters": "colorInterpolationFilters",
        colorprofile: "colorProfile",
        "color-profile": "colorProfile",
        colorrendering: "colorRendering",
        "color-rendering": "colorRendering",
        contentscripttype: "contentScriptType",
        contentstyletype: "contentStyleType",
        cursor: "cursor",
        cx: "cx",
        cy: "cy",
        d: "d",
        datatype: "datatype",
        decelerate: "decelerate",
        descent: "descent",
        diffuseconstant: "diffuseConstant",
        direction: "direction",
        display: "display",
        divisor: "divisor",
        dominantbaseline: "dominantBaseline",
        "dominant-baseline": "dominantBaseline",
        dur: "dur",
        dx: "dx",
        dy: "dy",
        edgemode: "edgeMode",
        elevation: "elevation",
        enablebackground: "enableBackground",
        "enable-background": "enableBackground",
        end: "end",
        exponent: "exponent",
        externalresourcesrequired: "externalResourcesRequired",
        fill: "fill",
        fillopacity: "fillOpacity",
        "fill-opacity": "fillOpacity",
        fillrule: "fillRule",
        "fill-rule": "fillRule",
        filter: "filter",
        filterres: "filterRes",
        filterunits: "filterUnits",
        floodopacity: "floodOpacity",
        "flood-opacity": "floodOpacity",
        floodcolor: "floodColor",
        "flood-color": "floodColor",
        focusable: "focusable",
        fontfamily: "fontFamily",
        "font-family": "fontFamily",
        fontsize: "fontSize",
        "font-size": "fontSize",
        fontsizeadjust: "fontSizeAdjust",
        "font-size-adjust": "fontSizeAdjust",
        fontstretch: "fontStretch",
        "font-stretch": "fontStretch",
        fontstyle: "fontStyle",
        "font-style": "fontStyle",
        fontvariant: "fontVariant",
        "font-variant": "fontVariant",
        fontweight: "fontWeight",
        "font-weight": "fontWeight",
        format: "format",
        from: "from",
        fx: "fx",
        fy: "fy",
        g1: "g1",
        g2: "g2",
        glyphname: "glyphName",
        "glyph-name": "glyphName",
        glyphorientationhorizontal: "glyphOrientationHorizontal",
        "glyph-orientation-horizontal": "glyphOrientationHorizontal",
        glyphorientationvertical: "glyphOrientationVertical",
        "glyph-orientation-vertical": "glyphOrientationVertical",
        glyphref: "glyphRef",
        gradienttransform: "gradientTransform",
        gradientunits: "gradientUnits",
        hanging: "hanging",
        horizadvx: "horizAdvX",
        "horiz-adv-x": "horizAdvX",
        horizoriginx: "horizOriginX",
        "horiz-origin-x": "horizOriginX",
        ideographic: "ideographic",
        imagerendering: "imageRendering",
        "image-rendering": "imageRendering",
        in2: "in2",
        in: "in",
        inlist: "inlist",
        intercept: "intercept",
        k1: "k1",
        k2: "k2",
        k3: "k3",
        k4: "k4",
        k: "k",
        kernelmatrix: "kernelMatrix",
        kernelunitlength: "kernelUnitLength",
        kerning: "kerning",
        keypoints: "keyPoints",
        keysplines: "keySplines",
        keytimes: "keyTimes",
        lengthadjust: "lengthAdjust",
        letterspacing: "letterSpacing",
        "letter-spacing": "letterSpacing",
        lightingcolor: "lightingColor",
        "lighting-color": "lightingColor",
        limitingconeangle: "limitingConeAngle",
        local: "local",
        markerend: "markerEnd",
        "marker-end": "markerEnd",
        markerheight: "markerHeight",
        markermid: "markerMid",
        "marker-mid": "markerMid",
        markerstart: "markerStart",
        "marker-start": "markerStart",
        markerunits: "markerUnits",
        markerwidth: "markerWidth",
        mask: "mask",
        maskcontentunits: "maskContentUnits",
        maskunits: "maskUnits",
        mathematical: "mathematical",
        mode: "mode",
        numoctaves: "numOctaves",
        offset: "offset",
        opacity: "opacity",
        operator: "operator",
        order: "order",
        orient: "orient",
        orientation: "orientation",
        origin: "origin",
        overflow: "overflow",
        overlineposition: "overlinePosition",
        "overline-position": "overlinePosition",
        overlinethickness: "overlineThickness",
        "overline-thickness": "overlineThickness",
        paintorder: "paintOrder",
        "paint-order": "paintOrder",
        panose1: "panose1",
        "panose-1": "panose1",
        pathlength: "pathLength",
        patterncontentunits: "patternContentUnits",
        patterntransform: "patternTransform",
        patternunits: "patternUnits",
        pointerevents: "pointerEvents",
        "pointer-events": "pointerEvents",
        points: "points",
        pointsatx: "pointsAtX",
        pointsaty: "pointsAtY",
        pointsatz: "pointsAtZ",
        prefix: "prefix",
        preservealpha: "preserveAlpha",
        preserveaspectratio: "preserveAspectRatio",
        primitiveunits: "primitiveUnits",
        property: "property",
        r: "r",
        radius: "radius",
        refx: "refX",
        refy: "refY",
        renderingintent: "renderingIntent",
        "rendering-intent": "renderingIntent",
        repeatcount: "repeatCount",
        repeatdur: "repeatDur",
        requiredextensions: "requiredExtensions",
        requiredfeatures: "requiredFeatures",
        resource: "resource",
        restart: "restart",
        result: "result",
        results: "results",
        rotate: "rotate",
        rx: "rx",
        ry: "ry",
        scale: "scale",
        security: "security",
        seed: "seed",
        shaperendering: "shapeRendering",
        "shape-rendering": "shapeRendering",
        slope: "slope",
        spacing: "spacing",
        specularconstant: "specularConstant",
        specularexponent: "specularExponent",
        speed: "speed",
        spreadmethod: "spreadMethod",
        startoffset: "startOffset",
        stddeviation: "stdDeviation",
        stemh: "stemh",
        stemv: "stemv",
        stitchtiles: "stitchTiles",
        stopcolor: "stopColor",
        "stop-color": "stopColor",
        stopopacity: "stopOpacity",
        "stop-opacity": "stopOpacity",
        strikethroughposition: "strikethroughPosition",
        "strikethrough-position": "strikethroughPosition",
        strikethroughthickness: "strikethroughThickness",
        "strikethrough-thickness": "strikethroughThickness",
        string: "string",
        stroke: "stroke",
        strokedasharray: "strokeDasharray",
        "stroke-dasharray": "strokeDasharray",
        strokedashoffset: "strokeDashoffset",
        "stroke-dashoffset": "strokeDashoffset",
        strokelinecap: "strokeLinecap",
        "stroke-linecap": "strokeLinecap",
        strokelinejoin: "strokeLinejoin",
        "stroke-linejoin": "strokeLinejoin",
        strokemiterlimit: "strokeMiterlimit",
        "stroke-miterlimit": "strokeMiterlimit",
        strokewidth: "strokeWidth",
        "stroke-width": "strokeWidth",
        strokeopacity: "strokeOpacity",
        "stroke-opacity": "strokeOpacity",
        suppresscontenteditablewarning: "suppressContentEditableWarning",
        suppresshydrationwarning: "suppressHydrationWarning",
        surfacescale: "surfaceScale",
        systemlanguage: "systemLanguage",
        tablevalues: "tableValues",
        targetx: "targetX",
        targety: "targetY",
        textanchor: "textAnchor",
        "text-anchor": "textAnchor",
        textdecoration: "textDecoration",
        "text-decoration": "textDecoration",
        textlength: "textLength",
        textrendering: "textRendering",
        "text-rendering": "textRendering",
        to: "to",
        transform: "transform",
        typeof: "typeof",
        u1: "u1",
        u2: "u2",
        underlineposition: "underlinePosition",
        "underline-position": "underlinePosition",
        underlinethickness: "underlineThickness",
        "underline-thickness": "underlineThickness",
        unicode: "unicode",
        unicodebidi: "unicodeBidi",
        "unicode-bidi": "unicodeBidi",
        unicoderange: "unicodeRange",
        "unicode-range": "unicodeRange",
        unitsperem: "unitsPerEm",
        "units-per-em": "unitsPerEm",
        unselectable: "unselectable",
        valphabetic: "vAlphabetic",
        "v-alphabetic": "vAlphabetic",
        values: "values",
        vectoreffect: "vectorEffect",
        "vector-effect": "vectorEffect",
        version: "version",
        vertadvy: "vertAdvY",
        "vert-adv-y": "vertAdvY",
        vertoriginx: "vertOriginX",
        "vert-origin-x": "vertOriginX",
        vertoriginy: "vertOriginY",
        "vert-origin-y": "vertOriginY",
        vhanging: "vHanging",
        "v-hanging": "vHanging",
        videographic: "vIdeographic",
        "v-ideographic": "vIdeographic",
        viewbox: "viewBox",
        viewtarget: "viewTarget",
        visibility: "visibility",
        vmathematical: "vMathematical",
        "v-mathematical": "vMathematical",
        vocab: "vocab",
        widths: "widths",
        wordspacing: "wordSpacing",
        "word-spacing": "wordSpacing",
        writingmode: "writingMode",
        "writing-mode": "writingMode",
        x1: "x1",
        x2: "x2",
        x: "x",
        xchannelselector: "xChannelSelector",
        xheight: "xHeight",
        "x-height": "xHeight",
        xlinkactuate: "xlinkActuate",
        "xlink:actuate": "xlinkActuate",
        xlinkarcrole: "xlinkArcrole",
        "xlink:arcrole": "xlinkArcrole",
        xlinkhref: "xlinkHref",
        "xlink:href": "xlinkHref",
        xlinkrole: "xlinkRole",
        "xlink:role": "xlinkRole",
        xlinkshow: "xlinkShow",
        "xlink:show": "xlinkShow",
        xlinktitle: "xlinkTitle",
        "xlink:title": "xlinkTitle",
        xlinktype: "xlinkType",
        "xlink:type": "xlinkType",
        xmlbase: "xmlBase",
        "xml:base": "xmlBase",
        xmllang: "xmlLang",
        "xml:lang": "xmlLang",
        xmlns: "xmlns",
        "xml:space": "xmlSpace",
        xmlnsxlink: "xmlnsXlink",
        "xmlns:xlink": "xmlnsXlink",
        xmlspace: "xmlSpace",
        y1: "y1",
        y2: "y2",
        y: "y",
        ychannelselector: "yChannelSelector",
        z: "z",
        zoomandpan: "zoomAndPan"
      };
      var ariaProperties = {
        "aria-current": 0,
        "aria-description": 0,
        "aria-details": 0,
        "aria-disabled": 0,
        "aria-hidden": 0,
        "aria-invalid": 0,
        "aria-keyshortcuts": 0,
        "aria-label": 0,
        "aria-roledescription": 0,
        "aria-autocomplete": 0,
        "aria-checked": 0,
        "aria-expanded": 0,
        "aria-haspopup": 0,
        "aria-level": 0,
        "aria-modal": 0,
        "aria-multiline": 0,
        "aria-multiselectable": 0,
        "aria-orientation": 0,
        "aria-placeholder": 0,
        "aria-pressed": 0,
        "aria-readonly": 0,
        "aria-required": 0,
        "aria-selected": 0,
        "aria-sort": 0,
        "aria-valuemax": 0,
        "aria-valuemin": 0,
        "aria-valuenow": 0,
        "aria-valuetext": 0,
        "aria-atomic": 0,
        "aria-busy": 0,
        "aria-live": 0,
        "aria-relevant": 0,
        "aria-dropeffect": 0,
        "aria-grabbed": 0,
        "aria-activedescendant": 0,
        "aria-colcount": 0,
        "aria-colindex": 0,
        "aria-colspan": 0,
        "aria-controls": 0,
        "aria-describedby": 0,
        "aria-errormessage": 0,
        "aria-flowto": 0,
        "aria-labelledby": 0,
        "aria-owns": 0,
        "aria-posinset": 0,
        "aria-rowcount": 0,
        "aria-rowindex": 0,
        "aria-rowspan": 0,
        "aria-setsize": 0
      };
      var warnedProperties = {};
      var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
      var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
      function validateProperty(tagName, name) {
        {
          if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
            return true;
          }
          if (rARIACamel.test(name)) {
            var ariaName = "aria-" + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null) {
              error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
              warnedProperties[name] = true;
              return true;
            }
            if (name !== correctName) {
              error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
              warnedProperties[name] = true;
              return true;
            }
          }
          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null) {
              warnedProperties[name] = true;
              return false;
            }
            if (name !== standardName) {
              error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties[name] = true;
              return true;
            }
          }
        }
        return true;
      }
      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = [];
          for (var key in props) {
            var isValid = validateProperty(type, key);
            if (!isValid) {
              invalidProps.push(key);
            }
          }
          var unknownPropString = invalidProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (invalidProps.length === 1) {
            error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          } else if (invalidProps.length > 1) {
            error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
          }
        }
      }
      function validateProperties(type, props) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnInvalidARIAProps(type, props);
      }
      var didWarnValueNull = false;
      function validateProperties$1(type, props) {
        {
          if (type !== "input" && type !== "textarea" && type !== "select") {
            return;
          }
          if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === "select" && props.multiple) {
              error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            } else {
              error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
            }
          }
        }
      }
      var validateProperty$1 = function() {
      };
      {
        var warnedProperties$1 = {};
        var EVENT_NAME_REGEX = /^on./;
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
        var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        validateProperty$1 = function(tagName, name, value, eventRegistry) {
          if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
            return true;
          }
          var lowerCasedName = name.toLowerCase();
          if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (eventRegistry != null) {
            var { registrationNameDependencies: registrationNameDependencies2, possibleRegistrationNames: possibleRegistrationNames2 } = eventRegistry;
            if (registrationNameDependencies2.hasOwnProperty(name)) {
              return true;
            }
            var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
            if (registrationName != null) {
              error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
              error("Unknown event handler property `%s`. It will be ignored.", name);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (EVENT_NAME_REGEX.test(name)) {
            if (INVALID_EVENT_NAME_REGEX.test(name)) {
              error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
            return true;
          }
          if (lowerCasedName === "innerhtml") {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "aria") {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
          }
          if (lowerCasedName === "is" && value !== null && value !== undefined && typeof value !== "string") {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "number" && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
          }
          var propertyInfo = getPropertyInfo(name);
          var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
              error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
              warnedProperties$1[name] = true;
              return true;
            }
          } else if (!isReserved && name !== lowerCasedName) {
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
          }
          if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            } else {
              error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            }
            warnedProperties$1[name] = true;
            return true;
          }
          if (isReserved) {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
          }
          if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
          }
          return true;
        };
      }
      var warnUnknownProperties = function(type, props, eventRegistry) {
        {
          var unknownProps = [];
          for (var key in props) {
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) {
              unknownProps.push(key);
            }
          }
          var unknownPropString = unknownProps.map(function(prop) {
            return "`" + prop + "`";
          }).join(", ");
          if (unknownProps.length === 1) {
            error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          } else if (unknownProps.length > 1) {
            error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
          }
        }
      };
      function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) {
          return;
        }
        warnUnknownProperties(type, props, eventRegistry);
      }
      var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
      var IS_NON_DELEGATED = 1 << 1;
      var IS_CAPTURE_PHASE = 1 << 2;
      var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
      var currentReplayingEvent = null;
      function setReplayingEvent(event) {
        {
          if (currentReplayingEvent !== null) {
            error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = event;
      }
      function resetReplayingEvent() {
        {
          if (currentReplayingEvent === null) {
            error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        currentReplayingEvent = null;
      }
      function isReplayingEvent(event) {
        return event === currentReplayingEvent;
      }
      function getEventTarget(nativeEvent) {
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        if (target.correspondingUseElement) {
          target = target.correspondingUseElement;
        }
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
      }
      var restoreImpl = null;
      var restoreTarget = null;
      var restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) {
          return;
        }
        if (typeof restoreImpl !== "function") {
          throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        }
        var stateNode = internalInstance.stateNode;
        if (stateNode) {
          var _props = getFiberCurrentPropsFromNode(stateNode);
          restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
      }
      function setRestoreImplementation(impl) {
        restoreImpl = impl;
      }
      function enqueueStateRestore(target) {
        if (restoreTarget) {
          if (restoreQueue) {
            restoreQueue.push(target);
          } else {
            restoreQueue = [target];
          }
        } else {
          restoreTarget = target;
        }
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
      }
      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return;
        }
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) {
          for (var i = 0;i < queuedTargets.length; i++) {
            restoreStateOfTarget(queuedTargets[i]);
          }
        }
      }
      var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
      };
      var flushSyncImpl = function() {
      };
      var isInsideEventHandler = false;
      function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
          flushSyncImpl();
          restoreStateIfNeeded();
        }
      }
      function batchedUpdates(fn, a, b) {
        if (isInsideEventHandler) {
          return fn(a, b);
        }
        isInsideEventHandler = true;
        try {
          return batchedUpdatesImpl(fn, a, b);
        } finally {
          isInsideEventHandler = false;
          finishEventHandler();
        }
      }
      function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        flushSyncImpl = _flushSyncImpl;
      }
      function isInteractive(tag) {
        return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
      }
      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            return !!(props.disabled && isInteractive(type));
          default:
            return false;
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) {
          return null;
        }
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) {
          return null;
        }
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null;
        }
        if (listener && typeof listener !== "function") {
          throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        }
        return listener;
      }
      var passiveBrowserEventsSupported = false;
      if (canUseDOM) {
        try {
          var options = {};
          Object.defineProperty(options, "passive", {
            get: function() {
              passiveBrowserEventsSupported = true;
            }
          });
          window.addEventListener("test", options, options);
          window.removeEventListener("test", options, options);
        } catch (e) {
          passiveBrowserEventsSupported = false;
        }
      }
      function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
          func.apply(context, funcArgs);
        } catch (error2) {
          this.onError(error2);
        }
      }
      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
      {
        if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
          var fakeNode = document.createElement("react");
          invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            if (typeof document === "undefined" || document === null) {
              throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            }
            var evt = document.createEvent("Event");
            var didCall = false;
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
            function restoreAfterDispatch() {
              fakeNode.removeEventListener(evtType, callCallback2, false);
              if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                window.event = windowEvent;
              }
            }
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback2() {
              didCall = true;
              restoreAfterDispatch();
              func.apply(context, funcArgs);
              didError = false;
            }
            var error2;
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
              error2 = event.error;
              didSetError = true;
              if (error2 === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true;
              }
              if (event.defaultPrevented) {
                if (error2 != null && typeof error2 === "object") {
                  try {
                    error2._suppressLogging = true;
                  } catch (inner) {
                  }
                }
              }
            }
            var evtType = "react-" + (name ? name : "invokeguardedcallback");
            window.addEventListener("error", handleWindowError);
            fakeNode.addEventListener(evtType, callCallback2, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) {
              Object.defineProperty(window, "event", windowEventDescriptor);
            }
            if (didCall && didError) {
              if (!didSetError) {
                error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
              } else if (isCrossOriginError) {
                error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
              }
              this.onError(error2);
            }
            window.removeEventListener("error", handleWindowError);
            if (!didCall) {
              restoreAfterDispatch();
              return invokeGuardedCallbackProd.apply(this, arguments);
            }
          };
        }
      }
      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
      var hasError = false;
      var caughtError = null;
      var hasRethrowError = false;
      var rethrowError = null;
      var reporter = {
        onError: function(error2) {
          hasError = true;
          caughtError = error2;
        }
      };
      function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
      }
      function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
          var error2 = clearCaughtError();
          if (!hasRethrowError) {
            hasRethrowError = true;
            rethrowError = error2;
          }
        }
      }
      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error2 = rethrowError;
          hasRethrowError = false;
          rethrowError = null;
          throw error2;
        }
      }
      function hasCaughtError() {
        return hasError;
      }
      function clearCaughtError() {
        if (hasError) {
          var error2 = caughtError;
          hasError = false;
          caughtError = null;
          return error2;
        } else {
          throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function get(key) {
        return key._reactInternals;
      }
      function has(key) {
        return key._reactInternals !== undefined;
      }
      function set(key, value) {
        key._reactInternals = value;
      }
      var NoFlags = 0;
      var PerformedWork = 1;
      var Placement = 2;
      var Update = 4;
      var ChildDeletion = 16;
      var ContentReset = 32;
      var Callback = 64;
      var DidCapture = 128;
      var ForceClientRender = 256;
      var Ref = 512;
      var Snapshot = 1024;
      var Passive = 2048;
      var Hydrating = 4096;
      var Visibility = 8192;
      var StoreConsistency = 16384;
      var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
      var HostEffectMask = 32767;
      var Incomplete = 32768;
      var ShouldCapture = 65536;
      var ForceUpdateForLegacySuspense = 131072;
      var Forked = 1048576;
      var RefStatic = 2097152;
      var LayoutStatic = 4194304;
      var PassiveStatic = 8388608;
      var MountLayoutDev = 16777216;
      var MountPassiveDev = 33554432;
      var BeforeMutationMask = Update | Snapshot | 0;
      var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
      var LayoutMask = Update | Callback | Ref | Visibility;
      var PassiveMask = Passive | ChildDeletion;
      var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
          var nextNode = node;
          do {
            node = nextNode;
            if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
              nearestMounted = node.return;
            }
            nextNode = node.return;
          } while (nextNode);
        } else {
          while (node.return) {
            node = node.return;
          }
        }
        if (node.tag === HostRoot) {
          return nearestMounted;
        }
        return null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState === null) {
            var current2 = fiber.alternate;
            if (current2 !== null) {
              suspenseState = current2.memoizedState;
            }
          }
          if (suspenseState !== null) {
            return suspenseState.dehydrated;
          }
        }
        return null;
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
      }
      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current;
          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) {
              error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
            }
            instance._warnedAboutRefsInRender = true;
          }
        }
        var fiber = get(component);
        if (!fiber) {
          return false;
        }
        return getNearestMountedFiber(fiber) === fiber;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) {
          throw new Error("Unable to find node on an unmounted component.");
        }
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          var nearestMounted = getNearestMountedFiber(fiber);
          if (nearestMounted === null) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (nearestMounted !== fiber) {
            return null;
          }
          return fiber;
        }
        var a = fiber;
        var b = alternate;
        while (true) {
          var parentA = a.return;
          if (parentA === null) {
            break;
          }
          var parentB = parentA.alternate;
          if (parentB === null) {
            var nextParent = parentA.return;
            if (nextParent !== null) {
              a = b = nextParent;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            var child = parentA.child;
            while (child) {
              if (child === a) {
                assertIsMounted(parentA);
                return fiber;
              }
              if (child === b) {
                assertIsMounted(parentA);
                return alternate;
              }
              child = child.sibling;
            }
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a.return !== b.return) {
            a = parentA;
            b = parentB;
          } else {
            var didFindChild = false;
            var _child = parentA.child;
            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentA;
                b = parentB;
                break;
              }
              if (_child === b) {
                didFindChild = true;
                b = parentA;
                a = parentB;
                break;
              }
              _child = _child.sibling;
            }
            if (!didFindChild) {
              _child = parentB.child;
              while (_child) {
                if (_child === a) {
                  didFindChild = true;
                  a = parentB;
                  b = parentA;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentB;
                  a = parentA;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
              }
            }
          }
          if (a.alternate !== b) {
            throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (a.tag !== HostRoot) {
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (a.stateNode.current === a) {
          return fiber;
        }
        return alternate;
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
      }
      function findCurrentHostFiberImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        }
        var child = node.child;
        while (child !== null) {
          var match = findCurrentHostFiberImpl(child);
          if (match !== null) {
            return match;
          }
          child = child.sibling;
        }
        return null;
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
      }
      function findCurrentHostFiberWithNoPortalsImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        }
        var child = node.child;
        while (child !== null) {
          if (child.tag !== HostPortal) {
            var match = findCurrentHostFiberWithNoPortalsImpl(child);
            if (match !== null) {
              return match;
            }
          }
          child = child.sibling;
        }
        return null;
      }
      var scheduleCallback = Scheduler.unstable_scheduleCallback;
      var cancelCallback = Scheduler.unstable_cancelCallback;
      var shouldYield = Scheduler.unstable_shouldYield;
      var requestPaint = Scheduler.unstable_requestPaint;
      var now = Scheduler.unstable_now;
      var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
      var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
      var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
      var NormalPriority = Scheduler.unstable_NormalPriority;
      var LowPriority = Scheduler.unstable_LowPriority;
      var IdlePriority = Scheduler.unstable_IdlePriority;
      var unstable_yieldValue2 = Scheduler.unstable_yieldValue;
      var unstable_setDisableYieldValue2 = Scheduler.unstable_setDisableYieldValue;
      var rendererID = null;
      var injectedHook = null;
      var injectedProfilingHooks = null;
      var hasLoggedError = false;
      var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
          return false;
        }
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) {
          return true;
        }
        if (!hook.supportsFiber) {
          {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
          }
          return true;
        }
        try {
          if (enableSchedulingProfiler) {
            internals = assign({}, internals, {
              getLaneLabelMap,
              injectProfilingHooks
            });
          }
          rendererID = hook.inject(internals);
          injectedHook = hook;
        } catch (err) {
          {
            error("React instrumentation encountered an error: %s.", err);
          }
        }
        if (hook.checkDCE) {
          return true;
        } else {
          return false;
        }
      }
      function onScheduleRoot(root2, children) {
        {
          if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
            try {
              injectedHook.onScheduleFiberRoot(rendererID, root2, children);
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitRoot(root2, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
          try {
            var didError = (root2.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
              var schedulerPriority;
              switch (eventPriority) {
                case DiscreteEventPriority:
                  schedulerPriority = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriority = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriority = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriority = IdlePriority;
                  break;
                default:
                  schedulerPriority = NormalPriority;
                  break;
              }
              injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
            } else {
              injectedHook.onCommitFiberRoot(rendererID, root2, undefined, didError);
            }
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onPostCommitRoot(root2) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
          try {
            injectedHook.onPostCommitFiberRoot(rendererID, root2);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true;
                error("React instrumentation encountered an error: %s", err);
              }
            }
          }
        }
      }
      function setIsStrictModeForDevtools(newIsStrictMode) {
        {
          if (typeof unstable_yieldValue2 === "function") {
            unstable_setDisableYieldValue2(newIsStrictMode);
            setSuppressWarning(newIsStrictMode);
          }
          if (injectedHook && typeof injectedHook.setStrictMode === "function") {
            try {
              injectedHook.setStrictMode(rendererID, newIsStrictMode);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
      }
      function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
      }
      function getLaneLabelMap() {
        {
          var map = new Map;
          var lane = 1;
          for (var index2 = 0;index2 < TotalLanes; index2++) {
            var label = getLabelForLane(lane);
            map.set(lane, label);
            lane *= 2;
          }
          return map;
        }
      }
      function markCommitStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
            injectedProfilingHooks.markCommitStarted(lanes);
          }
        }
      }
      function markCommitStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
            injectedProfilingHooks.markCommitStopped();
          }
        }
      }
      function markComponentRenderStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
            injectedProfilingHooks.markComponentRenderStarted(fiber);
          }
        }
      }
      function markComponentRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
            injectedProfilingHooks.markComponentRenderStopped();
          }
        }
      }
      function markComponentPassiveEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectMountStopped();
          }
        }
      }
      function markComponentPassiveEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentPassiveEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
          }
        }
      }
      function markComponentLayoutEffectMountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectMountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectMountStopped();
          }
        }
      }
      function markComponentLayoutEffectUnmountStarted(fiber) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
          }
        }
      }
      function markComponentLayoutEffectUnmountStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
            injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
          }
        }
      }
      function markComponentErrored(fiber, thrownValue, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
            injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
          }
        }
      }
      function markComponentSuspended(fiber, wakeable, lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
            injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
          }
        }
      }
      function markLayoutEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
            injectedProfilingHooks.markLayoutEffectsStarted(lanes);
          }
        }
      }
      function markLayoutEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
            injectedProfilingHooks.markLayoutEffectsStopped();
          }
        }
      }
      function markPassiveEffectsStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
            injectedProfilingHooks.markPassiveEffectsStarted(lanes);
          }
        }
      }
      function markPassiveEffectsStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
            injectedProfilingHooks.markPassiveEffectsStopped();
          }
        }
      }
      function markRenderStarted(lanes) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
            injectedProfilingHooks.markRenderStarted(lanes);
          }
        }
      }
      function markRenderYielded() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
            injectedProfilingHooks.markRenderYielded();
          }
        }
      }
      function markRenderStopped() {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
            injectedProfilingHooks.markRenderStopped();
          }
        }
      }
      function markRenderScheduled(lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
            injectedProfilingHooks.markRenderScheduled(lane);
          }
        }
      }
      function markForceUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
            injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
          }
        }
      }
      function markStateUpdateScheduled(fiber, lane) {
        {
          if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
            injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
          }
        }
      }
      var NoMode = 0;
      var ConcurrentMode = 1;
      var ProfileMode = 2;
      var StrictLegacyMode = 8;
      var StrictEffectsMode = 16;
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
      var log = Math.log;
      var LN2 = Math.LN2;
      function clz32Fallback(x) {
        var asUint = x >>> 0;
        if (asUint === 0) {
          return 32;
        }
        return 31 - (log(asUint) / LN2 | 0) | 0;
      }
      var TotalLanes = 31;
      var NoLanes = 0;
      var NoLane = 0;
      var SyncLane = 1;
      var InputContinuousHydrationLane = 2;
      var InputContinuousLane = 4;
      var DefaultHydrationLane = 8;
      var DefaultLane = 16;
      var TransitionHydrationLane = 32;
      var TransitionLanes = 4194240;
      var TransitionLane1 = 64;
      var TransitionLane2 = 128;
      var TransitionLane3 = 256;
      var TransitionLane4 = 512;
      var TransitionLane5 = 1024;
      var TransitionLane6 = 2048;
      var TransitionLane7 = 4096;
      var TransitionLane8 = 8192;
      var TransitionLane9 = 16384;
      var TransitionLane10 = 32768;
      var TransitionLane11 = 65536;
      var TransitionLane12 = 131072;
      var TransitionLane13 = 262144;
      var TransitionLane14 = 524288;
      var TransitionLane15 = 1048576;
      var TransitionLane16 = 2097152;
      var RetryLanes = 130023424;
      var RetryLane1 = 4194304;
      var RetryLane2 = 8388608;
      var RetryLane3 = 16777216;
      var RetryLane4 = 33554432;
      var RetryLane5 = 67108864;
      var SomeRetryLane = RetryLane1;
      var SelectiveHydrationLane = 134217728;
      var NonIdleLanes = 268435455;
      var IdleHydrationLane = 268435456;
      var IdleLane = 536870912;
      var OffscreenLane = 1073741824;
      function getLabelForLane(lane) {
        {
          if (lane & SyncLane) {
            return "Sync";
          }
          if (lane & InputContinuousHydrationLane) {
            return "InputContinuousHydration";
          }
          if (lane & InputContinuousLane) {
            return "InputContinuous";
          }
          if (lane & DefaultHydrationLane) {
            return "DefaultHydration";
          }
          if (lane & DefaultLane) {
            return "Default";
          }
          if (lane & TransitionHydrationLane) {
            return "TransitionHydration";
          }
          if (lane & TransitionLanes) {
            return "Transition";
          }
          if (lane & RetryLanes) {
            return "Retry";
          }
          if (lane & SelectiveHydrationLane) {
            return "SelectiveHydration";
          }
          if (lane & IdleHydrationLane) {
            return "IdleHydration";
          }
          if (lane & IdleLane) {
            return "Idle";
          }
          if (lane & OffscreenLane) {
            return "Offscreen";
          }
        }
      }
      var NoTimestamp = -1;
      var nextTransitionLane = TransitionLane1;
      var nextRetryLane = RetryLane1;
      function getHighestPriorityLanes(lanes) {
        switch (getHighestPriorityLane(lanes)) {
          case SyncLane:
            return SyncLane;
          case InputContinuousHydrationLane:
            return InputContinuousHydrationLane;
          case InputContinuousLane:
            return InputContinuousLane;
          case DefaultHydrationLane:
            return DefaultHydrationLane;
          case DefaultLane:
            return DefaultLane;
          case TransitionHydrationLane:
            return TransitionHydrationLane;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return lanes & TransitionLanes;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return lanes & RetryLanes;
          case SelectiveHydrationLane:
            return SelectiveHydrationLane;
          case IdleHydrationLane:
            return IdleHydrationLane;
          case IdleLane:
            return IdleLane;
          case OffscreenLane:
            return OffscreenLane;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return lanes;
        }
      }
      function getNextLanes(root2, wipLanes) {
        var pendingLanes = root2.pendingLanes;
        if (pendingLanes === NoLanes) {
          return NoLanes;
        }
        var nextLanes = NoLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
          var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
          if (nonIdleUnblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
          } else {
            var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
            if (nonIdlePingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            }
          }
        } else {
          var unblockedLanes = pendingLanes & ~suspendedLanes;
          if (unblockedLanes !== NoLanes) {
            nextLanes = getHighestPriorityLanes(unblockedLanes);
          } else {
            if (pingedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(pingedLanes);
            }
          }
        }
        if (nextLanes === NoLanes) {
          return NoLanes;
        }
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
          var nextLane = getHighestPriorityLane(nextLanes);
          var wipLane = getHighestPriorityLane(wipLanes);
          if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
            return wipLanes;
          }
        }
        if ((nextLanes & InputContinuousLane) !== NoLanes) {
          nextLanes |= pendingLanes & DefaultLane;
        }
        var entangledLanes = root2.entangledLanes;
        if (entangledLanes !== NoLanes) {
          var entanglements = root2.entanglements;
          var lanes = nextLanes & entangledLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            nextLanes |= entanglements[index2];
            lanes &= ~lane;
          }
        }
        return nextLanes;
      }
      function getMostRecentEventTime(root2, lanes) {
        var eventTimes = root2.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          var eventTime = eventTimes[index2];
          if (eventTime > mostRecentEventTime) {
            mostRecentEventTime = eventTime;
          }
          lanes &= ~lane;
        }
        return mostRecentEventTime;
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case SyncLane:
          case InputContinuousHydrationLane:
          case InputContinuousLane:
            return currentTime + 250;
          case DefaultHydrationLane:
          case DefaultLane:
          case TransitionHydrationLane:
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
            return currentTime + 5000;
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            return NoTimestamp;
          case SelectiveHydrationLane:
          case IdleHydrationLane:
          case IdleLane:
          case OffscreenLane:
            return NoTimestamp;
          default:
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return NoTimestamp;
        }
      }
      function markStarvedLanesAsExpired(root2, currentTime) {
        var pendingLanes = root2.pendingLanes;
        var suspendedLanes = root2.suspendedLanes;
        var pingedLanes = root2.pingedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = pendingLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          var expirationTime = expirationTimes[index2];
          if (expirationTime === NoTimestamp) {
            if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
              expirationTimes[index2] = computeExpirationTime(lane, currentTime);
            }
          } else if (expirationTime <= currentTime) {
            root2.expiredLanes |= lane;
          }
          lanes &= ~lane;
        }
      }
      function getHighestPriorityPendingLanes(root2) {
        return getHighestPriorityLanes(root2.pendingLanes);
      }
      function getLanesToRetrySynchronouslyOnError(root2) {
        var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) {
          return everythingButOffscreen;
        }
        if (everythingButOffscreen & OffscreenLane) {
          return OffscreenLane;
        }
        return NoLanes;
      }
      function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
      }
      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
      }
      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
      }
      function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
      }
      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
      }
      function includesBlockingLane(root2, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
      }
      function includesExpiredLane(root2, lanes) {
        return (lanes & root2.expiredLanes) !== NoLanes;
      }
      function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        if ((nextTransitionLane & TransitionLanes) === NoLanes) {
          nextTransitionLane = TransitionLane1;
        }
        return lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        if ((nextRetryLane & RetryLanes) === NoLanes) {
          nextRetryLane = RetryLane1;
        }
        return lane;
      }
      function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
      }
      function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
      }
      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
      }
      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
      }
      function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
      }
      function isSubsetOfLanes(set2, subset) {
        return (set2 & subset) === subset;
      }
      function mergeLanes(a, b) {
        return a | b;
      }
      function removeLanes(set2, subset) {
        return set2 & ~subset;
      }
      function intersectLanes(a, b) {
        return a & b;
      }
      function laneToLanes(lane) {
        return lane;
      }
      function higherPriorityLane(a, b) {
        return a !== NoLane && a < b ? a : b;
      }
      function createLaneMap(initial) {
        var laneMap = [];
        for (var i = 0;i < TotalLanes; i++) {
          laneMap.push(initial);
        }
        return laneMap;
      }
      function markRootUpdated(root2, updateLane, eventTime) {
        root2.pendingLanes |= updateLane;
        if (updateLane !== IdleLane) {
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
        }
        var eventTimes = root2.eventTimes;
        var index2 = laneToIndex(updateLane);
        eventTimes[index2] = eventTime;
      }
      function markRootSuspended(root2, suspendedLanes) {
        root2.suspendedLanes |= suspendedLanes;
        root2.pingedLanes &= ~suspendedLanes;
        var expirationTimes = root2.expirationTimes;
        var lanes = suspendedLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          expirationTimes[index2] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootPinged(root2, pingedLanes, eventTime) {
        root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
      }
      function markRootFinished(root2, remainingLanes) {
        var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
        root2.pendingLanes = remainingLanes;
        root2.suspendedLanes = NoLanes;
        root2.pingedLanes = NoLanes;
        root2.expiredLanes &= remainingLanes;
        root2.mutableReadLanes &= remainingLanes;
        root2.entangledLanes &= remainingLanes;
        var entanglements = root2.entanglements;
        var eventTimes = root2.eventTimes;
        var expirationTimes = root2.expirationTimes;
        var lanes = noLongerPendingLanes;
        while (lanes > 0) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          entanglements[index2] = NoLanes;
          eventTimes[index2] = NoTimestamp;
          expirationTimes[index2] = NoTimestamp;
          lanes &= ~lane;
        }
      }
      function markRootEntangled(root2, entangledLanes) {
        var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
        var entanglements = root2.entanglements;
        var lanes = rootEntangledLanes;
        while (lanes) {
          var index2 = pickArbitraryLaneIndex(lanes);
          var lane = 1 << index2;
          if (lane & entangledLanes | entanglements[index2] & entangledLanes) {
            entanglements[index2] |= entangledLanes;
          }
          lanes &= ~lane;
        }
      }
      function getBumpedLaneForHydration(root2, renderLanes2) {
        var renderLane = getHighestPriorityLane(renderLanes2);
        var lane;
        switch (renderLane) {
          case InputContinuousLane:
            lane = InputContinuousHydrationLane;
            break;
          case DefaultLane:
            lane = DefaultHydrationLane;
            break;
          case TransitionLane1:
          case TransitionLane2:
          case TransitionLane3:
          case TransitionLane4:
          case TransitionLane5:
          case TransitionLane6:
          case TransitionLane7:
          case TransitionLane8:
          case TransitionLane9:
          case TransitionLane10:
          case TransitionLane11:
          case TransitionLane12:
          case TransitionLane13:
          case TransitionLane14:
          case TransitionLane15:
          case TransitionLane16:
          case RetryLane1:
          case RetryLane2:
          case RetryLane3:
          case RetryLane4:
          case RetryLane5:
            lane = TransitionHydrationLane;
            break;
          case IdleLane:
            lane = IdleHydrationLane;
            break;
          default:
            lane = NoLane;
            break;
        }
        if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
          return NoLane;
        }
        return lane;
      }
      function addFiberToLanesMap(root2, fiber, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
        while (lanes > 0) {
          var index2 = laneToIndex(lanes);
          var lane = 1 << index2;
          var updaters = pendingUpdatersLaneMap[index2];
          updaters.add(fiber);
          lanes &= ~lane;
        }
      }
      function movePendingFibersToMemoized(root2, lanes) {
        if (!isDevToolsPresent) {
          return;
        }
        var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
        var memoizedUpdaters = root2.memoizedUpdaters;
        while (lanes > 0) {
          var index2 = laneToIndex(lanes);
          var lane = 1 << index2;
          var updaters = pendingUpdatersLaneMap[index2];
          if (updaters.size > 0) {
            updaters.forEach(function(fiber) {
              var alternate = fiber.alternate;
              if (alternate === null || !memoizedUpdaters.has(alternate)) {
                memoizedUpdaters.add(fiber);
              }
            });
            updaters.clear();
          }
          lanes &= ~lane;
        }
      }
      function getTransitionsForLanes(root2, lanes) {
        {
          return null;
        }
      }
      var DiscreteEventPriority = SyncLane;
      var ContinuousEventPriority = InputContinuousLane;
      var DefaultEventPriority = DefaultLane;
      var IdleEventPriority = IdleLane;
      var currentUpdatePriority = NoLane;
      function getCurrentUpdatePriority() {
        return currentUpdatePriority;
      }
      function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
      }
      function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
          currentUpdatePriority = priority;
          return fn();
        } finally {
          currentUpdatePriority = previousPriority;
        }
      }
      function higherEventPriority(a, b) {
        return a !== 0 && a < b ? a : b;
      }
      function lowerEventPriority(a, b) {
        return a === 0 || a > b ? a : b;
      }
      function isHigherEventPriority(a, b) {
        return a !== 0 && a < b;
      }
      function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
          return DiscreteEventPriority;
        }
        if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
          return ContinuousEventPriority;
        }
        if (includesNonIdleWork(lane)) {
          return DefaultEventPriority;
        }
        return IdleEventPriority;
      }
      function isRootDehydrated(root2) {
        var currentState = root2.current.memoizedState;
        return currentState.isDehydrated;
      }
      var _attemptSynchronousHydration;
      function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
      }
      function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
      }
      var attemptContinuousHydration;
      function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
      }
      var attemptHydrationAtCurrentPriority;
      function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
      }
      var getCurrentUpdatePriority$1;
      function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
      }
      var attemptHydrationAtPriority;
      function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
      }
      var hasScheduledReplayAttempt = false;
      var queuedDiscreteEvents = [];
      var queuedFocus = null;
      var queuedDrag = null;
      var queuedMouse = null;
      var queuedPointers = new Map;
      var queuedPointerCaptures = new Map;
      var queuedExplicitHydrationTargets = [];
      var discreteReplayableEvents = [
        "mousedown",
        "mouseup",
        "touchcancel",
        "touchend",
        "touchstart",
        "auxclick",
        "dblclick",
        "pointercancel",
        "pointerdown",
        "pointerup",
        "dragend",
        "dragstart",
        "drop",
        "compositionend",
        "compositionstart",
        "keydown",
        "keypress",
        "keyup",
        "input",
        "textInput",
        "copy",
        "cut",
        "paste",
        "click",
        "change",
        "contextmenu",
        "reset",
        "submit"
      ];
      function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
      }
      function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
          blockedOn,
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetContainers: [targetContainer]
        };
      }
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout": {
            var pointerId = nativeEvent.pointerId;
            queuedPointers.delete(pointerId);
            break;
          }
          case "gotpointercapture":
          case "lostpointercapture": {
            var _pointerId = nativeEvent.pointerId;
            queuedPointerCaptures.delete(_pointerId);
            break;
          }
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn !== null) {
            var _fiber2 = getInstanceFromNode(blockedOn);
            if (_fiber2 !== null) {
              attemptContinuousHydration(_fiber2);
            }
          }
          return queuedEvent;
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
          targetContainers.push(targetContainer);
        }
        return existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin": {
            var focusEvent = nativeEvent;
            queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
            return true;
          }
          case "dragenter": {
            var dragEvent = nativeEvent;
            queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
            return true;
          }
          case "mouseover": {
            var mouseEvent = nativeEvent;
            queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
            return true;
          }
          case "pointerover": {
            var pointerEvent = nativeEvent;
            var pointerId = pointerEvent.pointerId;
            queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
            return true;
          }
          case "gotpointercapture": {
            var _pointerEvent = nativeEvent;
            var _pointerId2 = _pointerEvent.pointerId;
            queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
            return true;
          }
        }
        return false;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted !== null) {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                queuedTarget.blockedOn = instance;
                attemptHydrationAtPriority(queuedTarget.priority, function() {
                  attemptHydrationAtCurrentPriority(nearestMounted);
                });
                return;
              }
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                return;
              }
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function queueExplicitHydrationTarget(target) {
        var updatePriority = getCurrentUpdatePriority$1();
        var queuedTarget = {
          blockedOn: null,
          target,
          priority: updatePriority
        };
        var i = 0;
        for (;i < queuedExplicitHydrationTargets.length; i++) {
          if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
            break;
          }
        }
        queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
        if (i === 0) {
          attemptExplicitHydrationTarget(queuedTarget);
        }
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) {
          return false;
        }
        var targetContainers = queuedEvent.targetContainers;
        while (targetContainers.length > 0) {
          var targetContainer = targetContainers[0];
          var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
          if (nextBlockedOn === null) {
            {
              var nativeEvent = queuedEvent.nativeEvent;
              var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
              setReplayingEvent(nativeEventClone);
              nativeEvent.target.dispatchEvent(nativeEventClone);
              resetReplayingEvent();
            }
          } else {
            var _fiber3 = getInstanceFromNode(nextBlockedOn);
            if (_fiber3 !== null) {
              attemptContinuousHydration(_fiber3);
            }
            queuedEvent.blockedOn = nextBlockedOn;
            return false;
          }
          targetContainers.shift();
        }
        return true;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
          map.delete(key);
        }
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
          queuedFocus = null;
        }
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
          queuedDrag = null;
        }
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
          queuedMouse = null;
        }
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
          queuedEvent.blockedOn = null;
          if (!hasScheduledReplayAttempt) {
            hasScheduledReplayAttempt = true;
            Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
          }
        }
      }
      function retryIfBlockedOn(unblocked) {
        if (queuedDiscreteEvents.length > 0) {
          scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
          for (var i = 1;i < queuedDiscreteEvents.length; i++) {
            var queuedEvent = queuedDiscreteEvents[i];
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
            }
          }
        }
        if (queuedFocus !== null) {
          scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        }
        if (queuedDrag !== null) {
          scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        }
        if (queuedMouse !== null) {
          scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        }
        var unblock = function(queuedEvent2) {
          return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for (var _i = 0;_i < queuedExplicitHydrationTargets.length; _i++) {
          var queuedTarget = queuedExplicitHydrationTargets[_i];
          if (queuedTarget.blockedOn === unblocked) {
            queuedTarget.blockedOn = null;
          }
        }
        while (queuedExplicitHydrationTargets.length > 0) {
          var nextExplicitTarget = queuedExplicitHydrationTargets[0];
          if (nextExplicitTarget.blockedOn !== null) {
            break;
          } else {
            attemptExplicitHydrationTarget(nextExplicitTarget);
            if (nextExplicitTarget.blockedOn === null) {
              queuedExplicitHydrationTargets.shift();
            }
          }
        }
      }
      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
      var _enabled = true;
      function setEnabled(enabled) {
        _enabled = !!enabled;
      }
      function isEnabled() {
        return _enabled;
      }
      function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName);
        var listenerWrapper;
        switch (eventPriority) {
          case DiscreteEventPriority:
            listenerWrapper = dispatchDiscreteEvent;
            break;
          case ContinuousEventPriority:
            listenerWrapper = dispatchContinuousEvent;
            break;
          case DefaultEventPriority:
          default:
            listenerWrapper = dispatchEvent;
            break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
      }
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(DiscreteEventPriority);
          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
          setCurrentUpdatePriority(ContinuousEventPriority);
          dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig.transition = prevTransition;
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) {
          return;
        }
        {
          dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        }
      }
      function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
          clearIfContinuousEvent(domEventName, nativeEvent);
          return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
          nativeEvent.stopPropagation();
          return;
        }
        clearIfContinuousEvent(domEventName, nativeEvent);
        if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
          while (blockedOn !== null) {
            var fiber = getInstanceFromNode(blockedOn);
            if (fiber !== null) {
              attemptSynchronousHydration(fiber);
            }
            var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (nextBlockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            }
            if (nextBlockedOn === blockedOn) {
              break;
            }
            blockedOn = nextBlockedOn;
          }
          if (blockedOn !== null) {
            nativeEvent.stopPropagation();
          }
          return;
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
      }
      var return_targetInst = null;
      function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (nearestMounted === null) {
            targetInst = null;
          } else {
            var tag = nearestMounted.tag;
            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted);
              if (instance !== null) {
                return instance;
              }
              targetInst = null;
            } else if (tag === HostRoot) {
              var root2 = nearestMounted.stateNode;
              if (isRootDehydrated(root2)) {
                return getContainerFromFiber(nearestMounted);
              }
              targetInst = null;
            } else if (nearestMounted !== targetInst) {
              targetInst = null;
            }
          }
        }
        return_targetInst = targetInst;
        return null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return DiscreteEventPriority;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return ContinuousEventPriority;
          case "message": {
            var schedulerPriority = getCurrentPriorityLevel();
            switch (schedulerPriority) {
              case ImmediatePriority:
                return DiscreteEventPriority;
              case UserBlockingPriority:
                return ContinuousEventPriority;
              case NormalPriority:
              case LowPriority:
                return DefaultEventPriority;
              case IdlePriority:
                return IdleEventPriority;
              default:
                return DefaultEventPriority;
            }
          }
          default:
            return DefaultEventPriority;
        }
      }
      function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
      }
      function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
      }
      function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          capture: true,
          passive
        });
        return listener;
      }
      function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
          passive
        });
        return listener;
      }
      var root = null;
      var startText = null;
      var fallbackText = null;
      function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
      }
      function reset() {
        root = null;
        startText = null;
        fallbackText = null;
      }
      function getData() {
        if (fallbackText) {
          return fallbackText;
        }
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for (start = 0;start < startLength; start++) {
          if (startValue[start] !== endValue[start]) {
            break;
          }
        }
        var minEnd = startLength - start;
        for (end = 1;end <= minEnd; end++) {
          if (startValue[startLength - end] !== endValue[endLength - end]) {
            break;
          }
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
      }
      function getText() {
        if ("value" in root) {
          return root.value;
        }
        return root.textContent;
      }
      function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ("charCode" in nativeEvent) {
          charCode = nativeEvent.charCode;
          if (charCode === 0 && keyCode === 13) {
            charCode = 13;
          }
        } else {
          charCode = keyCode;
        }
        if (charCode === 10) {
          charCode = 13;
        }
        if (charCode >= 32 || charCode === 13) {
          return charCode;
        }
        return 0;
      }
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName;
          this._targetInst = targetInst;
          this.type = reactEventType;
          this.nativeEvent = nativeEvent;
          this.target = nativeEventTarget;
          this.currentTarget = null;
          for (var _propName in Interface) {
            if (!Interface.hasOwnProperty(_propName)) {
              continue;
            }
            var normalize = Interface[_propName];
            if (normalize) {
              this[_propName] = normalize(nativeEvent);
            } else {
              this[_propName] = nativeEvent[_propName];
            }
          }
          var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue;
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse;
          }
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        assign(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.preventDefault) {
              event.preventDefault();
            } else if (typeof event.returnValue !== "unknown") {
              event.returnValue = false;
            }
            this.isDefaultPrevented = functionThatReturnsTrue;
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            if (!event) {
              return;
            }
            if (event.stopPropagation) {
              event.stopPropagation();
            } else if (typeof event.cancelBubble !== "unknown") {
              event.cancelBubble = true;
            }
            this.isPropagationStopped = functionThatReturnsTrue;
          },
          persist: function() {
          },
          isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      };
      var SyntheticEvent = createSyntheticEvent(EventInterface);
      var UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
      });
      var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
      var lastMovementX;
      var lastMovementY;
      var lastMouseEvent;
      function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
          if (lastMouseEvent && event.type === "mousemove") {
            lastMovementX = event.screenX - lastMouseEvent.screenX;
            lastMovementY = event.screenY - lastMouseEvent.screenY;
          } else {
            lastMovementX = 0;
            lastMovementY = 0;
          }
          lastMouseEvent = event;
        }
      }
      var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          if (event.relatedTarget === undefined)
            return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
          return event.relatedTarget;
        },
        movementX: function(event) {
          if ("movementX" in event) {
            return event.movementX;
          }
          updateMouseMovementPolyfillState(event);
          return lastMovementX;
        },
        movementY: function(event) {
          if ("movementY" in event) {
            return event.movementY;
          }
          return lastMovementY;
        }
      });
      var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
      var DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
      });
      var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
      var FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
      });
      var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
      var AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
      var ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      });
      var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
      var CompositionEventInterface = assign({}, EventInterface, {
        data: 0
      });
      var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
      var SyntheticInputEvent = SyntheticCompositionEvent;
      var normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var translateToKey = {
        "8": "Backspace",
        "9": "Tab",
        "12": "Clear",
        "13": "Enter",
        "16": "Shift",
        "17": "Control",
        "18": "Alt",
        "19": "Pause",
        "20": "CapsLock",
        "27": "Escape",
        "32": " ",
        "33": "PageUp",
        "34": "PageDown",
        "35": "End",
        "36": "Home",
        "37": "ArrowLeft",
        "38": "ArrowUp",
        "39": "ArrowRight",
        "40": "ArrowDown",
        "45": "Insert",
        "46": "Delete",
        "112": "F1",
        "113": "F2",
        "114": "F3",
        "115": "F4",
        "116": "F5",
        "117": "F6",
        "118": "F7",
        "119": "F8",
        "120": "F9",
        "121": "F10",
        "122": "F11",
        "123": "F12",
        "144": "NumLock",
        "145": "ScrollLock",
        "224": "Meta"
      };
      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
          if (key !== "Unidentified") {
            return key;
          }
        }
        if (nativeEvent.type === "keypress") {
          var charCode = getEventCharCode(nativeEvent);
          return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
          return translateToKey[nativeEvent.keyCode] || "Unidentified";
        }
        return "";
      }
      var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) {
          return nativeEvent.getModifierState(keyArg);
        }
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
      }
      function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          return 0;
        },
        keyCode: function(event) {
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        },
        which: function(event) {
          if (event.type === "keypress") {
            return getEventCharCode(event);
          }
          if (event.type === "keydown" || event.type === "keyup") {
            return event.keyCode;
          }
          return 0;
        }
      });
      var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
      var PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      });
      var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
      var TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      });
      var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
      var TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
      var WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : ("wheelDeltaX" in event) ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : ("wheelDeltaY" in event) ? -event.wheelDeltaY : ("wheelDelta" in event) ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      });
      var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
      var END_KEYCODES = [9, 13, 27, 32];
      var START_KEYCODE = 229;
      var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
      var documentMode = null;
      if (canUseDOM && "documentMode" in document) {
        documentMode = document.documentMode;
      }
      var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
      var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
      var SPACEBAR_CODE = 32;
      var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
      function registerEvents() {
        registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
        registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
      }
      var hasSpaceKeypress = false;
      function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
      }
      function getCompositionEventType(domEventName) {
        switch (domEventName) {
          case "compositionstart":
            return "onCompositionStart";
          case "compositionend":
            return "onCompositionEnd";
          case "compositionupdate":
            return "onCompositionUpdate";
        }
      }
      function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
      }
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
          case "keydown":
            return nativeEvent.keyCode !== START_KEYCODE;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === "object" && "data" in detail) {
          return detail.data;
        }
        return null;
      }
      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === "ko";
      }
      var isComposing = false;
      function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) {
          eventType = getCompositionEventType(domEventName);
        } else if (!isComposing) {
          if (isFallbackCompositionStart(domEventName, nativeEvent)) {
            eventType = "onCompositionStart";
          }
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
          eventType = "onCompositionEnd";
        }
        if (!eventType) {
          return null;
        }
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
          if (!isComposing && eventType === "onCompositionStart") {
            isComposing = initialize(nativeEventTarget);
          } else if (eventType === "onCompositionEnd") {
            if (isComposing) {
              fallbackData = getData();
            }
          }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
          var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          if (fallbackData) {
            event.data = fallbackData;
          } else {
            var customData = getDataFromCustomEvent(nativeEvent);
            if (customData !== null) {
              event.data = customData;
            }
          }
        }
      }
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            var which = nativeEvent.which;
            if (which !== SPACEBAR_CODE) {
              return null;
            }
            hasSpaceKeypress = true;
            return SPACEBAR_CHAR;
          case "textInput":
            var chars = nativeEvent.data;
            if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
              return null;
            }
            return chars;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) {
          if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
            var chars = getData();
            reset();
            isComposing = false;
            return chars;
          }
          return null;
        }
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!isKeypressCommand(nativeEvent)) {
              if (nativeEvent.char && nativeEvent.char.length > 1) {
                return nativeEvent.char;
              } else if (nativeEvent.which) {
                return String.fromCharCode(nativeEvent.which);
              }
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) {
          chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        } else {
          chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
        }
        if (!chars) {
          return null;
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
        if (listeners.length > 0) {
          var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
          dispatchQueue.push({
            event,
            listeners
          });
          event.data = chars;
        }
      }
      function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
      }
      var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === "input") {
          return !!supportedInputTypes[elem.type];
        }
        if (nodeName === "textarea") {
          return true;
        }
        return false;
      }
      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) {
          return false;
        }
        var eventName = "on" + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
          var element = document.createElement("div");
          element.setAttribute(eventName, "return;");
          isSupported = typeof element[eventName] === "function";
        }
        return isSupported;
      }
      function registerEvents$1() {
        registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, "onChange");
        if (listeners.length > 0) {
          var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      var activeElement = null;
      var activeElementInst = null;
      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === "select" || nodeName === "input" && elem.type === "file";
      }
      function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
        batchedUpdates(runEventInBatch, dispatchQueue);
      }
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) {
          return targetInst;
        }
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === "change") {
          return targetInst;
        }
      }
      var isInputEventSupported = false;
      if (canUseDOM) {
        isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
      }
      function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent("onpropertychange", handlePropertyChange);
      }
      function stopWatchingForValueChange() {
        if (!activeElement) {
          return;
        }
        activeElement.detachEvent("onpropertychange", handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
      }
      function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== "value") {
          return;
        }
        if (getInstIfValueChanged(activeElementInst)) {
          manualDispatchChangeEvent(nativeEvent);
        }
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === "focusin") {
          stopWatchingForValueChange();
          startWatchingForValueChange(target, targetInst);
        } else if (domEventName === "focusout") {
          stopWatchingForValueChange();
        }
      }
      function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
          return getInstIfValueChanged(activeElementInst);
        }
      }
      function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === "click") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === "input" || domEventName === "change") {
          return getInstIfValueChanged(targetInst);
        }
      }
      function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== "number") {
          return;
        }
        {
          setDefaultValue(node, "number", node.value);
        }
      }
      function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        }
        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(domEventName, targetInst);
          if (inst) {
            createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
            return;
          }
        }
        if (handleEventFunc) {
          handleEventFunc(domEventName, targetNode, targetInst);
        }
        if (domEventName === "focusout") {
          handleControlledInputBlur(targetNode);
        }
      }
      function registerEvents$2() {
        registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
        registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
        registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
        registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      }
      function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
        var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
          var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
          if (related) {
            if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
              return;
            }
          }
        }
        if (!isOutEvent && !isOverEvent) {
          return;
        }
        var win;
        if (nativeEventTarget.window === nativeEventTarget) {
          win = nativeEventTarget;
        } else {
          var doc = nativeEventTarget.ownerDocument;
          if (doc) {
            win = doc.defaultView || doc.parentWindow;
          } else {
            win = window;
          }
        }
        var from;
        var to;
        if (isOutEvent) {
          var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
          from = targetInst;
          to = _related ? getClosestInstanceFromNode(_related) : null;
          if (to !== null) {
            var nearestMounted = getNearestMountedFiber(to);
            if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
              to = null;
            }
          }
        } else {
          from = null;
          to = targetInst;
        }
        if (from === to) {
          return;
        }
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = "onMouseLeave";
        var enterEventType = "onMouseEnter";
        var eventTypePrefix = "mouse";
        if (domEventName === "pointerout" || domEventName === "pointerover") {
          SyntheticEventCtor = SyntheticPointerEvent;
          leaveEventType = "onPointerLeave";
          enterEventType = "onPointerEnter";
          eventTypePrefix = "pointer";
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null;
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
          var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
          enterEvent.target = toNode;
          enterEvent.relatedTarget = fromNode;
          enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
      }
      function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
      }
      var objectIs = typeof Object.is === "function" ? Object.is : is;
      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) {
          return true;
        }
        if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
          return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) {
          return false;
        }
        for (var i = 0;i < keysA.length; i++) {
          var currentKey = keysA[i];
          if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
            return false;
          }
        }
        return true;
      }
      function getLeafNode(node) {
        while (node && node.firstChild) {
          node = node.firstChild;
        }
        return node;
      }
      function getSiblingNode(node) {
        while (node) {
          if (node.nextSibling) {
            return node.nextSibling;
          }
          node = node.parentNode;
        }
      }
      function getNodeForCharacterOffset(root2, offset) {
        var node = getLeafNode(root2);
        var nodeStart = 0;
        var nodeEnd = 0;
        while (node) {
          if (node.nodeType === TEXT_NODE) {
            nodeEnd = nodeStart + node.textContent.length;
            if (nodeStart <= offset && nodeEnd >= offset) {
              return {
                node,
                offset: offset - nodeStart
              };
            }
            nodeStart = nodeEnd;
          }
          node = getLeafNode(getSiblingNode(node));
        }
      }
      function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) {
          return null;
        }
        var { anchorNode, anchorOffset, focusNode, focusOffset } = selection;
        try {
          anchorNode.nodeType;
          focusNode.nodeType;
        } catch (e) {
          return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
      }
      function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer:
          while (true) {
            var next = null;
            while (true) {
              if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                start = length + anchorOffset;
              }
              if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                end = length + focusOffset;
              }
              if (node.nodeType === TEXT_NODE) {
                length += node.nodeValue.length;
              }
              if ((next = node.firstChild) === null) {
                break;
              }
              parentNode = node;
              node = next;
            }
            while (true) {
              if (node === outerNode) {
                break outer;
              }
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start = length;
              }
              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length;
              }
              if ((next = node.nextSibling) !== null) {
                break;
              }
              node = parentNode;
              parentNode = node.parentNode;
            }
            node = next;
          }
        if (start === -1 || end === -1) {
          return null;
        }
        return {
          start,
          end
        };
      }
      function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window;
        if (!win.getSelection) {
          return;
        }
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
        if (!selection.extend && start > end) {
          var temp = end;
          end = start;
          start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
          if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
            return;
          }
          var range = doc.createRange();
          range.setStart(startMarker.node, startMarker.offset);
          selection.removeAllRanges();
          if (start > end) {
            selection.addRange(range);
            selection.extend(endMarker.node, endMarker.offset);
          } else {
            range.setEnd(endMarker.node, endMarker.offset);
            selection.addRange(range);
          }
        }
      }
      function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
      }
      function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) {
          return false;
        } else if (outerNode === innerNode) {
          return true;
        } else if (isTextNode(outerNode)) {
          return false;
        } else if (isTextNode(innerNode)) {
          return containsNode(outerNode, innerNode.parentNode);
        } else if ("contains" in outerNode) {
          return outerNode.contains(innerNode);
        } else if (outerNode.compareDocumentPosition) {
          return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        } else {
          return false;
        }
      }
      function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
      }
      function isSameOriginFrame(iframe) {
        try {
          return typeof iframe.contentWindow.location.href === "string";
        } catch (err) {
          return false;
        }
      }
      function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while (element instanceof win.HTMLIFrameElement) {
          if (isSameOriginFrame(element)) {
            win = element.contentWindow;
          } else {
            return element;
          }
          element = getActiveElement(win.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
          focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
      }
      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
          if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
            setSelection(priorFocusedElem, priorSelectionRange);
          }
          var ancestors = [];
          var ancestor = priorFocusedElem;
          while (ancestor = ancestor.parentNode) {
            if (ancestor.nodeType === ELEMENT_NODE) {
              ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
              });
            }
          }
          if (typeof priorFocusedElem.focus === "function") {
            priorFocusedElem.focus();
          }
          for (var i = 0;i < ancestors.length; i++) {
            var info = ancestors[i];
            info.element.scrollLeft = info.left;
            info.element.scrollTop = info.top;
          }
        }
      }
      function getSelection(input) {
        var selection;
        if ("selectionStart" in input) {
          selection = {
            start: input.selectionStart,
            end: input.selectionEnd
          };
        } else {
          selection = getOffsets(input);
        }
        return selection || {
          start: 0,
          end: 0
        };
      }
      function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) {
          end = start;
        }
        if ("selectionStart" in input) {
          input.selectionStart = start;
          input.selectionEnd = Math.min(end, input.value.length);
        } else {
          setOffsets(input, offsets);
        }
      }
      var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
      function registerEvents$3() {
        registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
      }
      var activeElement$1 = null;
      var activeElementInst$1 = null;
      var lastSelection = null;
      var mouseDown = false;
      function getSelection$1(node) {
        if ("selectionStart" in node && hasSelectionCapabilities(node)) {
          return {
            start: node.selectionStart,
            end: node.selectionEnd
          };
        } else {
          var win = node.ownerDocument && node.ownerDocument.defaultView || window;
          var selection = win.getSelection();
          return {
            anchorNode: selection.anchorNode,
            anchorOffset: selection.anchorOffset,
            focusNode: selection.focusNode,
            focusOffset: selection.focusOffset
          };
        }
      }
      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
      }
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
          return;
        }
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
          lastSelection = currentSelection;
          var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.target = activeElement$1;
          }
        }
      }
      function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch (domEventName) {
          case "focusin":
            if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
              activeElement$1 = targetNode;
              activeElementInst$1 = targetInst;
              lastSelection = null;
            }
            break;
          case "focusout":
            activeElement$1 = null;
            activeElementInst$1 = null;
            lastSelection = null;
            break;
          case "mousedown":
            mouseDown = true;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            mouseDown = false;
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            break;
          case "selectionchange":
            if (skipSelectionChangeEvent) {
              break;
            }
          case "keydown":
          case "keyup":
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes2 = {};
        prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes2["Webkit" + styleProp] = "webkit" + eventName;
        prefixes2["Moz" + styleProp] = "moz" + eventName;
        return prefixes2;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      };
      var prefixedEventNames = {};
      var style = {};
      if (canUseDOM) {
        style = document.createElement("div").style;
        if (!("AnimationEvent" in window)) {
          delete vendorPrefixes.animationend.animation;
          delete vendorPrefixes.animationiteration.animation;
          delete vendorPrefixes.animationstart.animation;
        }
        if (!("TransitionEvent" in window)) {
          delete vendorPrefixes.transitionend.transition;
        }
      }
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) {
          return prefixedEventNames[eventName];
        } else if (!vendorPrefixes[eventName]) {
          return eventName;
        }
        var prefixMap = vendorPrefixes[eventName];
        for (var styleProp in prefixMap) {
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
            return prefixedEventNames[eventName] = prefixMap[styleProp];
          }
        }
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend");
      var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
      var ANIMATION_START = getVendorPrefixedEventName("animationstart");
      var TRANSITION_END = getVendorPrefixedEventName("transitionend");
      var topLevelEventsToReactNames = new Map;
      var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [domEventName]);
      }
      function registerSimpleEvents() {
        for (var i = 0;i < simpleEventPluginEvents.length; i++) {
          var eventName = simpleEventPluginEvents[i];
          var domEventName = eventName.toLowerCase();
          var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
          registerSimpleEvent(domEventName, "on" + capitalizedEvent);
        }
        registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
        registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
        registerSimpleEvent(ANIMATION_START, "onAnimationStart");
        registerSimpleEvent("dblclick", "onDoubleClick");
        registerSimpleEvent("focusin", "onFocus");
        registerSimpleEvent("focusout", "onBlur");
        registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      }
      function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) {
          return;
        }
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch (domEventName) {
          case "keypress":
            if (getEventCharCode(nativeEvent) === 0) {
              return;
            }
          case "keydown":
          case "keyup":
            SyntheticEventCtor = SyntheticKeyboardEvent;
            break;
          case "focusin":
            reactEventType = "focus";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "focusout":
            reactEventType = "blur";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "beforeblur":
          case "afterblur":
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "click":
            if (nativeEvent.button === 2) {
              return;
            }
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            SyntheticEventCtor = SyntheticMouseEvent;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            SyntheticEventCtor = SyntheticDragEvent;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            SyntheticEventCtor = SyntheticTouchEvent;
            break;
          case ANIMATION_END:
          case ANIMATION_ITERATION:
          case ANIMATION_START:
            SyntheticEventCtor = SyntheticAnimationEvent;
            break;
          case TRANSITION_END:
            SyntheticEventCtor = SyntheticTransitionEvent;
            break;
          case "scroll":
            SyntheticEventCtor = SyntheticUIEvent;
            break;
          case "wheel":
            SyntheticEventCtor = SyntheticWheelEvent;
            break;
          case "copy":
          case "cut":
          case "paste":
            SyntheticEventCtor = SyntheticClipboardEvent;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            SyntheticEventCtor = SyntheticPointerEvent;
            break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        {
          var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
          var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
          if (_listeners.length > 0) {
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event: _event,
              listeners: _listeners
            });
          }
        }
      }
      registerSimpleEvents();
      registerEvents$2();
      registerEvents$1();
      registerEvents$3();
      registerEvents();
      function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
        if (shouldProcessPolyfillPlugins) {
          extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
      }
      var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
      var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
      function executeDispatch(event, listener, currentTarget) {
        var type = event.type || "unknown-event";
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
      }
      function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) {
          for (var i = dispatchListeners.length - 1;i >= 0; i--) {
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
          }
        } else {
          for (var _i = 0;_i < dispatchListeners.length; _i++) {
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) {
              return;
            }
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
          }
        }
      }
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for (var i = 0;i < dispatchQueue.length; i++) {
          var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
          processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
        }
        rethrowCaughtError();
      }
      function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        {
          if (!nonDelegatedEvents.has(domEventName)) {
            error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
          }
        }
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
          addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
          listenerSet.add(listenerSetKey);
        }
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        {
          if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
            error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
          }
        }
        var eventSystemFlags = 0;
        if (isCapturePhaseListener) {
          eventSystemFlags |= IS_CAPTURE_PHASE;
        }
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = true;
          allNativeEvents.forEach(function(domEventName) {
            if (domEventName !== "selectionchange") {
              if (!nonDelegatedEvents.has(domEventName)) {
                listenToNativeEvent(domEventName, false, rootContainerElement);
              }
              listenToNativeEvent(domEventName, true, rootContainerElement);
            }
          });
          var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          if (ownerDocument !== null) {
            if (!ownerDocument[listeningMarker]) {
              ownerDocument[listeningMarker] = true;
              listenToNativeEvent("selectionchange", false, ownerDocument);
            }
          }
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) {
          if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
            isPassiveListener = true;
          }
        }
        targetContainer = targetContainer;
        var unsubscribeListener;
        if (isCapturePhaseListener) {
          if (isPassiveListener !== undefined) {
            unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
          }
        } else {
          if (isPassiveListener !== undefined) {
            unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
          } else {
            unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
          }
        }
      }
      function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
          var targetContainerNode = targetContainer;
          if (targetInst !== null) {
            var node = targetInst;
            mainLoop:
              while (true) {
                if (node === null) {
                  return;
                }
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container !== null) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node = node.return;
              }
          }
        }
        batchedUpdates(function() {
          return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
      }
      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance,
          listener,
          currentTarget
        };
      }
      function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        var captureName = reactName !== null ? reactName + "Capture" : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null;
        while (instance !== null) {
          var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
          if (tag === HostComponent && stateNode !== null) {
            lastHostComponent = stateNode;
            if (reactEventName !== null) {
              var listener = getListener(instance, reactEventName);
              if (listener != null) {
                listeners.push(createDispatchListener(instance, listener, lastHostComponent));
              }
            }
          }
          if (accumulateTargetOnly) {
            break;
          }
          instance = instance.return;
        }
        return listeners;
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + "Capture";
        var listeners = [];
        var instance = targetFiber;
        while (instance !== null) {
          var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            var captureListener = getListener(instance, captureName);
            if (captureListener != null) {
              listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
            }
            var bubbleListener = getListener(instance, reactName);
            if (bubbleListener != null) {
              listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
          }
          instance = instance.return;
        }
        return listeners;
      }
      function getParent(inst) {
        if (inst === null) {
          return null;
        }
        do {
          inst = inst.return;
        } while (inst && inst.tag !== HostComponent);
        if (inst) {
          return inst;
        }
        return null;
      }
      function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for (var tempA = nodeA;tempA; tempA = getParent(tempA)) {
          depthA++;
        }
        var depthB = 0;
        for (var tempB = nodeB;tempB; tempB = getParent(tempB)) {
          depthB++;
        }
        while (depthA - depthB > 0) {
          nodeA = getParent(nodeA);
          depthA--;
        }
        while (depthB - depthA > 0) {
          nodeB = getParent(nodeB);
          depthB--;
        }
        var depth = depthA;
        while (depth--) {
          if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
            return nodeA;
          }
          nodeA = getParent(nodeA);
          nodeB = getParent(nodeB);
        }
        return null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while (instance !== null) {
          if (instance === common) {
            break;
          }
          var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
          if (alternate !== null && alternate === common) {
            break;
          }
          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode;
            if (inCapturePhase) {
              var captureListener = getListener(instance, registrationName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
            } else if (!inCapturePhase) {
              var bubbleListener = getListener(instance, registrationName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
          }
          instance = instance.return;
        }
        if (listeners.length !== 0) {
          dispatchQueue.push({
            event,
            listeners
          });
        }
      }
      function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        }
        if (to !== null && enterEvent !== null) {
          accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
        }
      }
      function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? "capture" : "bubble");
      }
      var didWarnInvalidHydration = false;
      var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
      var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
      var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
      var AUTOFOCUS = "autoFocus";
      var CHILDREN = "children";
      var STYLE = "style";
      var HTML$1 = "__html";
      var warnedUnknownTags;
      var validatePropertiesInDevelopment;
      var warnForPropDifference;
      var warnForExtraAttributes;
      var warnForInvalidEventListener;
      var canDiffStyleForHydrationWarning;
      var normalizeHTML;
      {
        warnedUnknownTags = {
          dialog: true,
          webview: true
        };
        validatePropertiesInDevelopment = function(type, props) {
          validateProperties(type, props);
          validateProperties$1(type, props);
          validateProperties$2(type, props, {
            registrationNameDependencies,
            possibleRegistrationNames
          });
        };
        canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
        warnForPropDifference = function(propName, serverValue, clientValue) {
          if (didWarnInvalidHydration) {
            return;
          }
          var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
          var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
          if (normalizedServerValue === normalizedClientValue) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
        };
        warnForExtraAttributes = function(attributeNames) {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          var names = [];
          attributeNames.forEach(function(name) {
            names.push(name);
          });
          error("Extra attributes from the server: %s", names);
        };
        warnForInvalidEventListener = function(registrationName, listener) {
          if (listener === false) {
            error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
          } else {
            error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
          }
        };
        normalizeHTML = function(parent, html) {
          var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
          testElement.innerHTML = html;
          return testElement.innerHTML;
        };
      }
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      function normalizeMarkupForTextOrAttribute(markup) {
        {
          checkHtmlStringCoercion(markup);
        }
        var markupString = typeof markup === "string" ? markup : "" + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) {
          return;
        }
        if (shouldWarnDev) {
          {
            if (!didWarnInvalidHydration) {
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }
          }
        }
        if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
          throw new Error("Text content does not match server-rendered HTML.");
        }
      }
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function noop() {
      }
      function trapClickOnNonInteractiveElement(node) {
        node.onclick = noop;
      }
      function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for (var propKey in nextProps) {
          if (!nextProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = nextProps[propKey];
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            setValueForStyles(domElement, nextProp);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
            if (nextHtml != null) {
              setInnerHTML(domElement, nextHtml);
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              var canSetTextContent = tag !== "textarea" || nextProp !== "";
              if (canSetTextContent) {
                setTextContent(domElement, nextProp);
              }
            } else if (typeof nextProp === "number") {
              setTextContent(domElement, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (nextProp != null) {
            setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
          }
        }
      }
      function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        for (var i = 0;i < updatePayload.length; i += 2) {
          var propKey = updatePayload[i];
          var propValue = updatePayload[i + 1];
          if (propKey === STYLE) {
            setValueForStyles(domElement, propValue);
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            setInnerHTML(domElement, propValue);
          } else if (propKey === CHILDREN) {
            setTextContent(domElement, propValue);
          } else {
            setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
          }
        }
      }
      function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag;
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) {
          namespaceURI = getIntrinsicNamespace(type);
        }
        if (namespaceURI === HTML_NAMESPACE) {
          {
            isCustomComponentTag = isCustomComponent(type, props);
            if (!isCustomComponentTag && type !== type.toLowerCase()) {
              error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            }
          }
          if (type === "script") {
            var div = ownerDocument.createElement("div");
            div.innerHTML = "<script></script>";
            var firstChild = div.firstChild;
            domElement = div.removeChild(firstChild);
          } else if (typeof props.is === "string") {
            domElement = ownerDocument.createElement(type, {
              is: props.is
            });
          } else {
            domElement = ownerDocument.createElement(type);
            if (type === "select") {
              var node = domElement;
              if (props.multiple) {
                node.multiple = true;
              } else if (props.size) {
                node.size = props.size;
              }
            }
          }
        } else {
          domElement = ownerDocument.createElementNS(namespaceURI, type);
        }
        {
          if (namespaceURI === HTML_NAMESPACE) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
              warnedUnknownTags[type] = true;
              error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
          }
        }
        return domElement;
      }
      function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
      }
      function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        {
          validatePropertiesInDevelopment(tag, rawProps);
        }
        var props;
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            props = rawProps;
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "video":
          case "audio":
            for (var i = 0;i < mediaEventTypes.length; i++) {
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
            }
            props = rawProps;
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            props = rawProps;
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            props = rawProps;
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            props = rawProps;
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            props = getHostProps(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            props = rawProps;
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            props = getHostProps$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            props = getHostProps$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          default:
            props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, false);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "option":
            postMountWrapper$1(domElement, rawProps);
            break;
          case "select":
            postMountWrapper$2(domElement, rawProps);
            break;
          default:
            if (typeof props.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
      }
      function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        {
          validatePropertiesInDevelopment(tag, nextRawProps);
        }
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch (tag) {
          case "input":
            lastProps = getHostProps(domElement, lastRawProps);
            nextProps = getHostProps(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "select":
            lastProps = getHostProps$1(domElement, lastRawProps);
            nextProps = getHostProps$1(domElement, nextRawProps);
            updatePayload = [];
            break;
          case "textarea":
            lastProps = getHostProps$2(domElement, lastRawProps);
            nextProps = getHostProps$2(domElement, nextRawProps);
            updatePayload = [];
            break;
          default:
            lastProps = lastRawProps;
            nextProps = nextRawProps;
            if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for (propKey in lastProps) {
          if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
            continue;
          }
          if (propKey === STYLE) {
            var lastStyle = lastProps[propKey];
            for (styleName in lastStyle) {
              if (lastStyle.hasOwnProperty(styleName)) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }
                styleUpdates[styleName] = "";
              }
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
            ;
          else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (propKey === AUTOFOCUS)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (!updatePayload) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, null);
          }
        }
        for (propKey in nextProps) {
          var nextProp = nextProps[propKey];
          var lastProp = lastProps != null ? lastProps[propKey] : undefined;
          if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
            continue;
          }
          if (propKey === STYLE) {
            {
              if (nextProp) {
                Object.freeze(nextProp);
              }
            }
            if (lastProp) {
              for (styleName in lastProp) {
                if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
              for (styleName in nextProp) {
                if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = nextProp[styleName];
                }
              }
            } else {
              if (!styleUpdates) {
                if (!updatePayload) {
                  updatePayload = [];
                }
                updatePayload.push(propKey, styleUpdates);
              }
              styleUpdates = nextProp;
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
            var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
            if (nextHtml != null) {
              if (lastHtml !== nextHtml) {
                (updatePayload = updatePayload || []).push(propKey, nextHtml);
              }
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === "string" || typeof nextProp === "number") {
              (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
            }
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
            ;
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
            if (!updatePayload && lastProp !== nextProp) {
              updatePayload = [];
            }
          } else {
            (updatePayload = updatePayload || []).push(propKey, nextProp);
          }
        }
        if (styleUpdates) {
          {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
          }
          (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
      }
      function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
          updateChecked(domElement, nextRawProps);
        }
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
        switch (tag) {
          case "input":
            updateWrapper(domElement, nextRawProps);
            break;
          case "textarea":
            updateWrapper$1(domElement, nextRawProps);
            break;
          case "select":
            postUpdateWrapper(domElement, nextRawProps);
            break;
        }
      }
      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase();
          if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            return null;
          }
          return possibleStandardNames[lowerCasedName] || null;
        }
      }
      function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag;
        var extraAttributeNames;
        {
          isCustomComponentTag = isCustomComponent(tag, rawProps);
          validatePropertiesInDevelopment(tag, rawProps);
        }
        switch (tag) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (var i = 0;i < mediaEventTypes.length; i++) {
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
            }
            break;
          case "source":
            listenToNonDelegatedEvent("error", domElement);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "input":
            initWrapperState(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "option":
            validateProps(domElement, rawProps);
            break;
          case "select":
            initWrapperState$1(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
          case "textarea":
            initWrapperState$2(domElement, rawProps);
            listenToNonDelegatedEvent("invalid", domElement);
            break;
        }
        assertValidProps(tag, rawProps);
        {
          extraAttributeNames = new Set;
          var attributes = domElement.attributes;
          for (var _i = 0;_i < attributes.length; _i++) {
            var name = attributes[_i].name.toLowerCase();
            switch (name) {
              case "value":
                break;
              case "checked":
                break;
              case "selected":
                break;
              default:
                extraAttributeNames.add(attributes[_i].name);
            }
          }
        }
        var updatePayload = null;
        for (var propKey in rawProps) {
          if (!rawProps.hasOwnProperty(propKey)) {
            continue;
          }
          var nextProp = rawProps[propKey];
          if (propKey === CHILDREN) {
            if (typeof nextProp === "string") {
              if (domElement.textContent !== nextProp) {
                if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                }
                updatePayload = [CHILDREN, nextProp];
              }
            } else if (typeof nextProp === "number") {
              if (domElement.textContent !== "" + nextProp) {
                if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                  checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                }
                updatePayload = [CHILDREN, "" + nextProp];
              }
            }
          } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== "function") {
                warnForInvalidEventListener(propKey, nextProp);
              }
              if (propKey === "onScroll") {
                listenToNonDelegatedEvent("scroll", domElement);
              }
            }
          } else if (shouldWarnDev && true && typeof isCustomComponentTag === "boolean") {
            var serverValue = undefined;
            var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
            if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
              ;
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var serverHTML = domElement.innerHTML;
              var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
              if (nextHtml != null) {
                var expectedHTML = normalizeHTML(domElement, nextHtml);
                if (expectedHTML !== serverHTML) {
                  warnForPropDifference(propKey, serverHTML, expectedHTML);
                }
              }
            } else if (propKey === STYLE) {
              extraAttributeNames.delete(propKey);
              if (canDiffStyleForHydrationWarning) {
                var expectedStyle = createDangerousStringForStyles(nextProp);
                serverValue = domElement.getAttribute("style");
                if (expectedStyle !== serverValue) {
                  warnForPropDifference(propKey, serverValue, expectedStyle);
                }
              }
            } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
              extraAttributeNames.delete(propKey.toLowerCase());
              serverValue = getValueForAttribute(domElement, propKey, nextProp);
              if (nextProp !== serverValue) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
              var isMismatchDueToBadCasing = false;
              if (propertyInfo !== null) {
                extraAttributeNames.delete(propertyInfo.attributeName);
                serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
              } else {
                var ownNamespace = parentNamespace;
                if (ownNamespace === HTML_NAMESPACE) {
                  ownNamespace = getIntrinsicNamespace(tag);
                }
                if (ownNamespace === HTML_NAMESPACE) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                } else {
                  var standardName = getPossibleStandardName(propKey);
                  if (standardName !== null && standardName !== propKey) {
                    isMismatchDueToBadCasing = true;
                    extraAttributeNames.delete(standardName);
                  }
                  extraAttributeNames.delete(propKey);
                }
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
              }
              var dontWarnCustomElement = enableCustomElementPropertySupport;
              if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                warnForPropDifference(propKey, serverValue, nextProp);
              }
            }
          }
        }
        {
          if (shouldWarnDev) {
            if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
        }
        switch (tag) {
          case "input":
            track(domElement);
            postMountWrapper(domElement, rawProps, true);
            break;
          case "textarea":
            track(domElement);
            postMountWrapper$3(domElement);
            break;
          case "select":
          case "option":
            break;
          default:
            if (typeof rawProps.onClick === "function") {
              trapClickOnNonInteractiveElement(domElement);
            }
            break;
        }
        return updatePayload;
      }
      function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
      }
      function warnForDeletedHydratableElement(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
        }
      }
      function warnForDeletedHydratableText(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedElement(parentNode, tag, props) {
        {
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
        }
      }
      function warnForInsertedHydratedText(parentNode, text) {
        {
          if (text === "") {
            return;
          }
          if (didWarnInvalidHydration) {
            return;
          }
          didWarnInvalidHydration = true;
          error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
        }
      }
      function restoreControlledState$3(domElement, tag, props) {
        switch (tag) {
          case "input":
            restoreControlledState(domElement, props);
            return;
          case "textarea":
            restoreControlledState$2(domElement, props);
            return;
          case "select":
            restoreControlledState$1(domElement, props);
            return;
        }
      }
      var validateDOMNesting = function() {
      };
      var updatedAncestorInfo = function() {
      };
      {
        var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
        var inScopeTags = [
          "applet",
          "caption",
          "html",
          "table",
          "td",
          "th",
          "marquee",
          "object",
          "template",
          "foreignObject",
          "desc",
          "title"
        ];
        var buttonScopeTags = inScopeTags.concat(["button"]);
        var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
        var emptyAncestorInfo = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null
        };
        updatedAncestorInfo = function(oldInfo, tag) {
          var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
          var info = {
            tag
          };
          if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
          }
          if (buttonScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.pTagInButtonScope = null;
          }
          if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
          }
          ancestorInfo.current = info;
          if (tag === "form") {
            ancestorInfo.formTag = info;
          }
          if (tag === "a") {
            ancestorInfo.aTagInScope = info;
          }
          if (tag === "button") {
            ancestorInfo.buttonTagInScope = info;
          }
          if (tag === "nobr") {
            ancestorInfo.nobrTagInScope = info;
          }
          if (tag === "p") {
            ancestorInfo.pTagInButtonScope = info;
          }
          if (tag === "li") {
            ancestorInfo.listItemTagAutoclosing = info;
          }
          if (tag === "dd" || tag === "dt") {
            ancestorInfo.dlItemTagAutoclosing = info;
          }
          return ancestorInfo;
        };
        var isTagValidWithParent = function(tag, parentTag) {
          switch (parentTag) {
            case "select":
              return tag === "option" || tag === "optgroup" || tag === "#text";
            case "optgroup":
              return tag === "option" || tag === "#text";
            case "option":
              return tag === "#text";
            case "tr":
              return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
            case "tbody":
            case "thead":
            case "tfoot":
              return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
            case "colgroup":
              return tag === "col" || tag === "template";
            case "table":
              return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
            case "head":
              return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
            case "html":
              return tag === "head" || tag === "body" || tag === "frameset";
            case "frameset":
              return tag === "frame";
            case "#document":
              return tag === "html";
          }
          switch (tag) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
            case "rp":
            case "rt":
              return impliedEndTags.indexOf(parentTag) === -1;
            case "body":
            case "caption":
            case "col":
            case "colgroup":
            case "frameset":
            case "frame":
            case "head":
            case "html":
            case "tbody":
            case "td":
            case "tfoot":
            case "th":
            case "thead":
            case "tr":
              return parentTag == null;
          }
          return true;
        };
        var findInvalidAncestorForTag = function(tag, ancestorInfo) {
          switch (tag) {
            case "address":
            case "article":
            case "aside":
            case "blockquote":
            case "center":
            case "details":
            case "dialog":
            case "dir":
            case "div":
            case "dl":
            case "fieldset":
            case "figcaption":
            case "figure":
            case "footer":
            case "header":
            case "hgroup":
            case "main":
            case "menu":
            case "nav":
            case "ol":
            case "p":
            case "section":
            case "summary":
            case "ul":
            case "pre":
            case "listing":
            case "table":
            case "hr":
            case "xmp":
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              return ancestorInfo.pTagInButtonScope;
            case "form":
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case "li":
              return ancestorInfo.listItemTagAutoclosing;
            case "dd":
            case "dt":
              return ancestorInfo.dlItemTagAutoclosing;
            case "button":
              return ancestorInfo.buttonTagInScope;
            case "a":
              return ancestorInfo.aTagInScope;
            case "nobr":
              return ancestorInfo.nobrTagInScope;
          }
          return null;
        };
        var didWarn$1 = {};
        validateDOMNesting = function(childTag, childText, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo;
          var parentInfo = ancestorInfo.current;
          var parentTag = parentInfo && parentInfo.tag;
          if (childText != null) {
            if (childTag != null) {
              error("validateDOMNesting: when childText is passed, childTag should be null");
            }
            childTag = "#text";
          }
          var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
          var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
          var invalidParentOrAncestor = invalidParent || invalidAncestor;
          if (!invalidParentOrAncestor) {
            return;
          }
          var ancestorTag = invalidParentOrAncestor.tag;
          var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
          if (didWarn$1[warnKey]) {
            return;
          }
          didWarn$1[warnKey] = true;
          var tagDisplayName = childTag;
          var whitespaceInfo = "";
          if (childTag === "#text") {
            if (/\S/.test(childText)) {
              tagDisplayName = "Text nodes";
            } else {
              tagDisplayName = "Whitespace text nodes";
              whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
          } else {
            tagDisplayName = "<" + childTag + ">";
          }
          if (invalidParent) {
            var info = "";
            if (ancestorTag === "table" && childTag === "tr") {
              info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            }
            error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
          } else {
            error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
          }
        };
      }
      var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
      var SUSPENSE_START_DATA = "$";
      var SUSPENSE_END_DATA = "/$";
      var SUSPENSE_PENDING_START_DATA = "$?";
      var SUSPENSE_FALLBACK_START_DATA = "$!";
      var STYLE$1 = "style";
      var eventsEnabled = null;
      var selectionInformation = null;
      function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
            var root2 = rootContainerInstance.documentElement;
            namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
            break;
          }
          default: {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
        }
        {
          var validatedTag = type.toLowerCase();
          var ancestorInfo = updatedAncestorInfo(null, validatedTag);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        {
          var parentHostContextDev = parentHostContext;
          var namespace = getChildNamespace(parentHostContextDev.namespace, type);
          var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
          return {
            namespace,
            ancestorInfo
          };
        }
      }
      function getPublicInstance(instance) {
        return instance;
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
      }
      function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          validateDOMNesting(type, null, hostContextDev.ancestorInfo);
          if (typeof props.children === "string" || typeof props.children === "number") {
            var string = "" + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
          parentNamespace = hostContextDev.namespace;
        }
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
      }
      function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            return !!props.autoFocus;
          case "img":
            return true;
          default:
            return false;
        }
      }
      function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        {
          var hostContextDev = hostContext;
          if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
            var string = "" + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
          }
        }
        return diffProperties(domElement, type, oldProps, newProps);
      }
      function shouldSetTextContent(type, props) {
        return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
      }
      function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        {
          var hostContextDev = hostContext;
          validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        }
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
      }
      function getCurrentEventPriority() {
        var currentEvent = window.event;
        if (currentEvent === undefined) {
          return DefaultEventPriority;
        }
        return getEventPriority(currentEvent.type);
      }
      var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : undefined;
      var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : undefined;
      var noTimeout = -1;
      var localPromise = typeof Promise === "function" ? Promise : undefined;
      var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout;
      function handleErrorInNextTick(error2) {
        setTimeout(function() {
          throw error2;
        });
      }
      function commitMount(domElement, type, newProps, internalInstanceHandle) {
        switch (type) {
          case "button":
          case "input":
          case "select":
          case "textarea":
            if (newProps.autoFocus) {
              domElement.focus();
            }
            return;
          case "img": {
            if (newProps.src) {
              domElement.src = newProps.src;
            }
            return;
          }
        }
      }
      function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
        updateFiberProps(domElement, newProps);
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, "");
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
      }
      function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
      }
      function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
          parentNode = container.parentNode;
          parentNode.insertBefore(child, container);
        } else {
          parentNode = container;
          parentNode.appendChild(child);
        }
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
          trapClickOnNonInteractiveElement(parentNode);
        }
      }
      function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
      }
      function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.insertBefore(child, beforeChild);
        } else {
          container.insertBefore(child, beforeChild);
        }
      }
      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
      }
      function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.removeChild(child);
        } else {
          container.removeChild(child);
        }
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance;
        var depth = 0;
        do {
          var nextNode = node.nextSibling;
          parentInstance.removeChild(node);
          if (nextNode && nextNode.nodeType === COMMENT_NODE) {
            var data = nextNode.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                parentInstance.removeChild(nextNode);
                retryIfBlockedOn(suspenseInstance);
                return;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
              depth++;
            }
          }
          node = nextNode;
        } while (node);
        retryIfBlockedOn(suspenseInstance);
      }
      function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) {
          clearSuspenseBoundary(container.parentNode, suspenseInstance);
        } else if (container.nodeType === ELEMENT_NODE) {
          clearSuspenseBoundary(container, suspenseInstance);
        }
        retryIfBlockedOn(container);
      }
      function hideInstance(instance) {
        instance = instance;
        var style2 = instance.style;
        if (typeof style2.setProperty === "function") {
          style2.setProperty("display", "none", "important");
        } else {
          style2.display = "none";
        }
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = "";
      }
      function unhideInstance(instance, props) {
        instance = instance;
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
        instance.style.display = dangerousStyleValue("display", display);
      }
      function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
      }
      function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) {
          container.textContent = "";
        } else if (container.nodeType === DOCUMENT_NODE) {
          if (container.documentElement) {
            container.removeChild(container.documentElement);
          }
        }
      }
      function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
          return null;
        }
        return instance;
      }
      function canHydrateTextInstance(instance, text) {
        if (text === "" || instance.nodeType !== TEXT_NODE) {
          return null;
        }
        return instance;
      }
      function canHydrateSuspenseInstance(instance) {
        if (instance.nodeType !== COMMENT_NODE) {
          return null;
        }
        return instance;
      }
      function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
      }
      function getSuspenseInstanceFallbackErrorDetails(instance) {
        var dataset = instance.nextSibling && instance.nextSibling.dataset;
        var digest, message, stack;
        if (dataset) {
          digest = dataset.dgst;
          {
            message = dataset.msg;
            stack = dataset.stck;
          }
        }
        {
          return {
            message,
            digest,
            stack
          };
        }
      }
      function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
      }
      function getNextHydratable(node) {
        for (;node != null; node = node.nextSibling) {
          var nodeType = node.nodeType;
          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
            break;
          }
          if (nodeType === COMMENT_NODE) {
            var nodeData = node.data;
            if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
              break;
            }
            if (nodeData === SUSPENSE_END_DATA) {
              return null;
            }
          }
        }
        return node;
      }
      function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
      }
      function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
      }
      function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
      }
      function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance);
        updateFiberProps(instance, props);
        var parentNamespace;
        {
          var hostContextDev = hostContext;
          parentNamespace = hostContextDev.namespace;
        }
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
      }
      function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text);
      }
      function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
      }
      function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                return getNextHydratableSibling(node);
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              depth++;
            }
          }
          node = node.nextSibling;
        }
        return null;
      }
      function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling;
        var depth = 0;
        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data;
            if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
              if (depth === 0) {
                return node;
              } else {
                depth--;
              }
            } else if (data === SUSPENSE_END_DATA) {
              depth++;
            }
          }
          node = node.previousSibling;
        }
        return null;
      }
      function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
      }
      function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== "head" && parentType !== "body";
      }
      function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
      }
      function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
      }
      function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentContainer, instance);
          } else if (instance.nodeType === COMMENT_NODE)
            ;
          else {
            warnForDeletedHydratableText(parentContainer, instance);
          }
        }
      }
      function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentNode, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentNode, instance);
            }
          }
        }
      }
      function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
      }
      function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        {
          warnForInsertedHydratedElement(parentContainer, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        {
          warnForInsertedHydratedText(parentContainer, text);
        }
      }
      function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null)
            warnForInsertedHydratedElement(parentNode, type);
        }
      }
      function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        {
          var parentNode = parentInstance.parentNode;
          if (parentNode !== null)
            warnForInsertedHydratedText(parentNode, text);
        }
      }
      function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
      }
      function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
        {
          if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
      }
      function errorHydratingContainer(parentContainer) {
        {
          error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
        }
      }
      function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
      }
      var randomKey = Math.random().toString(36).slice(2);
      var internalInstanceKey = "__reactFiber$" + randomKey;
      var internalPropsKey = "__reactProps$" + randomKey;
      var internalContainerInstanceKey = "__reactContainer$" + randomKey;
      var internalEventHandlersKey = "__reactEvents$" + randomKey;
      var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
      var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
      function detachDeletedInstance(node) {
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
      }
      function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
      }
      function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
      }
      function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
      }
      function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) {
          return targetInst;
        }
        var parentNode = targetNode.parentNode;
        while (parentNode) {
          targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
          if (targetInst) {
            var alternate = targetInst.alternate;
            if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
              var suspenseInstance = getParentSuspenseInstance(targetNode);
              while (suspenseInstance !== null) {
                var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                if (targetSuspenseInst) {
                  return targetSuspenseInst;
                }
                suspenseInstance = getParentSuspenseInstance(suspenseInstance);
              }
            }
            return targetInst;
          }
          targetNode = parentNode;
          parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
          if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
            return inst;
          } else {
            return null;
          }
        }
        return null;
      }
      function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst.stateNode;
        }
        throw new Error("getNodeFromInstance: Invalid argument.");
      }
      function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
      }
      function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
      }
      function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) {
          elementListenerSet = node[internalEventHandlersKey] = new Set;
        }
        return elementListenerSet;
      }
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has2 = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has2(typeSpecs, typeSpecName)) {
              var error$1 = undefined;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var valueStack = [];
      var fiberStack;
      {
        fiberStack = [];
      }
      var index = -1;
      function createCursor(defaultValue) {
        return {
          current: defaultValue
        };
      }
      function pop(cursor, fiber) {
        if (index < 0) {
          {
            error("Unexpected pop.");
          }
          return;
        }
        {
          if (fiber !== fiberStack[index]) {
            error("Unexpected Fiber popped.");
          }
        }
        cursor.current = valueStack[index];
        valueStack[index] = null;
        {
          fiberStack[index] = null;
        }
        index--;
      }
      function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        {
          fiberStack[index] = fiber;
        }
        cursor.current = value;
      }
      var warnedAboutMissingGetChildContext;
      {
        warnedAboutMissingGetChildContext = {};
      }
      var emptyContextObject = {};
      {
        Object.freeze(emptyContextObject);
      }
      var contextStackCursor = createCursor(emptyContextObject);
      var didPerformWorkStackCursor = createCursor(false);
      var previousContext = emptyContextObject;
      function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
            return previousContext;
          }
          return contextStackCursor.current;
        }
      }
      function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress2.stateNode;
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
        }
      }
      function getMaskedContext(workInProgress2, unmaskedContext) {
        {
          var type = workInProgress2.type;
          var contextTypes = type.contextTypes;
          if (!contextTypes) {
            return emptyContextObject;
          }
          var instance = workInProgress2.stateNode;
          if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
            return instance.__reactInternalMemoizedMaskedChildContext;
          }
          var context = {};
          for (var key in contextTypes) {
            context[key] = unmaskedContext[key];
          }
          {
            var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
            checkPropTypes(contextTypes, context, "context", name);
          }
          if (instance) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return context;
        }
      }
      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current;
        }
      }
      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes;
          return childContextTypes !== null && childContextTypes !== undefined;
        }
      }
      function popContext(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function popTopLevelContextObject(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber);
          pop(contextStackCursor, fiber);
        }
      }
      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (contextStackCursor.current !== emptyContextObject) {
            throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
          }
          push(contextStackCursor, context, fiber);
          push(didPerformWorkStackCursor, didChange, fiber);
        }
      }
      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode;
          var childContextTypes = type.childContextTypes;
          if (typeof instance.getChildContext !== "function") {
            {
              var componentName = getComponentNameFromFiber(fiber) || "Unknown";
              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
              }
            }
            return parentContext;
          }
          var childContext = instance.getChildContext();
          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
            }
          }
          {
            var name = getComponentNameFromFiber(fiber) || "Unknown";
            checkPropTypes(childContextTypes, childContext, "child context", name);
          }
          return assign({}, parentContext, childContext);
        }
      }
      function pushContextProvider(workInProgress2) {
        {
          var instance = workInProgress2.stateNode;
          var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
          previousContext = contextStackCursor.current;
          push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
          push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
          return true;
        }
      }
      function invalidateContextProvider(workInProgress2, type, didChange) {
        {
          var instance = workInProgress2.stateNode;
          if (!instance) {
            throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
          }
          if (didChange) {
            var mergedContext = processChildContext(workInProgress2, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress2);
            pop(contextStackCursor, workInProgress2);
            push(contextStackCursor, mergedContext, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          } else {
            pop(didPerformWorkStackCursor, workInProgress2);
            push(didPerformWorkStackCursor, didChange, workInProgress2);
          }
        }
      }
      function findCurrentUnmaskedContext(fiber) {
        {
          if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
            throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
          }
          var node = fiber;
          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context;
              case ClassComponent: {
                var Component2 = node.type;
                if (isContextProvider(Component2)) {
                  return node.stateNode.__reactInternalMemoizedMergedChildContext;
                }
                break;
              }
            }
            node = node.return;
          } while (node !== null);
          throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      var LegacyRoot = 0;
      var ConcurrentRoot = 1;
      var syncQueue = null;
      var includesLegacySyncCallbacks = false;
      var isFlushingSyncQueue = false;
      function scheduleSyncCallback(callback) {
        if (syncQueue === null) {
          syncQueue = [callback];
        } else {
          syncQueue.push(callback);
        }
      }
      function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = true;
        scheduleSyncCallback(callback);
      }
      function flushSyncCallbacksOnlyInLegacyMode() {
        if (includesLegacySyncCallbacks) {
          flushSyncCallbacks();
        }
      }
      function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          isFlushingSyncQueue = true;
          var i = 0;
          var previousUpdatePriority = getCurrentUpdatePriority();
          try {
            var isSync = true;
            var queue = syncQueue;
            setCurrentUpdatePriority(DiscreteEventPriority);
            for (;i < queue.length; i++) {
              var callback = queue[i];
              do {
                callback = callback(isSync);
              } while (callback !== null);
            }
            syncQueue = null;
            includesLegacySyncCallbacks = false;
          } catch (error2) {
            if (syncQueue !== null) {
              syncQueue = syncQueue.slice(i + 1);
            }
            scheduleCallback(ImmediatePriority, flushSyncCallbacks);
            throw error2;
          } finally {
            setCurrentUpdatePriority(previousUpdatePriority);
            isFlushingSyncQueue = false;
          }
        }
        return null;
      }
      var forkStack = [];
      var forkStackIndex = 0;
      var treeForkProvider = null;
      var treeForkCount = 0;
      var idStack = [];
      var idStackIndex = 0;
      var treeContextProvider = null;
      var treeContextId = 1;
      var treeContextOverflow = "";
      function isForkedChild(workInProgress2) {
        warnIfNotHydrating();
        return (workInProgress2.flags & Forked) !== NoFlags;
      }
      function getForksAtLevel(workInProgress2) {
        warnIfNotHydrating();
        return treeForkCount;
      }
      function getTreeId() {
        var overflow = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
      }
      function pushTreeFork(workInProgress2, totalChildren) {
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress2;
        treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index2) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId;
        var baseOverflow = treeContextOverflow;
        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
        var slot = index2 + 1;
        var length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
          var numberOfOverflowBits = baseLength - baseLength % 5;
          var newOverflowBits = (1 << numberOfOverflowBits) - 1;
          var newOverflow = (baseId & newOverflowBits).toString(32);
          var restOfBaseId = baseId >> numberOfOverflowBits;
          var restOfBaseLength = baseLength - numberOfOverflowBits;
          var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
          var restOfNewBits = slot << restOfBaseLength;
          var id = restOfNewBits | restOfBaseId;
          var overflow = newOverflow + baseOverflow;
          treeContextId = 1 << restOfLength | id;
          treeContextOverflow = overflow;
        } else {
          var newBits = slot << baseLength;
          var _id = newBits | baseId;
          var _overflow = baseOverflow;
          treeContextId = 1 << length | _id;
          treeContextOverflow = _overflow;
        }
      }
      function pushMaterializedTreeId(workInProgress2) {
        warnIfNotHydrating();
        var returnFiber = workInProgress2.return;
        if (returnFiber !== null) {
          var numberOfForks = 1;
          var slotIndex = 0;
          pushTreeFork(workInProgress2, numberOfForks);
          pushTreeId(workInProgress2, numberOfForks, slotIndex);
        }
      }
      function getBitLength(number) {
        return 32 - clz32(number);
      }
      function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
      }
      function popTreeContext(workInProgress2) {
        while (workInProgress2 === treeForkProvider) {
          treeForkProvider = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
          treeForkCount = forkStack[--forkStackIndex];
          forkStack[forkStackIndex] = null;
        }
        while (workInProgress2 === treeContextProvider) {
          treeContextProvider = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextOverflow = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
          treeContextId = idStack[--idStackIndex];
          idStack[idStackIndex] = null;
        }
      }
      function getSuspendedTreeContext() {
        warnIfNotHydrating();
        if (treeContextProvider !== null) {
          return {
            id: treeContextId,
            overflow: treeContextOverflow
          };
        } else {
          return null;
        }
      }
      function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextId = suspendedContext.id;
        treeContextOverflow = suspendedContext.overflow;
        treeContextProvider = workInProgress2;
      }
      function warnIfNotHydrating() {
        {
          if (!getIsHydrating()) {
            error("Expected to be hydrating. This is a bug in React. Please file an issue.");
          }
        }
      }
      var hydrationParentFiber = null;
      var nextHydratableInstance = null;
      var isHydrating = false;
      var didSuspendOrErrorDEV = false;
      var hydrationErrors = null;
      function warnIfHydrating() {
        {
          if (isHydrating) {
            error("We should not be hydrating here. This is a bug in React. Please file a bug.");
          }
        }
      }
      function markDidThrowWhileHydratingDEV() {
        {
          didSuspendOrErrorDEV = true;
        }
      }
      function didSuspendOrErrorWhileHydratingDEV() {
        {
          return didSuspendOrErrorDEV;
        }
      }
      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        return true;
      }
      function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        if (treeContext !== null) {
          restoreSuspendedTreeContext(fiber, treeContext);
        }
        return true;
      }
      function warnUnhydratedInstance(returnFiber, instance) {
        {
          switch (returnFiber.tag) {
            case HostRoot: {
              didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
              break;
            }
            case HostComponent: {
              var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
              didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              if (suspenseState.dehydrated !== null)
                didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
              break;
            }
          }
        }
      }
      function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        if (deletions === null) {
          returnFiber.deletions = [childToDelete];
          returnFiber.flags |= ChildDeletion;
        } else {
          deletions.push(childToDelete);
        }
      }
      function warnNonhydratedInstance(returnFiber, fiber) {
        {
          if (didSuspendOrErrorDEV) {
            return;
          }
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo;
              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                  break;
                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                  break;
              }
              break;
            }
            case HostComponent: {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              switch (fiber.tag) {
                case HostComponent: {
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                  break;
                }
                case HostText: {
                  var _text = fiber.pendingProps;
                  var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                  break;
                }
              }
              break;
            }
            case SuspenseComponent: {
              var suspenseState = returnFiber.memoizedState;
              var _parentInstance = suspenseState.dehydrated;
              if (_parentInstance !== null)
                switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type;
                    var _props2 = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
              break;
            }
            default:
              return;
          }
        }
      }
      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        warnNonhydratedInstance(returnFiber, fiber);
      }
      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type);
            if (instance !== null) {
              fiber.stateNode = instance;
              hydrationParentFiber = fiber;
              nextHydratableInstance = getFirstHydratableChild(instance);
              return true;
            }
            return false;
          }
          case HostText: {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);
            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              hydrationParentFiber = fiber;
              nextHydratableInstance = null;
              return true;
            }
            return false;
          }
          case SuspenseComponent: {
            var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
            if (suspenseInstance !== null) {
              var suspenseState = {
                dehydrated: suspenseInstance,
                treeContext: getSuspendedTreeContext(),
                retryLane: OffscreenLane
              };
              fiber.memoizedState = suspenseState;
              var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
              dehydratedFragment.return = fiber;
              fiber.child = dehydratedFragment;
              hydrationParentFiber = fiber;
              nextHydratableInstance = null;
              return true;
            }
            return false;
          }
          default:
            return false;
        }
      }
      function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
      }
      function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
      }
      function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
          return;
        }
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
          if (shouldClientRenderOnMismatch(fiber)) {
            warnNonhydratedInstance(hydrationParentFiber, fiber);
            throwOnHydrationMismatch();
          }
          nextInstance = getNextHydratableSibling(firstAttemptedInstance);
          var prevHydrationParentFiber = hydrationParentFiber;
          if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
      }
      function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
        fiber.updateQueue = updatePayload;
        if (updatePayload !== null) {
          return true;
        }
        return false;
      }
      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
          var returnFiber = hydrationParentFiber;
          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                break;
              }
            }
          }
        }
        return shouldUpdate;
      }
      function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        }
        hydrateSuspenseInstance(suspenseInstance, fiber);
      }
      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) {
          throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        }
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
      }
      function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
          parent = parent.return;
        }
        hydrationParentFiber = parent;
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) {
          return false;
        }
        if (!isHydrating) {
          popToNextHostParent(fiber);
          isHydrating = true;
          return false;
        }
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
          var nextInstance = nextHydratableInstance;
          if (nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnIfUnhydratedTailNodes(fiber);
              throwOnHydrationMismatch();
            } else {
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
          }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) {
          nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        } else {
          nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        }
        return true;
      }
      function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
      }
      function warnIfUnhydratedTailNodes(fiber) {
        var nextInstance = nextHydratableInstance;
        while (nextInstance) {
          warnUnhydratedInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }
      function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
        didSuspendOrErrorDEV = false;
      }
      function upgradeHydrationErrorsToRecoverable() {
        if (hydrationErrors !== null) {
          queueRecoverableErrors(hydrationErrors);
          hydrationErrors = null;
        }
      }
      function getIsHydrating() {
        return isHydrating;
      }
      function queueHydrationError(error2) {
        if (hydrationErrors === null) {
          hydrationErrors = [error2];
        } else {
          hydrationErrors.push(error2);
        }
      }
      var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
      var NoTransition = null;
      function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
      }
      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {
        },
        flushPendingUnsafeLifecycleWarnings: function() {
        },
        recordLegacyContextWarning: function(fiber, instance) {
        },
        flushLegacyContextWarning: function() {
        },
        discardPendingWarnings: function() {
        }
      };
      {
        var findStrictRoot = function(fiber) {
          var maybeStrictRoot = null;
          var node = fiber;
          while (node !== null) {
            if (node.mode & StrictLegacyMode) {
              maybeStrictRoot = node;
            }
            node = node.return;
          }
          return maybeStrictRoot;
        };
        var setToSortedString = function(set2) {
          var array = [];
          set2.forEach(function(value) {
            array.push(value);
          });
          return array.sort().join(", ");
        };
        var pendingComponentWillMountWarnings = [];
        var pendingUNSAFE_ComponentWillMountWarnings = [];
        var pendingComponentWillReceivePropsWarnings = [];
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        var pendingComponentWillUpdateWarnings = [];
        var pendingUNSAFE_ComponentWillUpdateWarnings = [];
        var didWarnAboutUnsafeLifecycles = new Set;
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return;
          }
          if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            pendingComponentWillMountWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
          }
          if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            pendingComponentWillReceivePropsWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
          }
          if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            pendingComponentWillUpdateWarnings.push(fiber);
          }
          if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
          var componentWillMountUniqueNames = new Set;
          if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
              componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
          }
          var UNSAFE_componentWillMountUniqueNames = new Set;
          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
              UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
          }
          var componentWillReceivePropsUniqueNames = new Set;
          if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
              componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
          }
          var UNSAFE_componentWillReceivePropsUniqueNames = new Set;
          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
              UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          }
          var componentWillUpdateUniqueNames = new Set;
          if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
              componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
          }
          var UNSAFE_componentWillUpdateUniqueNames = new Set;
          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
              UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
          }
          if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
          }
          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
          }
          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
          }
          if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
          }
          if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
          }
          if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
          }
        };
        var pendingLegacyContextWarning = new Map;
        var didWarnAboutLegacyContext = new Set;
        ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
          var strictRoot = findStrictRoot(fiber);
          if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
          }
          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return;
          }
          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
          if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
            if (warningsForRoot === undefined) {
              warningsForRoot = [];
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
          }
        };
        ReactStrictModeWarnings.flushLegacyContextWarning = function() {
          pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) {
              return;
            }
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set;
            fiberArray.forEach(function(fiber) {
              uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
              didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
              setCurrentFiber(firstFiber);
              error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally {
              resetCurrentFiber();
            }
          });
        };
        ReactStrictModeWarnings.discardPendingWarnings = function() {
          pendingComponentWillMountWarnings = [];
          pendingUNSAFE_ComponentWillMountWarnings = [];
          pendingComponentWillReceivePropsWarnings = [];
          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          pendingComponentWillUpdateWarnings = [];
          pendingUNSAFE_ComponentWillUpdateWarnings = [];
          pendingLegacyContextWarning = new Map;
        };
      }
      function resolveDefaultProps(Component2, baseProps) {
        if (Component2 && Component2.defaultProps) {
          var props = assign({}, baseProps);
          var defaultProps = Component2.defaultProps;
          for (var propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
          return props;
        }
        return baseProps;
      }
      var valueCursor = createCursor(null);
      var rendererSigil;
      {
        rendererSigil = {};
      }
      var currentlyRenderingFiber = null;
      var lastContextDependency = null;
      var lastFullyObservedContext = null;
      var isDisallowedContextReadInDEV = false;
      function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true;
        }
      }
      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false;
        }
      }
      function pushProvider(providerFiber, context, nextValue) {
        {
          push(valueCursor, context._currentValue, providerFiber);
          context._currentValue = nextValue;
          {
            if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
              error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
            }
            context._currentRenderer = rendererSigil;
          }
        }
      }
      function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        {
          {
            context._currentValue = currentValue;
          }
        }
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        var node = parent;
        while (node !== null) {
          var alternate = node.alternate;
          if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
            node.childLanes = mergeLanes(node.childLanes, renderLanes2);
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
          } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
          }
          if (node === propagationRoot) {
            break;
          }
          node = node.return;
        }
        {
          if (node !== propagationRoot) {
            error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
      }
      function propagateContextChange(workInProgress2, context, renderLanes2) {
        {
          propagateContextChange_eager(workInProgress2, context, renderLanes2);
        }
      }
      function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
        var fiber = workInProgress2.child;
        if (fiber !== null) {
          fiber.return = workInProgress2;
        }
        while (fiber !== null) {
          var nextFiber = undefined;
          var list = fiber.dependencies;
          if (list !== null) {
            nextFiber = fiber.child;
            var dependency = list.firstContext;
            while (dependency !== null) {
              if (dependency.context === context) {
                if (fiber.tag === ClassComponent) {
                  var lane = pickArbitraryLane(renderLanes2);
                  var update = createUpdate(NoTimestamp, lane);
                  update.tag = ForceUpdate;
                  var updateQueue = fiber.updateQueue;
                  if (updateQueue === null)
                    ;
                  else {
                    var sharedQueue = updateQueue.shared;
                    var pending = sharedQueue.pending;
                    if (pending === null) {
                      update.next = update;
                    } else {
                      update.next = pending.next;
                      pending.next = update;
                    }
                    sharedQueue.pending = update;
                  }
                }
                fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                list.lanes = mergeLanes(list.lanes, renderLanes2);
                break;
              }
              dependency = dependency.next;
            }
          } else if (fiber.tag === ContextProvider) {
            nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
          } else if (fiber.tag === DehydratedFragment) {
            var parentSuspense = fiber.return;
            if (parentSuspense === null) {
              throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
            }
            parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
            var _alternate = parentSuspense.alternate;
            if (_alternate !== null) {
              _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
            nextFiber = fiber.sibling;
          } else {
            nextFiber = fiber.child;
          }
          if (nextFiber !== null) {
            nextFiber.return = fiber;
          } else {
            nextFiber = fiber;
            while (nextFiber !== null) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              var sibling = nextFiber.sibling;
              if (sibling !== null) {
                sibling.return = nextFiber.return;
                nextFiber = sibling;
                break;
              }
              nextFiber = nextFiber.return;
            }
          }
          fiber = nextFiber;
        }
      }
      function prepareToReadContext(workInProgress2, renderLanes2) {
        currentlyRenderingFiber = workInProgress2;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        var dependencies = workInProgress2.dependencies;
        if (dependencies !== null) {
          {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
      }
      function readContext(context) {
        {
          if (isDisallowedContextReadInDEV) {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          }
        }
        var value = context._currentValue;
        if (lastFullyObservedContext === context)
          ;
        else {
          var contextItem = {
            context,
            memoizedValue: value,
            next: null
          };
          if (lastContextDependency === null) {
            if (currentlyRenderingFiber === null) {
              throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
            lastContextDependency = contextItem;
            currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem
            };
          } else {
            lastContextDependency = lastContextDependency.next = contextItem;
          }
        }
        return value;
      }
      var concurrentQueues = null;
      function pushConcurrentUpdateQueue(queue) {
        if (concurrentQueues === null) {
          concurrentQueues = [queue];
        } else {
          concurrentQueues.push(queue);
        }
      }
      function finishQueueingConcurrentUpdates() {
        if (concurrentQueues !== null) {
          for (var i = 0;i < concurrentQueues.length; i++) {
            var queue = concurrentQueues[i];
            var lastInterleavedUpdate = queue.interleaved;
            if (lastInterleavedUpdate !== null) {
              queue.interleaved = null;
              var firstInterleavedUpdate = lastInterleavedUpdate.next;
              var lastPendingUpdate = queue.pending;
              if (lastPendingUpdate !== null) {
                var firstPendingUpdate = lastPendingUpdate.next;
                lastPendingUpdate.next = firstInterleavedUpdate;
                lastInterleavedUpdate.next = firstPendingUpdate;
              }
              queue.pending = lastInterleavedUpdate;
            }
          }
          concurrentQueues = null;
        }
      }
      function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue.interleaved = update;
      }
      function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
          update.next = update;
          pushConcurrentUpdateQueue(queue);
        } else {
          update.next = interleaved.next;
          interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      function enqueueConcurrentRenderForLane(fiber, lane) {
        return markUpdateLaneFromFiberToRoot(fiber, lane);
      }
      var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, lane);
        }
        {
          if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
          }
        }
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while (parent !== null) {
          parent.childLanes = mergeLanes(parent.childLanes, lane);
          alternate = parent.alternate;
          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, lane);
          } else {
            {
              if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
          }
          node = parent;
          parent = parent.return;
        }
        if (node.tag === HostRoot) {
          var root2 = node.stateNode;
          return root2;
        } else {
          return null;
        }
      }
      var UpdateState = 0;
      var ReplaceState = 1;
      var ForceUpdate = 2;
      var CaptureUpdate = 3;
      var hasForceUpdate = false;
      var didWarnUpdateInsideUpdate;
      var currentlyProcessingQueue;
      {
        didWarnUpdateInsideUpdate = false;
        currentlyProcessingQueue = null;
      }
      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null,
            interleaved: null,
            lanes: NoLanes
          },
          effects: null
        };
        fiber.updateQueue = queue;
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        var queue = workInProgress2.updateQueue;
        var currentQueue = current2.updateQueue;
        if (queue === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects
          };
          workInProgress2.updateQueue = clone;
        }
      }
      function createUpdate(eventTime, lane) {
        var update = {
          eventTime,
          lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null
        };
        return update;
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return null;
        }
        var sharedQueue = updateQueue.shared;
        {
          if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
          }
        }
        if (isUnsafeClassRenderPhaseUpdate()) {
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else {
          return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
        }
      }
      function entangleTransitions(root2, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) {
          return;
        }
        var sharedQueue = updateQueue.shared;
        if (isTransitionLane(lane)) {
          var queueLanes = sharedQueue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          sharedQueue.lanes = newQueueLanes;
          markRootEntangled(root2, newQueueLanes);
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue;
        var current2 = workInProgress2.alternate;
        if (current2 !== null) {
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var newFirst = null;
            var newLast = null;
            var firstBaseUpdate = queue.firstBaseUpdate;
            if (firstBaseUpdate !== null) {
              var update = firstBaseUpdate;
              do {
                var clone = {
                  eventTime: update.eventTime,
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLast === null) {
                  newFirst = newLast = clone;
                } else {
                  newLast.next = clone;
                  newLast = clone;
                }
                update = update.next;
              } while (update !== null);
              if (newLast === null) {
                newFirst = newLast = capturedUpdate;
              } else {
                newLast.next = capturedUpdate;
                newLast = capturedUpdate;
              }
            } else {
              newFirst = newLast = capturedUpdate;
            }
            queue = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = queue;
            return;
          }
        }
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) {
          queue.firstBaseUpdate = capturedUpdate;
        } else {
          lastBaseUpdate.next = capturedUpdate;
        }
        queue.lastBaseUpdate = capturedUpdate;
      }
      function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload;
            if (typeof payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              var nextState = payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            }
            return payload;
          }
          case CaptureUpdate: {
            workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
          }
          case UpdateState: {
            var _payload = update.payload;
            var partialState;
            if (typeof _payload === "function") {
              {
                enterDisallowedContextReadInDEV();
              }
              partialState = _payload.call(instance, prevState, nextProps);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    _payload.call(instance, prevState, nextProps);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                exitDisallowedContextReadInDEV();
              }
            } else {
              partialState = _payload;
            }
            if (partialState === null || partialState === undefined) {
              return prevState;
            }
            return assign({}, prevState, partialState);
          }
          case ForceUpdate: {
            hasForceUpdate = true;
            return prevState;
          }
        }
        return prevState;
      }
      function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
        var queue = workInProgress2.updateQueue;
        hasForceUpdate = false;
        {
          currentlyProcessingQueue = queue.shared;
        }
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate;
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue;
          var firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;
          if (lastBaseUpdate === null) {
            firstBaseUpdate = firstPendingUpdate;
          } else {
            lastBaseUpdate.next = firstPendingUpdate;
          }
          lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
            if (currentLastBaseUpdate !== lastBaseUpdate) {
              if (currentLastBaseUpdate === null) {
                currentQueue.firstBaseUpdate = firstPendingUpdate;
              } else {
                currentLastBaseUpdate.next = firstPendingUpdate;
              }
              currentQueue.lastBaseUpdate = lastPendingUpdate;
            }
          }
        }
        if (firstBaseUpdate !== null) {
          var newState = queue.baseState;
          var newLanes = NoLanes;
          var newBaseState = null;
          var newFirstBaseUpdate = null;
          var newLastBaseUpdate = null;
          var update = firstBaseUpdate;
          do {
            var updateLane = update.lane;
            var updateEventTime = update.eventTime;
            if (!isSubsetOfLanes(renderLanes2, updateLane)) {
              var clone = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null
              };
              if (newLastBaseUpdate === null) {
                newFirstBaseUpdate = newLastBaseUpdate = clone;
                newBaseState = newState;
              } else {
                newLastBaseUpdate = newLastBaseUpdate.next = clone;
              }
              newLanes = mergeLanes(newLanes, updateLane);
            } else {
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                newLastBaseUpdate = newLastBaseUpdate.next = _clone;
              }
              newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
              var callback = update.callback;
              if (callback !== null && update.lane !== NoLane) {
                workInProgress2.flags |= Callback;
                var effects = queue.effects;
                if (effects === null) {
                  queue.effects = [update];
                } else {
                  effects.push(update);
                }
              }
            }
            update = update.next;
            if (update === null) {
              pendingQueue = queue.shared.pending;
              if (pendingQueue === null) {
                break;
              } else {
                var _lastPendingUpdate = pendingQueue;
                var _firstPendingUpdate = _lastPendingUpdate.next;
                _lastPendingUpdate.next = null;
                update = _firstPendingUpdate;
                queue.lastBaseUpdate = _lastPendingUpdate;
                queue.shared.pending = null;
              }
            }
          } while (true);
          if (newLastBaseUpdate === null) {
            newBaseState = newState;
          }
          queue.baseState = newBaseState;
          queue.firstBaseUpdate = newFirstBaseUpdate;
          queue.lastBaseUpdate = newLastBaseUpdate;
          var lastInterleaved = queue.shared.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              newLanes = mergeLanes(newLanes, interleaved.lane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (firstBaseUpdate === null) {
            queue.shared.lanes = NoLanes;
          }
          markSkippedUpdateLanes(newLanes);
          workInProgress2.lanes = newLanes;
          workInProgress2.memoizedState = newState;
        }
        {
          currentlyProcessingQueue = null;
        }
      }
      function callCallback(callback, context) {
        if (typeof callback !== "function") {
          throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
        }
        callback.call(context);
      }
      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) {
          for (var i = 0;i < effects.length; i++) {
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
              effect.callback = null;
              callCallback(callback, instance);
            }
          }
        }
      }
      var fakeInternalInstance = {};
      var emptyRefsObject = new React.Component().refs;
      var didWarnAboutStateAssignmentForComponent;
      var didWarnAboutUninitializedState;
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
      var didWarnAboutLegacyLifecyclesAndDerivedState;
      var didWarnAboutUndefinedDerivedState;
      var warnOnUndefinedDerivedState;
      var warnOnInvalidCallback;
      var didWarnAboutDirectlyAssigningPropsToState;
      var didWarnAboutContextTypeAndContextTypes;
      var didWarnAboutInvalidateContextType;
      {
        didWarnAboutStateAssignmentForComponent = new Set;
        didWarnAboutUninitializedState = new Set;
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set;
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set;
        didWarnAboutDirectlyAssigningPropsToState = new Set;
        didWarnAboutUndefinedDerivedState = new Set;
        didWarnAboutContextTypeAndContextTypes = new Set;
        didWarnAboutInvalidateContextType = new Set;
        var didWarnOnInvalidCallback = new Set;
        warnOnInvalidCallback = function(callback, callerName) {
          if (callback === null || typeof callback === "function") {
            return;
          }
          var key = callerName + "_" + callback;
          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        };
        warnOnUndefinedDerivedState = function(type, partialState) {
          if (partialState === undefined) {
            var componentName = getComponentNameFromType(type) || "Component";
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName);
              error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
          }
        };
        Object.defineProperty(fakeInternalInstance, "_processChildContext", {
          enumerable: false,
          value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
          }
        });
        Object.freeze(fakeInternalInstance);
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress2.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          warnOnUndefinedDerivedState(ctor, partialState);
        }
        var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
        workInProgress2.memoizedState = memoizedState;
        if (workInProgress2.lanes === NoLanes) {
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = memoizedState;
        }
      }
      var classComponentUpdater = {
        isMounted,
        enqueueSetState: function(inst, payload, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.payload = payload;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "setState");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueReplaceState: function(inst, payload, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ReplaceState;
          update.payload = payload;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "replaceState");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markStateUpdateScheduled(fiber, lane);
          }
        },
        enqueueForceUpdate: function(inst, callback) {
          var fiber = get(inst);
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = createUpdate(eventTime, lane);
          update.tag = ForceUpdate;
          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, "forceUpdate");
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(fiber, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitions(root2, fiber, lane);
          }
          {
            markForceUpdateScheduled(fiber, lane);
          }
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress2.stateNode;
        if (typeof instance.shouldComponentUpdate === "function") {
          var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            if (shouldUpdate === undefined) {
              error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
            }
          }
          return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        }
        return true;
      }
      function checkClassInstance(workInProgress2, ctor, newProps) {
        var instance = workInProgress2.stateNode;
        {
          var name = getComponentNameFromType(ctor) || "Component";
          var renderPresent = instance.render;
          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === "function") {
              error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            } else {
              error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
            }
          }
          if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
            error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
          }
          if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
          }
          if (instance.propTypes) {
            error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
          }
          if (instance.contextType) {
            error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
          }
          {
            if (instance.contextTypes) {
              error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
            }
            if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
              didWarnAboutContextTypeAndContextTypes.add(ctor);
              error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
            }
          }
          if (typeof instance.componentShouldUpdate === "function") {
            error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
            error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
          }
          if (typeof instance.componentDidUnmount === "function") {
            error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
          }
          if (typeof instance.componentDidReceiveProps === "function") {
            error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
          }
          if (typeof instance.componentWillRecieveProps === "function") {
            error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
          }
          if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
            error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
          }
          var hasMutatedProps = instance.props !== newProps;
          if (instance.props !== undefined && hasMutatedProps) {
            error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
          }
          if (instance.defaultProps) {
            error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
          }
          if (typeof instance.getDerivedStateFromProps === "function") {
            error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof instance.getDerivedStateFromError === "function") {
            error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
          }
          if (typeof ctor.getSnapshotBeforeUpdate === "function") {
            error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
          }
          var _state = instance.state;
          if (_state && (typeof _state !== "object" || isArray(_state))) {
            error("%s.state: must be set to an object or null", name);
          }
          if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
            error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
          }
        }
      }
      function adoptClassInstance(workInProgress2, instance) {
        instance.updater = classComponentUpdater;
        workInProgress2.stateNode = instance;
        set(instance, workInProgress2);
        {
          instance._reactInternalInstance = fakeInternalInstance;
        }
      }
      function constructClassInstance(workInProgress2, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        {
          if ("contextType" in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor);
              var addendum = "";
              if (contextType === undefined) {
                addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
              } else if (typeof contextType !== "object") {
                addendum = " However, it is set to a " + typeof contextType + ".";
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum = " Did you accidentally pass the Context.Provider instead?";
              } else if (contextType._context !== undefined) {
                addendum = " Did you accidentally pass the Context.Consumer instead?";
              } else {
                addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
              }
              error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
            }
          }
        }
        if (typeof contextType === "object" && contextType !== null) {
          context = readContext(contextType);
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          var contextTypes = ctor.contextTypes;
          isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
          context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context);
        {
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              instance = new ctor(props, context);
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        }
        var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress2, instance);
        {
          if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName);
              error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
            }
          }
          if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              foundWillMountName = "componentWillMount";
            } else if (typeof instance.UNSAFE_componentWillMount === "function") {
              foundWillMountName = "UNSAFE_componentWillMount";
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              foundWillReceivePropsName = "componentWillReceiveProps";
            } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              foundWillUpdateName = "componentWillUpdate";
            } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              foundWillUpdateName = "UNSAFE_componentWillUpdate";
            }
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(ctor) || "Component";
              var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
              }
            }
          }
        }
        if (isLegacyContextConsumer) {
          cacheContext(workInProgress2, unmaskedContext, context);
        }
        return instance;
      }
      function callComponentWillMount(workInProgress2, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === "function") {
          instance.componentWillMount();
        }
        if (typeof instance.UNSAFE_componentWillMount === "function") {
          instance.UNSAFE_componentWillMount();
        }
        if (oldState !== instance.state) {
          {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === "function") {
          instance.componentWillReceiveProps(newProps, nextContext);
        }
        if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        }
        if (instance.state !== oldState) {
          {
            var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName);
              error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
          }
          classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
      }
      function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        {
          checkClassInstance(workInProgress2, ctor, newProps);
        }
        var instance = workInProgress2.stateNode;
        instance.props = newProps;
        instance.state = workInProgress2.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress2);
        var contextType = ctor.contextType;
        if (typeof contextType === "object" && contextType !== null) {
          instance.context = readContext(contextType);
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          instance.context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        {
          if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || "Component";
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName);
              error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
          }
          {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
          }
        }
        instance.state = workInProgress2.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
          callComponentWillMount(workInProgress2, instance);
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          instance.state = workInProgress2.memoizedState;
        }
        if (typeof instance.componentDidMount === "function") {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          workInProgress2.flags |= fiberFlags;
        }
      }
      function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        var oldProps = workInProgress2.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
          }
          if (typeof instance.componentDidMount === "function") {
            var _fiberFlags = Update;
            {
              _fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags;
          }
        } else {
          if (typeof instance.componentDidMount === "function") {
            var _fiberFlags2 = Update;
            {
              _fiberFlags2 |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              _fiberFlags2 |= MountLayoutDev;
            }
            workInProgress2.flags |= _fiberFlags2;
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
        var instance = workInProgress2.stateNode;
        cloneUpdateQueue(current2, workInProgress2);
        var unresolvedOldProps = workInProgress2.memoizedProps;
        var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress2.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === "object" && contextType !== null) {
          nextContext = readContext(contextType);
        } else {
          var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
          nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
          if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
          }
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress2.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
        newState = workInProgress2.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          return false;
        }
        if (typeof getDerivedStateFromProps === "function") {
          applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
          newState = workInProgress2.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
        if (shouldUpdate) {
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
            if (typeof instance.componentWillUpdate === "function") {
              instance.componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillUpdate === "function") {
              instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
          }
          if (typeof instance.componentDidUpdate === "function") {
            workInProgress2.flags |= Update;
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            workInProgress2.flags |= Snapshot;
          }
        } else {
          if (typeof instance.componentDidUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Update;
            }
          }
          if (typeof instance.getSnapshotBeforeUpdate === "function") {
            if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
              workInProgress2.flags |= Snapshot;
            }
          }
          workInProgress2.memoizedProps = newProps;
          workInProgress2.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
      }
      var didWarnAboutMaps;
      var didWarnAboutGenerators;
      var didWarnAboutStringRefs;
      var ownerHasKeyUseWarning;
      var ownerHasFunctionTypeWarning;
      var warnForMissingKey = function(child, returnFiber) {
      };
      {
        didWarnAboutMaps = false;
        didWarnAboutGenerators = false;
        didWarnAboutStringRefs = {};
        ownerHasKeyUseWarning = {};
        ownerHasFunctionTypeWarning = {};
        warnForMissingKey = function(child, returnFiber) {
          if (child === null || typeof child !== "object") {
            return;
          }
          if (!child._store || child._store.validated || child.key != null) {
            return;
          }
          if (typeof child._store !== "object") {
            throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
          }
          child._store.validated = true;
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasKeyUseWarning[componentName]) {
            return;
          }
          ownerHasKeyUseWarning[componentName] = true;
          error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
        };
      }
      function coerceRef(returnFiber, current2, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
          {
            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (!didWarnAboutStringRefs[componentName]) {
                {
                  error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                }
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
          if (element._owner) {
            var owner = element._owner;
            var inst;
            if (owner) {
              var ownerFiber = owner;
              if (ownerFiber.tag !== ClassComponent) {
                throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
              }
              inst = ownerFiber.stateNode;
            }
            if (!inst) {
              throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
            }
            var resolvedInst = inst;
            {
              checkPropStringCoercion(mixedRef, "ref");
            }
            var stringRef = "" + mixedRef;
            if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
              return current2.ref;
            }
            var ref = function(value) {
              var refs = resolvedInst.refs;
              if (refs === emptyRefsObject) {
                refs = resolvedInst.refs = {};
              }
              if (value === null) {
                delete refs[stringRef];
              } else {
                refs[stringRef] = value;
              }
            };
            ref._stringRef = stringRef;
            return ref;
          } else {
            if (typeof mixedRef !== "string") {
              throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
            }
            if (!element._owner) {
              throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
            }
          }
        }
        return mixedRef;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
      }
      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentNameFromFiber(returnFiber) || "Component";
          if (ownerHasFunctionTypeWarning[componentName]) {
            return;
          }
          ownerHasFunctionTypeWarning[componentName] = true;
          error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
        }
      }
      function resolveLazy(lazyType) {
        var payload = lazyType._payload;
        var init = lazyType._init;
        return init(payload);
      }
      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            return;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            return null;
          }
          var childToDelete = currentFirstChild;
          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete);
            childToDelete = childToDelete.sibling;
          }
          return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
          var existingChildren = new Map;
          var existingChild = currentFirstChild;
          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild);
            } else {
              existingChildren.set(existingChild.index, existingChild);
            }
            existingChild = existingChild.sibling;
          }
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          var clone = createWorkInProgress(fiber, pendingProps);
          clone.index = 0;
          clone.sibling = null;
          return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects) {
            newFiber.flags |= Forked;
            return lastPlacedIndex;
          }
          var current2 = newFiber.alternate;
          if (current2 !== null) {
            var oldIndex = current2.index;
            if (oldIndex < lastPlacedIndex) {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            } else {
              return oldIndex;
            }
          } else {
            newFiber.flags |= Placement;
            return lastPlacedIndex;
          }
        }
        function placeSingleChild(newFiber) {
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.flags |= Placement;
          }
          return newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (current2 === null || current2.tag !== HostText) {
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, textContent);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateElement(returnFiber, current2, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE) {
            return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
          }
          if (current2 !== null) {
            if (current2.elementType === elementType || isCompatibleFamilyForHotReloading(current2, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
              var existing = useFiber(current2, element.props);
              existing.ref = coerceRef(returnFiber, current2, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            }
          }
          var created = createFiberFromElement(element, returnFiber.mode, lanes);
          created.ref = coerceRef(returnFiber, current2, element);
          created.return = returnFiber;
          return created;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, portal.children || []);
            existing.return = returnFiber;
            return existing;
          }
        }
        function updateFragment2(returnFiber, current2, fragment, lanes, key) {
          if (current2 === null || current2.tag !== Fragment) {
            var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
            created.return = returnFiber;
            return created;
          } else {
            var existing = useFiber(current2, fragment);
            existing.return = returnFiber;
            return existing;
          }
        }
        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }
              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                _created2.return = returnFiber;
                return _created2;
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init = newChild._init;
                return createChild(returnFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
              _created3.return = returnFiber;
              return _created3;
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = oldFiber !== null ? oldFiber.key : null;
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            if (key !== null) {
              return null;
            }
            return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                if (newChild.key === key) {
                  return updateElement(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_PORTAL_TYPE: {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, lanes);
                } else {
                  return null;
                }
              }
              case REACT_LAZY_TYPE: {
                var payload = newChild._payload;
                var init = newChild._init;
                return updateSlot(returnFiber, oldFiber, init(payload), lanes);
              }
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null;
              }
              return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            var matchedFiber = existingChildren.get(newIdx) || null;
            return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updateElement(returnFiber, _matchedFiber, newChild, lanes);
              }
              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
              }
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init = newChild._init;
                return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
            }
            if (isArray(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null;
              return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return null;
        }
        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child !== "object" || child === null) {
              return knownKeys;
            }
            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber);
                var key = child.key;
                if (typeof key !== "string") {
                  break;
                }
                if (knownKeys === null) {
                  knownKeys = new Set;
                  knownKeys.add(key);
                  break;
                }
                if (!knownKeys.has(key)) {
                  knownKeys.add(key);
                  break;
                }
                error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be " + "duplicated and/or omitted \u2014 the behavior is unsupported and " + "could change in a future version.", key);
                break;
              case REACT_LAZY_TYPE:
                var payload = child._payload;
                var init = child._init;
                warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                break;
            }
          }
          return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          {
            var knownKeys = null;
            for (var i = 0;i < newChildren.length; i++) {
              var child = newChildren[i];
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          for (;oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (;newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
              if (_newFiber === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber;
              } else {
                previousNewFiber.sibling = _newFiber;
              }
              previousNewFiber = _newFiber;
            }
            if (getIsHydrating()) {
              var _numberOfForks = newIdx;
              pushTreeFork(returnFiber, _numberOfForks);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (;newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2;
              } else {
                previousNewFiber.sibling = _newFiber2;
              }
              previousNewFiber = _newFiber2;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks2 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks2);
          }
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
          var iteratorFn = getIteratorFn(newChildrenIterable);
          if (typeof iteratorFn !== "function") {
            throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
              if (!didWarnAboutGenerators) {
                error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
              }
              didWarnAboutGenerators = true;
            }
            if (newChildrenIterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
              }
              didWarnAboutMaps = true;
            }
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
              var knownKeys = null;
              var _step = _newChildren.next();
              for (;!_step.done; _step = _newChildren.next()) {
                var child = _step.value;
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
          }
          var newChildren = iteratorFn.call(newChildrenIterable);
          if (newChildren == null) {
            throw new Error("An iterable object provided no iterator.");
          }
          var resultingFirstChild = null;
          var previousNewFiber = null;
          var oldFiber = currentFirstChild;
          var lastPlacedIndex = 0;
          var newIdx = 0;
          var nextOldFiber = null;
          var step = newChildren.next();
          for (;oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber;
              oldFiber = null;
            } else {
              nextOldFiber = oldFiber.sibling;
            }
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (newFiber === null) {
              if (oldFiber === null) {
                oldFiber = nextOldFiber;
              }
              break;
            }
            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                deleteChild(returnFiber, oldFiber);
              }
            }
            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
            if (previousNewFiber === null) {
              resultingFirstChild = newFiber;
            } else {
              previousNewFiber.sibling = newFiber;
            }
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done) {
            deleteRemainingChildren(returnFiber, oldFiber);
            if (getIsHydrating()) {
              var numberOfForks = newIdx;
              pushTreeFork(returnFiber, numberOfForks);
            }
            return resultingFirstChild;
          }
          if (oldFiber === null) {
            for (;!step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes);
              if (_newFiber3 === null) {
                continue;
              }
              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber3;
              } else {
                previousNewFiber.sibling = _newFiber3;
              }
              previousNewFiber = _newFiber3;
            }
            if (getIsHydrating()) {
              var _numberOfForks3 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks3);
            }
            return resultingFirstChild;
          }
          var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
          for (;!step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                }
              }
              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4;
              } else {
                previousNewFiber.sibling = _newFiber4;
              }
              previousNewFiber = _newFiber4;
            }
          }
          if (shouldTrackSideEffects) {
            existingChildren.forEach(function(child2) {
              return deleteChild(returnFiber, child2);
            });
          }
          if (getIsHydrating()) {
            var _numberOfForks4 = newIdx;
            pushTreeFork(returnFiber, _numberOfForks4);
          }
          return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
          if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
            var existing = useFiber(currentFirstChild, textContent);
            existing.return = returnFiber;
            return existing;
          }
          deleteRemainingChildren(returnFiber, currentFirstChild);
          var created = createFiberFromText(textContent, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
          var key = element.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                if (child.tag === Fragment) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, element.props.children);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              } else {
                if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var _existing = useFiber(child, element.props);
                  _existing.ref = coerceRef(returnFiber, child, element);
                  _existing.return = returnFiber;
                  {
                    _existing._debugSource = element._source;
                    _existing._debugOwner = element._owner;
                  }
                  return _existing;
                }
              }
              deleteRemainingChildren(returnFiber, child);
              break;
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
            created.return = returnFiber;
            return created;
          } else {
            var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
            _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
            _created4.return = returnFiber;
            return _created4;
          }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
          var key = portal.key;
          var child = currentFirstChild;
          while (child !== null) {
            if (child.key === key) {
              if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, portal.children || []);
                existing.return = returnFiber;
                return existing;
              } else {
                deleteRemainingChildren(returnFiber, child);
                break;
              }
            } else {
              deleteChild(returnFiber, child);
            }
            child = child.sibling;
          }
          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
          created.return = returnFiber;
          return created;
        }
        function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
          var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children;
          }
          if (typeof newChild === "object" && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_PORTAL_TYPE:
                return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              case REACT_LAZY_TYPE:
                var payload = newChild._payload;
                var init = newChild._init;
                return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
            }
            if (isArray(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
          }
          {
            if (typeof newChild === "function") {
              warnOnFunctionType(returnFiber);
            }
          }
          return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers2;
      }
      var reconcileChildFibers = ChildReconciler(true);
      var mountChildFibers = ChildReconciler(false);
      function cloneChildFibers(current2, workInProgress2) {
        if (current2 !== null && workInProgress2.child !== current2.child) {
          throw new Error("Resuming work not yet implemented.");
        }
        if (workInProgress2.child === null) {
          return;
        }
        var currentChild = workInProgress2.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress2.child = newChild;
        newChild.return = workInProgress2;
        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling;
          newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
          newChild.return = workInProgress2;
        }
        newChild.sibling = null;
      }
      function resetChildFibers(workInProgress2, lanes) {
        var child = workInProgress2.child;
        while (child !== null) {
          resetWorkInProgress(child, lanes);
          child = child.sibling;
        }
      }
      var NO_CONTEXT = {};
      var contextStackCursor$1 = createCursor(NO_CONTEXT);
      var contextFiberStackCursor = createCursor(NO_CONTEXT);
      var rootInstanceStackCursor = createCursor(NO_CONTEXT);
      function requiredContext(c) {
        if (c === NO_CONTEXT) {
          throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        }
        return c;
      }
      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
      }
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
      }
      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
      }
      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
      }
      function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type);
        if (context === nextContext) {
          return;
        }
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
      }
      function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) {
          return;
        }
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
      }
      var DefaultSuspenseContext = 0;
      var SubtreeSuspenseContextMask = 1;
      var InvisibleParentSuspenseContext = 1;
      var ForceSuspenseFallback = 2;
      var suspenseStackCursor = createCursor(DefaultSuspenseContext);
      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
      }
      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
      }
      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
      }
      function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
        var nextState = workInProgress2.memoizedState;
        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            return true;
          }
          return false;
        }
        var props = workInProgress2.memoizedProps;
        {
          return true;
        }
      }
      function findFirstSuspended(row) {
        var node = row;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              var dehydrated = state.dehydrated;
              if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                return node;
              }
            }
          } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== undefined) {
            var didSuspend = (node.flags & DidCapture) !== NoFlags;
            if (didSuspend) {
              return node;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === row) {
            return null;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === row) {
              return null;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      var NoFlags$1 = 0;
      var HasEffect = 1;
      var Insertion = 2;
      var Layout = 4;
      var Passive$1 = 8;
      var workInProgressSources = [];
      function resetWorkInProgressVersions() {
        for (var i = 0;i < workInProgressSources.length; i++) {
          var mutableSource = workInProgressSources[i];
          {
            mutableSource._workInProgressVersionPrimary = null;
          }
        }
        workInProgressSources.length = 0;
      }
      function registerMutableSourceForHydration(root2, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source);
        if (root2.mutableSourceEagerHydrationData == null) {
          root2.mutableSourceEagerHydrationData = [mutableSource, version];
        } else {
          root2.mutableSourceEagerHydrationData.push(mutableSource, version);
        }
      }
      var { ReactCurrentDispatcher: ReactCurrentDispatcher$1, ReactCurrentBatchConfig: ReactCurrentBatchConfig$2 } = ReactSharedInternals;
      var didWarnAboutMismatchedHooksForComponent;
      var didWarnUncachedGetSnapshot;
      {
        didWarnAboutMismatchedHooksForComponent = new Set;
      }
      var renderLanes = NoLanes;
      var currentlyRenderingFiber$1 = null;
      var currentHook = null;
      var workInProgressHook = null;
      var didScheduleRenderPhaseUpdate = false;
      var didScheduleRenderPhaseUpdateDuringThisPass = false;
      var localIdCounter = 0;
      var globalClientIdCounter = 0;
      var RE_RENDER_LIMIT = 25;
      var currentHookNameInDev = null;
      var hookTypesDev = null;
      var hookTypesUpdateIndexDev = -1;
      var ignorePreviousDependencies = false;
      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev === null) {
            hookTypesDev = [hookName];
          } else {
            hookTypesDev.push(hookName);
          }
        }
      }
      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev;
          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName);
            }
          }
        }
      }
      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== undefined && deps !== null && !isArray(deps)) {
            error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
          }
        }
      }
      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
              var table = "";
              var secondColumnStart = 30;
              for (var i = 0;i <= hookTypesUpdateIndexDev; i++) {
                var oldHookName = hookTypesDev[i];
                var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                var row = i + 1 + ". " + oldHookName;
                while (row.length < secondColumnStart) {
                  row += " ";
                }
                row += newHookName + "\n";
                table += row;
              }
              error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
          }
        }
      }
      function throwInvalidHookError() {
        throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            return false;
          }
        }
        if (prevDeps === null) {
          {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
          }
          return false;
        }
        {
          if (nextDeps.length !== prevDeps.length) {
            error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
          }
        }
        for (var i = 0;i < prevDeps.length && i < nextDeps.length; i++) {
          if (objectIs(nextDeps[i], prevDeps[i])) {
            continue;
          }
          return false;
        }
        return true;
      }
      function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress2;
        {
          hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
          hookTypesUpdateIndexDev = -1;
          ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
        }
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.lanes = NoLanes;
        {
          if (current2 !== null && current2.memoizedState !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          } else if (hookTypesDev !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
          } else {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
          }
        }
        var children = Component2(props, secondArg);
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          var numberOfReRenders = 0;
          do {
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
            if (numberOfReRenders >= RE_RENDER_LIMIT) {
              throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
            }
            numberOfReRenders += 1;
            {
              ignorePreviousDependencies = false;
            }
            currentHook = null;
            workInProgressHook = null;
            workInProgress2.updateQueue = null;
            {
              hookTypesUpdateIndexDev = -1;
            }
            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
            children = Component2(props, secondArg);
          } while (didScheduleRenderPhaseUpdateDuringThisPass);
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        {
          workInProgress2._debugHookTypes = hookTypesDev;
        }
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          currentHookNameInDev = null;
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && (current2.mode & ConcurrentMode) !== NoMode) {
            error("Internal React error: Expected static flag was missing. Please notify the React team.");
          }
        }
        didScheduleRenderPhaseUpdate = false;
        if (didRenderTooFewHooks) {
          throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        }
        return children;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        localIdCounter = 0;
        return didRenderIdHook;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue;
        if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
          workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
        } else {
          workInProgress2.flags &= ~(Passive | Update);
        }
        current2.lanes = removeLanes(current2.lanes, lanes);
      }
      function resetHooksAfterThrow() {
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
          var hook = currentlyRenderingFiber$1.memoizedState;
          while (hook !== null) {
            var queue = hook.queue;
            if (queue !== null) {
              queue.pending = null;
            }
            hook = hook.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        {
          hookTypesDev = null;
          hookTypesUpdateIndexDev = -1;
          currentHookNameInDev = null;
          isUpdatingOpaqueValueInRenderPhase = false;
        }
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        localIdCounter = 0;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        if (workInProgressHook === null) {
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        } else {
          workInProgressHook = workInProgressHook.next = hook;
        }
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        var nextCurrentHook;
        if (currentHook === null) {
          var current2 = currentlyRenderingFiber$1.alternate;
          if (current2 !== null) {
            nextCurrentHook = current2.memoizedState;
          } else {
            nextCurrentHook = null;
          }
        } else {
          nextCurrentHook = currentHook.next;
        }
        var nextWorkInProgressHook;
        if (workInProgressHook === null) {
          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        } else {
          nextWorkInProgressHook = workInProgressHook.next;
        }
        if (nextWorkInProgressHook !== null) {
          workInProgressHook = nextWorkInProgressHook;
          nextWorkInProgressHook = workInProgressHook.next;
          currentHook = nextCurrentHook;
        } else {
          if (nextCurrentHook === null) {
            throw new Error("Rendered more hooks than during the previous render.");
          }
          currentHook = nextCurrentHook;
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
          } else {
            workInProgressHook = workInProgressHook.next = newHook;
          }
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null,
          stores: null
        };
      }
      function basicStateReducer(state, action) {
        return typeof action === "function" ? action(state) : action;
      }
      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) {
          initialState = init(initialArg);
        } else {
          initialState = initialArg;
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue.lastRenderedReducer = reducer;
        var current2 = currentHook;
        var baseQueue = current2.baseQueue;
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
          if (baseQueue !== null) {
            var baseFirst = baseQueue.next;
            var pendingFirst = pendingQueue.next;
            baseQueue.next = pendingFirst;
            pendingQueue.next = baseFirst;
          }
          {
            if (current2.baseQueue !== baseQueue) {
              error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            }
          }
          current2.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }
        if (baseQueue !== null) {
          var first = baseQueue.next;
          var newState = current2.baseState;
          var newBaseState = null;
          var newBaseQueueFirst = null;
          var newBaseQueueLast = null;
          var update = first;
          do {
            var updateLane = update.lane;
            if (!isSubsetOfLanes(renderLanes, updateLane)) {
              var clone = {
                lane: updateLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              };
              if (newBaseQueueLast === null) {
                newBaseQueueFirst = newBaseQueueLast = clone;
                newBaseState = newState;
              } else {
                newBaseQueueLast = newBaseQueueLast.next = clone;
              }
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
              markSkippedUpdateLanes(updateLane);
            } else {
              if (newBaseQueueLast !== null) {
                var _clone = {
                  lane: NoLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                newBaseQueueLast = newBaseQueueLast.next = _clone;
              }
              if (update.hasEagerState) {
                newState = update.eagerState;
              } else {
                var action = update.action;
                newState = reducer(newState, action);
              }
            }
            update = update.next;
          } while (update !== null && update !== first);
          if (newBaseQueueLast === null) {
            newBaseState = newState;
          } else {
            newBaseQueueLast.next = newBaseQueueFirst;
          }
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          hook.baseState = newBaseState;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = newState;
        }
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
          var interleaved = lastInterleaved;
          do {
            var interleavedLane = interleaved.lane;
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
            markSkippedUpdateLanes(interleavedLane);
            interleaved = interleaved.next;
          } while (interleaved !== lastInterleaved);
        } else if (baseQueue === null) {
          queue.lanes = NoLanes;
        }
        var dispatch = queue.dispatch;
        return [hook.memoizedState, dispatch];
      }
      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) {
          throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
        }
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
          queue.pending = null;
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          var update = firstRenderPhaseUpdate;
          do {
            var action = update.action;
            newState = reducer(newState, action);
            update = update.next;
          } while (update !== firstRenderPhaseUpdate);
          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = newState;
          if (hook.baseQueue === null) {
            hook.baseState = newState;
          }
          queue.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function mountMutableSource(source, getSnapshot, subscribe) {
        {
          return;
        }
      }
      function updateMutableSource(source, getSnapshot, subscribe) {
        {
          return;
        }
      }
      function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = mountWorkInProgressHook();
        var nextSnapshot;
        var isHydrating2 = getIsHydrating();
        if (isHydrating2) {
          if (getServerSnapshot === undefined) {
            throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
          }
          nextSnapshot = getServerSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              if (nextSnapshot !== getServerSnapshot()) {
                error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
        } else {
          nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var root2 = getWorkInProgressRoot();
          if (root2 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root2, renderLanes)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        hook.memoizedState = nextSnapshot;
        var inst = {
          value: nextSnapshot,
          getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
        return nextSnapshot;
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = updateWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        {
          if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
              error("The result of getSnapshot should be cached to avoid an infinite loop");
              didWarnUncachedGetSnapshot = true;
            }
          }
        }
        var prevSnapshot = hook.memoizedState;
        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        if (snapshotChanged) {
          hook.memoizedState = nextSnapshot;
          markWorkInProgressReceivedUpdate();
        }
        var inst = hook.queue;
        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
        if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
          var root2 = getWorkInProgressRoot();
          if (root2 === null) {
            throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
          }
          if (!includesBlockingLane(root2, renderLanes)) {
            pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
          }
        }
        return nextSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
          getSnapshot,
          value: renderedSnapshot
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.stores = [check];
        } else {
          var stores = componentUpdateQueue.stores;
          if (stores === null) {
            componentUpdateQueue.stores = [check];
          } else {
            stores.push(check);
          }
        }
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot;
        if (checkIfSnapshotChanged(inst)) {
          forceStoreRerender(fiber);
        }
      }
      function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        };
        return subscribe(handleStoreChange);
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(prevValue, nextValue);
        } catch (error2) {
          return true;
        }
      }
      function forceStoreRerender(fiber) {
        var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
        }
      }
      function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === "function") {
          initialState = initialState();
        }
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
          pending: null,
          interleaved: null,
          lanes: NoLanes,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [hook.memoizedState, dispatch];
      }
      function updateState(initialState) {
        return updateReducer(basicStateReducer);
      }
      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
      }
      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag,
          create,
          destroy,
          deps,
          next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue();
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var lastEffect = componentUpdateQueue.lastEffect;
          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var firstEffect = lastEffect.next;
            lastEffect.next = effect;
            effect.next = firstEffect;
            componentUpdateQueue.lastEffect = effect;
          }
        }
        return effect;
      }
      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        {
          var _ref2 = {
            current: initialValue
          };
          hook.memoizedState = _ref2;
          return _ref2;
        }
      }
      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
      }
      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState;
          destroy = prevEffect.destroy;
          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps;
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
              return;
            }
          }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
      }
      function mountEffect(create, deps) {
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
        } else {
          return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
        }
      }
      function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
      }
      function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update, Insertion, create, deps);
      }
      function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update, Insertion, create, deps);
      }
      function mountLayoutEffect(create, deps) {
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        return mountEffectImpl(fiberFlags, Layout, create, deps);
      }
      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
      }
      function imperativeHandleEffect(create, ref) {
        if (typeof ref === "function") {
          var refCallback = ref;
          var _inst = create();
          refCallback(_inst);
          return function() {
            refCallback(null);
          };
        } else if (ref !== null && ref !== undefined) {
          var refObject = ref;
          {
            if (!refObject.hasOwnProperty("current")) {
              error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
            }
          }
          var _inst2 = create();
          refObject.current = _inst2;
          return function() {
            refObject.current = null;
          };
        }
      }
      function mountImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        var fiberFlags = Update;
        {
          fiberFlags |= LayoutStatic;
        }
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
          fiberFlags |= MountLayoutDev;
        }
        return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function updateImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== "function") {
            error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
          }
        }
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
      }
      function mountDebugValue(value, formatterFn) {
      }
      var updateDebugValue = mountDebugValue;
      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        hook.memoizedState = [callback, nextDeps];
        return callback;
      }
      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1];
            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0];
            }
          }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [nextValue, nextDeps];
        return nextValue;
      }
      function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = value;
        return value;
      }
      function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        var resolvedCurrentHook = currentHook;
        var prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
      }
      function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null) {
          hook.memoizedState = value;
          return value;
        } else {
          var prevValue = currentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
      }
      function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
          if (!objectIs(value, prevValue)) {
            var deferredLane = claimNextTransitionLane();
            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
            markSkippedUpdateLanes(deferredLane);
            hook.baseState = true;
          }
          return prevValue;
        } else {
          if (hook.baseState) {
            hook.baseState = false;
            markWorkInProgressReceivedUpdate();
          }
          hook.memoizedState = value;
          return value;
        }
      }
      function startTransition(setPending, callback, options2) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
        setPending(true);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        {
          ReactCurrentBatchConfig$2.transition._updatedFibers = new Set;
        }
        try {
          setPending(false);
          callback();
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$2.transition = prevTransition;
          {
            if (prevTransition === null && currentTransition._updatedFibers) {
              var updatedFibersCount = currentTransition._updatedFibers.size;
              if (updatedFibersCount > 10) {
                warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
              }
              currentTransition._updatedFibers.clear();
            }
          }
        }
      }
      function mountTransition() {
        var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
        var start = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [isPending, start];
      }
      function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [isPending, start];
      }
      function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [isPending, start];
      }
      var isUpdatingOpaqueValueInRenderPhase = false;
      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        {
          return isUpdatingOpaqueValueInRenderPhase;
        }
      }
      function mountId() {
        var hook = mountWorkInProgressHook();
        var root2 = getWorkInProgressRoot();
        var identifierPrefix = root2.identifierPrefix;
        var id;
        if (getIsHydrating()) {
          var treeId = getTreeId();
          id = ":" + identifierPrefix + "R" + treeId;
          var localId = localIdCounter++;
          if (localId > 0) {
            id += "H" + localId.toString(32);
          }
          id += ":";
        } else {
          var globalClientId = globalClientIdCounter++;
          id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
        }
        hook.memoizedState = id;
        return id;
      }
      function updateId() {
        var hook = updateWorkInProgressHook();
        var id = hook.memoizedState;
        return id;
      }
      function dispatchReducerAction(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue, update);
        } else {
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function dispatchSetState(fiber, queue, action) {
        {
          if (typeof arguments[3] === "function") {
            error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
          }
        }
        var lane = requestUpdateLane(fiber);
        var update = {
          lane,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          enqueueRenderPhaseUpdate(queue, update);
        } else {
          var alternate = fiber.alternate;
          if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
            var lastRenderedReducer = queue.lastRenderedReducer;
            if (lastRenderedReducer !== null) {
              var prevDispatcher;
              {
                prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              }
              try {
                var currentState = queue.lastRenderedState;
                var eagerState = lastRenderedReducer(currentState, action);
                update.hasEagerState = true;
                update.eagerState = eagerState;
                if (objectIs(eagerState, currentState)) {
                  enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                  return;
                }
              } catch (error2) {
              } finally {
                {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              }
            }
          }
          var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            entangleTransitionUpdate(root2, queue, lane);
          }
        }
        markUpdateInDevTools(fiber, lane);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
      }
      function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        if (pending === null) {
          update.next = update;
        } else {
          update.next = pending.next;
          pending.next = update;
        }
        queue.pending = update;
      }
      function entangleTransitionUpdate(root2, queue, lane) {
        if (isTransitionLane(lane)) {
          var queueLanes = queue.lanes;
          queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
          var newQueueLanes = mergeLanes(queueLanes, lane);
          queue.lanes = newQueueLanes;
          markRootEntangled(root2, newQueueLanes);
        }
      }
      function markUpdateInDevTools(fiber, lane, action) {
        {
          markStateUpdateScheduled(fiber, lane);
        }
      }
      var ContextOnlyDispatcher = {
        readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
      };
      var HooksDispatcherOnMountInDEV = null;
      var HooksDispatcherOnMountWithHookTypesInDEV = null;
      var HooksDispatcherOnUpdateInDEV = null;
      var HooksDispatcherOnRerenderInDEV = null;
      var InvalidNestedHooksDispatcherOnMountInDEV = null;
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
      var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
      {
        var warnInvalidContextAccess = function() {
          error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        };
        var warnInvalidHookAccess = function() {
          error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
        };
        HooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            mountHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        HooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
              return mountState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
          },
          useCallback: function(callback, deps) {
            currentHookNameInDev = "useCallback";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
          },
          useContext: function(context) {
            currentHookNameInDev = "useContext";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
          },
          useEffect: function(create, deps) {
            currentHookNameInDev = "useEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
          },
          useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = "useImperativeHandle";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
          },
          useInsertionEffect: function(create, deps) {
            currentHookNameInDev = "useInsertionEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
          },
          useLayoutEffect: function(create, deps) {
            currentHookNameInDev = "useLayoutEffect";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
          },
          useMemo: function(create, deps) {
            currentHookNameInDev = "useMemo";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return updateMemo(create, deps);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = "useReducer";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderReducer(reducer, initialArg, init);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useRef: function(initialValue) {
            currentHookNameInDev = "useRef";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
          },
          useState: function(initialState) {
            currentHookNameInDev = "useState";
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
              return rerenderState(initialState);
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher;
            }
          },
          useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = "useDebugValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
          },
          useDeferredValue: function(value) {
            currentHookNameInDev = "useDeferredValue";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
          },
          useTransition: function() {
            currentHookNameInDev = "useTransition";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
          },
          useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = "useMutableSource";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
          },
          useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = "useSyncExternalStore";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
          },
          useId: function() {
            currentHookNameInDev = "useId";
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
          },
          unstable_isNewReconciler: enableNewReconciler
        };
      }
      var now$1 = Scheduler.unstable_now;
      var commitTime = 0;
      var layoutEffectStartTime = -1;
      var profilerStartTime = -1;
      var passiveEffectStartTime = -1;
      var currentUpdateIsNested = false;
      var nestedUpdateScheduled = false;
      function isCurrentUpdateNested() {
        return currentUpdateIsNested;
      }
      function markNestedUpdateScheduled() {
        {
          nestedUpdateScheduled = true;
        }
      }
      function resetNestedUpdateFlag() {
        {
          currentUpdateIsNested = false;
          nestedUpdateScheduled = false;
        }
      }
      function syncNestedUpdateFlag() {
        {
          currentUpdateIsNested = nestedUpdateScheduled;
          nestedUpdateScheduled = false;
        }
      }
      function getCommitTime() {
        return commitTime;
      }
      function recordCommitTime() {
        commitTime = now$1();
      }
      function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$1();
        }
      }
      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
      }
      function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime;
          fiber.actualDuration += elapsedTime;
          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime;
          }
          profilerStartTime = -1;
        }
      }
      function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
          var elapsedTime = now$1() - layoutEffectStartTime;
          layoutEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                root2.effectDuration += elapsedTime;
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                parentStateNode.effectDuration += elapsedTime;
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
          var elapsedTime = now$1() - passiveEffectStartTime;
          passiveEffectStartTime = -1;
          var parentFiber = fiber.return;
          while (parentFiber !== null) {
            switch (parentFiber.tag) {
              case HostRoot:
                var root2 = parentFiber.stateNode;
                if (root2 !== null) {
                  root2.passiveEffectDuration += elapsedTime;
                }
                return;
              case Profiler:
                var parentStateNode = parentFiber.stateNode;
                if (parentStateNode !== null) {
                  parentStateNode.passiveEffectDuration += elapsedTime;
                }
                return;
            }
            parentFiber = parentFiber.return;
          }
        }
      }
      function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
      }
      function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
      }
      function transferActualDuration(fiber) {
        var child = fiber.child;
        while (child) {
          fiber.actualDuration += child.actualDuration;
          child = child.sibling;
        }
      }
      function createCapturedValueAtFiber(value, source) {
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source),
          digest: null
        };
      }
      function createCapturedValue(value, digest, stack) {
        return {
          value,
          source: null,
          stack: stack != null ? stack : null,
          digest: digest != null ? digest : null
        };
      }
      function showErrorDialog(boundary, errorInfo) {
        return true;
      }
      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog(boundary, errorInfo);
          if (logError === false) {
            return;
          }
          var error2 = errorInfo.value;
          if (true) {
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : "";
            if (error2 != null && error2._suppressLogging) {
              if (boundary.tag === ClassComponent) {
                return;
              }
              console["error"](error2);
            }
            var componentName = source ? getComponentNameFromFiber(source) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
            var errorBoundaryMessage;
            if (boundary.tag === HostRoot) {
              errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            } else {
              var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
              errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            }
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console["error"](combinedMessage);
          } else {
          }
        } catch (e) {
          setTimeout(function() {
            throw e;
          });
        }
      }
      var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        update.payload = {
          element: null
        };
        var error2 = errorInfo.value;
        update.callback = function() {
          onUncaughtError(error2);
          logCapturedError(fiber, errorInfo);
        };
        return update;
      }
      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === "function") {
          var error$1 = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error$1);
          };
          update.callback = function() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
          };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === "function") {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber);
            }
            logCapturedError(fiber, errorInfo);
            if (typeof getDerivedStateFromError !== "function") {
              markLegacyErrorBoundaryAsFailed(this);
            }
            var error$12 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$12, {
              componentStack: stack !== null ? stack : ""
            });
            {
              if (typeof getDerivedStateFromError !== "function") {
                if (!includesSomeLane(fiber.lanes, SyncLane)) {
                  error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                }
              }
            }
          };
        }
        return update;
      }
      function attachPingListener(root2, wakeable, lanes) {
        var pingCache = root2.pingCache;
        var threadIDs;
        if (pingCache === null) {
          pingCache = root2.pingCache = new PossiblyWeakMap$1;
          threadIDs = new Set;
          pingCache.set(wakeable, threadIDs);
        } else {
          threadIDs = pingCache.get(wakeable);
          if (threadIDs === undefined) {
            threadIDs = new Set;
            pingCache.set(wakeable, threadIDs);
          }
        }
        if (!threadIDs.has(lanes)) {
          threadIDs.add(lanes);
          var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, lanes);
            }
          }
          wakeable.then(ping, ping);
        }
      }
      function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
          var updateQueue = new Set;
          updateQueue.add(wakeable);
          suspenseBoundary.updateQueue = updateQueue;
        } else {
          wakeables.add(wakeable);
        }
      }
      function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
          var currentSource = sourceFiber.alternate;
          if (currentSource) {
            sourceFiber.updateQueue = currentSource.updateQueue;
            sourceFiber.memoizedState = currentSource.memoizedState;
            sourceFiber.lanes = currentSource.lanes;
          } else {
            sourceFiber.updateQueue = null;
            sourceFiber.memoizedState = null;
          }
        }
      }
      function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node = returnFiber;
        do {
          if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
            return node;
          }
          node = node.return;
        } while (node !== null);
        return null;
      }
      function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
          if (suspenseBoundary === returnFiber) {
            suspenseBoundary.flags |= ShouldCapture;
          } else {
            suspenseBoundary.flags |= DidCapture;
            sourceFiber.flags |= ForceUpdateForLegacySuspense;
            sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
            if (sourceFiber.tag === ClassComponent) {
              var currentSourceFiber = sourceFiber.alternate;
              if (currentSourceFiber === null) {
                sourceFiber.tag = IncompleteClassComponent;
              } else {
                var update = createUpdate(NoTimestamp, SyncLane);
                update.tag = ForceUpdate;
                enqueueUpdate(sourceFiber, update, SyncLane);
              }
            }
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
          }
          return suspenseBoundary;
        }
        suspenseBoundary.flags |= ShouldCapture;
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
      }
      function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= Incomplete;
        {
          if (isDevToolsPresent) {
            restorePendingUpdaters(root2, rootRenderLanes);
          }
        }
        if (value !== null && typeof value === "object" && typeof value.then === "function") {
          var wakeable = value;
          resetSuspendedComponent(sourceFiber);
          {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
            }
          }
          var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
          if (suspenseBoundary !== null) {
            suspenseBoundary.flags &= ~ForceClientRender;
            markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
            if (suspenseBoundary.mode & ConcurrentMode) {
              attachPingListener(root2, wakeable, rootRenderLanes);
            }
            attachRetryListener(suspenseBoundary, root2, wakeable);
            return;
          } else {
            if (!includesSyncLane(rootRenderLanes)) {
              attachPingListener(root2, wakeable, rootRenderLanes);
              renderDidSuspendDelayIfPossible();
              return;
            }
            var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
            value = uncaughtSuspenseError;
          }
        } else {
          if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (_suspenseBoundary !== null) {
              if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                _suspenseBoundary.flags |= ForceClientRender;
              }
              markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
              return;
            }
          }
        }
        value = createCapturedValueAtFiber(value, sourceFiber);
        renderDidError(value);
        var workInProgress2 = returnFiber;
        do {
          switch (workInProgress2.tag) {
            case HostRoot: {
              var _errorInfo = value;
              workInProgress2.flags |= ShouldCapture;
              var lane = pickArbitraryLane(rootRenderLanes);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
              enqueueCapturedUpdate(workInProgress2, update);
              return;
            }
            case ClassComponent:
              var errorInfo = value;
              var ctor = workInProgress2.type;
              var instance = workInProgress2.stateNode;
              if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                workInProgress2.flags |= ShouldCapture;
                var _lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              break;
          }
          workInProgress2 = workInProgress2.return;
        } while (workInProgress2 !== null);
      }
      function getSuspendedCache() {
        {
          return null;
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var didReceiveUpdate = false;
      var didWarnAboutBadClass;
      var didWarnAboutModulePatternComponent;
      var didWarnAboutContextTypeOnFunctionComponent;
      var didWarnAboutGetDerivedStateOnFunctionComponent;
      var didWarnAboutFunctionRefs;
      var didWarnAboutReassigningProps;
      var didWarnAboutRevealOrder;
      var didWarnAboutTailOptions;
      {
        didWarnAboutBadClass = {};
        didWarnAboutModulePatternComponent = {};
        didWarnAboutContextTypeOnFunctionComponent = {};
        didWarnAboutGetDerivedStateOnFunctionComponent = {};
        didWarnAboutFunctionRefs = {};
        didWarnAboutReassigningProps = false;
        didWarnAboutRevealOrder = {};
        didWarnAboutTailOptions = {};
      }
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        if (current2 === null) {
          workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
        }
      }
      function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
      }
      function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component2.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
            }
          }
        }
        var render2 = Component2.render;
        var ref = workInProgress2.ref;
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
          hasId = checkDidRenderIdHook();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        if (current2 === null) {
          var type = Component2.type;
          if (isSimpleFunctionComponent(type) && Component2.compare === null && Component2.defaultProps === undefined) {
            var resolvedType = type;
            {
              resolvedType = resolveFunctionForHotReloading(type);
            }
            workInProgress2.tag = SimpleMemoComponent;
            workInProgress2.type = resolvedType;
            {
              validateFunctionComponentInDev(workInProgress2, type);
            }
            return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
          }
          {
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(type));
            }
          }
          var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
          child.ref = workInProgress2.ref;
          child.return = workInProgress2;
          workInProgress2.child = child;
          return child;
        }
        {
          var _type = Component2.type;
          var _innerPropTypes = _type.propTypes;
          if (_innerPropTypes) {
            checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentNameFromType(_type));
          }
        }
        var currentChild = current2.child;
        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
        if (!hasScheduledUpdateOrContext) {
          var prevProps = currentChild.memoizedProps;
          var compare = Component2.compare;
          compare = compare !== null ? compare : shallowEqual;
          if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
        }
        workInProgress2.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress2.ref;
        newChild.return = workInProgress2;
        workInProgress2.child = newChild;
        return newChild;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var outerMemoType = workInProgress2.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              var lazyComponent = outerMemoType;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                outerMemoType = init(payload);
              } catch (x) {
                outerMemoType = null;
              }
              var outerPropTypes = outerMemoType && outerMemoType.propTypes;
              if (outerPropTypes) {
                checkPropTypes(outerPropTypes, nextProps, "prop", getComponentNameFromType(outerMemoType));
              }
            }
          }
        }
        if (current2 !== null) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
            didReceiveUpdate = false;
            workInProgress2.pendingProps = nextProps = prevProps;
            if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
              workInProgress2.lanes = current2.lanes;
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            }
          }
        }
        return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current2 !== null ? current2.memoizedState : null;
        if (nextProps.mode === "hidden" || enableLegacyHidden) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            var nextState = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = nextState;
            pushRenderLanes(workInProgress2, renderLanes2);
          } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
            var spawnedCachePool = null;
            var nextBaseLanes;
            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes;
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
            } else {
              nextBaseLanes = renderLanes2;
            }
            workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
            var _nextState = {
              baseLanes: nextBaseLanes,
              cachePool: spawnedCachePool,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState;
            workInProgress2.updateQueue = null;
            pushRenderLanes(workInProgress2, nextBaseLanes);
            return null;
          } else {
            var _nextState2 = {
              baseLanes: NoLanes,
              cachePool: null,
              transitions: null
            };
            workInProgress2.memoizedState = _nextState2;
            var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
            pushRenderLanes(workInProgress2, subtreeRenderLanes2);
          }
        } else {
          var _subtreeRenderLanes;
          if (prevState !== null) {
            _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
            workInProgress2.memoizedState = null;
          } else {
            _subtreeRenderLanes = renderLanes2;
          }
          pushRenderLanes(workInProgress2, _subtreeRenderLanes);
        }
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateFragment(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateMode(current2, workInProgress2, renderLanes2) {
        var nextChildren = workInProgress2.pendingProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateProfiler(current2, workInProgress2, renderLanes2) {
        {
          workInProgress2.flags |= Update;
          {
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
        }
        var nextProps = workInProgress2.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markRef(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
      }
      function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component2.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
            }
          }
        }
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress2, renderLanes2);
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          if (workInProgress2.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
              nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        if (current2 !== null && !didReceiveUpdate) {
          bailoutHooks(current2, workInProgress2, renderLanes2);
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        if (getIsHydrating() && hasId) {
          pushMaterializedTreeId(workInProgress2);
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
        {
          switch (shouldError(workInProgress2)) {
            case false: {
              var _instance = workInProgress2.stateNode;
              var ctor = workInProgress2.type;
              var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
              var state = tempInstance.state;
              _instance.updater.enqueueSetState(_instance, state, null);
              break;
            }
            case true: {
              workInProgress2.flags |= DidCapture;
              workInProgress2.flags |= ShouldCapture;
              var error$1 = new Error("Simulated error coming from DevTools");
              var lane = pickArbitraryLane(renderLanes2);
              workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
              var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
              enqueueCapturedUpdate(workInProgress2, update);
              break;
            }
          }
          if (workInProgress2.type !== workInProgress2.elementType) {
            var innerPropTypes = Component2.propTypes;
            if (innerPropTypes) {
              checkPropTypes(innerPropTypes, nextProps, "prop", getComponentNameFromType(Component2));
            }
          }
        }
        var hasContext;
        if (isContextProvider(Component2)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var instance = workInProgress2.stateNode;
        var shouldUpdate;
        if (instance === null) {
          resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
          constructClassInstance(workInProgress2, Component2, nextProps);
          mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
          shouldUpdate = true;
        } else if (current2 === null) {
          shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
        } else {
          shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
        }
        var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
        {
          var inst = workInProgress2.stateNode;
          if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) {
              error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
            }
            didWarnAboutReassigningProps = true;
          }
        }
        return nextUnitOfWork;
      }
      function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
        markRef(current2, workInProgress2);
        var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component2, false);
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        var instance = workInProgress2.stateNode;
        ReactCurrentOwner$1.current = workInProgress2;
        var nextChildren;
        if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
          nextChildren = null;
          {
            stopProfilerTimerIfRunning();
          }
        } else {
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance.render();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
        }
        workInProgress2.flags |= PerformedWork;
        if (current2 !== null && didCaptureError) {
          forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        workInProgress2.memoizedState = instance.state;
        if (hasContext) {
          invalidateContextProvider(workInProgress2, Component2, true);
        }
        return workInProgress2.child;
      }
      function pushHostRootContext(workInProgress2) {
        var root2 = workInProgress2.stateNode;
        if (root2.pendingContext) {
          pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
        } else if (root2.context) {
          pushTopLevelContextObject(workInProgress2, root2.context, false);
        }
        pushHostContainer(workInProgress2, root2.containerInfo);
      }
      function updateHostRoot(current2, workInProgress2, renderLanes2) {
        pushHostRootContext(workInProgress2);
        if (current2 === null) {
          throw new Error("Should have a current fiber. This is a bug in React.");
        }
        var nextProps = workInProgress2.pendingProps;
        var prevState = workInProgress2.memoizedState;
        var prevChildren = prevState.element;
        cloneUpdateQueue(current2, workInProgress2);
        processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
        var nextState = workInProgress2.memoizedState;
        var root2 = workInProgress2.stateNode;
        var nextChildren = nextState.element;
        if (prevState.isDehydrated) {
          var overrideState = {
            element: nextChildren,
            isDehydrated: false,
            cache: nextState.cache,
            pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
            transitions: nextState.transitions
          };
          var updateQueue = workInProgress2.updateQueue;
          updateQueue.baseState = overrideState;
          workInProgress2.memoizedState = overrideState;
          if (workInProgress2.flags & ForceClientRender) {
            var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
          } else if (nextChildren !== prevChildren) {
            var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
            return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
          } else {
            enterHydrationState(workInProgress2);
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            var node = child;
            while (node) {
              node.flags = node.flags & ~Placement | Hydrating;
              node = node.sibling;
            }
          }
        } else {
          resetHydrationState();
          if (nextChildren === prevChildren) {
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
        resetHydrationState();
        queueHydrationError(recoverableError);
        workInProgress2.flags |= ForceClientRender;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostComponent(current2, workInProgress2, renderLanes2) {
        pushHostContext(workInProgress2);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        var type = workInProgress2.type;
        var nextProps = workInProgress2.pendingProps;
        var prevProps = current2 !== null ? current2.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) {
          nextChildren = null;
        } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
          workInProgress2.flags |= ContentReset;
        }
        markRef(current2, workInProgress2);
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function updateHostText(current2, workInProgress2) {
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
        }
        return null;
      }
      function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component2 = init(payload);
        workInProgress2.type = Component2;
        var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
        var resolvedProps = resolveDefaultProps(Component2, props);
        var child;
        switch (resolvedTag) {
          case FunctionComponent: {
            {
              validateFunctionComponentInDev(workInProgress2, Component2);
              workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
            }
            child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
            return child;
          }
          case ClassComponent: {
            {
              workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
            }
            child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
            return child;
          }
          case ForwardRef: {
            {
              workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
            }
            child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
            return child;
          }
          case MemoComponent: {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = Component2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentNameFromType(Component2));
                }
              }
            }
            child = updateMemoComponent(null, workInProgress2, Component2, resolveDefaultProps(Component2.type, resolvedProps), renderLanes2);
            return child;
          }
        }
        var hint = "";
        {
          if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
            hint = " Did you wrap a component in React.lazy() more than once?";
          }
        }
        throw new Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". " + ("Lazy element type must resolve to a class or function." + hint));
      }
      function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        workInProgress2.tag = ClassComponent;
        var hasContext;
        if (isContextProvider(Component2)) {
          hasContext = true;
          pushContextProvider(workInProgress2);
        } else {
          hasContext = false;
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        constructClassInstance(workInProgress2, Component2, nextProps);
        mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
        return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
      }
      function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
        var props = workInProgress2.pendingProps;
        var context;
        {
          var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
          context = getMaskedContext(workInProgress2, unmaskedContext);
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var value;
        var hasId;
        {
          markComponentRenderStarted(workInProgress2);
        }
        {
          if (Component2.prototype && typeof Component2.prototype.render === "function") {
            var componentName = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutBadClass[componentName]) {
              error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
              didWarnAboutBadClass[componentName] = true;
            }
          }
          if (workInProgress2.mode & StrictLegacyMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
          }
          setIsRendering(true);
          ReactCurrentOwner$1.current = workInProgress2;
          value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
          hasId = checkDidRenderIdHook();
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        {
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
            var _componentName = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName]) {
              error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
              didWarnAboutModulePatternComponent[_componentName] = true;
            }
          }
        }
        if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === undefined) {
          {
            var _componentName2 = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
              error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
              didWarnAboutModulePatternComponent[_componentName2] = true;
            }
          }
          workInProgress2.tag = ClassComponent;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          var hasContext = false;
          if (isContextProvider(Component2)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          workInProgress2.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
          initializeUpdateQueue(workInProgress2);
          adoptClassInstance(workInProgress2, value);
          mountClassInstance(workInProgress2, Component2, props, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
        } else {
          workInProgress2.tag = FunctionComponent;
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                value = renderWithHooks(null, workInProgress2, Component2, props, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          reconcileChildren(null, workInProgress2, value, renderLanes2);
          {
            validateFunctionComponentInDev(workInProgress2, Component2);
          }
          return workInProgress2.child;
        }
      }
      function validateFunctionComponentInDev(workInProgress2, Component2) {
        {
          if (Component2) {
            if (Component2.childContextTypes) {
              error("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
            }
          }
          if (workInProgress2.ref !== null) {
            var info = "";
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              info += "\n\nCheck the render method of `" + ownerName + "`.";
            }
            var warningKey = ownerName || "";
            var debugSource = workInProgress2._debugSource;
            if (debugSource) {
              warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
            }
            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true;
              error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
          }
          if (typeof Component2.getDerivedStateFromProps === "function") {
            var _componentName3 = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
              error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
              didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
          }
          if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component2) || "Unknown";
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
              error("%s: Function components do not support contextType.", _componentName4);
              didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
          }
        }
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return {
          baseLanes: renderLanes2,
          cachePool: getSuspendedCache(),
          transitions: null
        };
      }
      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
        var cachePool = null;
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
          cachePool,
          transitions: prevOffscreenState.transitions
        };
      }
      function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          var suspenseState = current2.memoizedState;
          if (suspenseState === null) {
            return false;
          }
        }
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
      }
      function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
        return removeLanes(current2.childLanes, renderLanes2);
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        {
          if (shouldSuspend(workInProgress2)) {
            workInProgress2.flags |= DidCapture;
          }
        }
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
          showFallback = true;
          workInProgress2.flags &= ~DidCapture;
        } else {
          if (current2 === null || current2.memoizedState !== null) {
            {
              suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
            }
          }
        }
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress2, suspenseContext);
        if (current2 === null) {
          tryToClaimNextHydratableInstance(workInProgress2);
          var suspenseState = workInProgress2.memoizedState;
          if (suspenseState !== null) {
            var dehydrated = suspenseState.dehydrated;
            if (dehydrated !== null) {
              return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
            }
          }
          var nextPrimaryChildren = nextProps.children;
          var nextFallbackChildren = nextProps.fallback;
          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var primaryChildFragment = workInProgress2.child;
            primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackFragment;
          } else {
            return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
          }
        } else {
          var prevState = current2.memoizedState;
          if (prevState !== null) {
            var _dehydrated = prevState.dehydrated;
            if (_dehydrated !== null) {
              return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
            }
          }
          if (showFallback) {
            var _nextFallbackChildren = nextProps.fallback;
            var _nextPrimaryChildren = nextProps.children;
            var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
            var _primaryChildFragment2 = workInProgress2.child;
            var prevOffscreenState = current2.child.memoizedState;
            _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
            _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackChildFragment;
          } else {
            var _nextPrimaryChildren2 = nextProps.children;
            var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
            workInProgress2.memoizedState = null;
            return _primaryChildFragment3;
          }
        }
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        primaryChildFragment.return = workInProgress2;
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var progressedPrimaryFragment = workInProgress2.child;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = 0;
            primaryChildFragment.treeBaseDuration = 0;
          }
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        } else {
          primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
        }
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
      }
      function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
        return createWorkInProgress(current2, offscreenProps);
      }
      function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
          mode: "visible",
          children: primaryChildren
        });
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          primaryChildFragment.lanes = renderLanes2;
        }
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
          var deletions = workInProgress2.deletions;
          if (deletions === null) {
            workInProgress2.deletions = [currentFallbackChildFragment];
            workInProgress2.flags |= ChildDeletion;
          } else {
            deletions.push(currentFallbackChildFragment);
          }
        }
        workInProgress2.child = primaryChildFragment;
        return primaryChildFragment;
      }
      function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var mode = workInProgress2.mode;
        var currentPrimaryChildFragment = current2.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
          mode: "hidden",
          children: primaryChildren
        };
        var primaryChildFragment;
        if ((mode & ConcurrentMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
          var progressedPrimaryFragment = workInProgress2.child;
          primaryChildFragment = progressedPrimaryFragment;
          primaryChildFragment.childLanes = NoLanes;
          primaryChildFragment.pendingProps = primaryChildProps;
          if (workInProgress2.mode & ProfileMode) {
            primaryChildFragment.actualDuration = 0;
            primaryChildFragment.actualStartTime = -1;
            primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
            primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
          }
          workInProgress2.deletions = null;
        } else {
          primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) {
          fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        } else {
          fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        return fallbackChildFragment;
      }
      function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
        if (recoverableError !== null) {
          queueHydrationError(recoverableError);
        }
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        var nextProps = workInProgress2.pendingProps;
        var primaryChildren = nextProps.children;
        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
        primaryChildFragment.flags |= Placement;
        workInProgress2.memoizedState = null;
        return primaryChildFragment;
      }
      function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
        var fiberMode = workInProgress2.mode;
        var primaryChildProps = {
          mode: "visible",
          children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
        fallbackChildFragment.flags |= Placement;
        primaryChildFragment.return = workInProgress2;
        fallbackChildFragment.return = workInProgress2;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress2.child = primaryChildFragment;
        if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        }
        return fallbackChildFragment;
      }
      function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          {
            error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
          }
          workInProgress2.lanes = laneToLanes(SyncLane);
        } else if (isSuspenseInstanceFallback(suspenseInstance)) {
          workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
        } else {
          workInProgress2.lanes = laneToLanes(OffscreenLane);
        }
        return null;
      }
      function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
        if (!didSuspend) {
          warnIfHydrating();
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, null);
          }
          if (isSuspenseInstanceFallback(suspenseInstance)) {
            var digest, message, stack;
            {
              var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
              digest = _getSuspenseInstanceF.digest;
              message = _getSuspenseInstanceF.message;
              stack = _getSuspenseInstanceF.stack;
            }
            var error2;
            if (message) {
              error2 = new Error(message);
            } else {
              error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
            }
            var capturedValue = createCapturedValue(error2, digest, stack);
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
          }
          var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
          if (didReceiveUpdate || hasContextChanged2) {
            var root2 = getWorkInProgressRoot();
            if (root2 !== null) {
              var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
              if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                suspenseState.retryLane = attemptHydrationAtLane;
                var eventTime = NoTimestamp;
                enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
              }
            }
            renderDidSuspendDelayIfPossible();
            var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
          } else if (isSuspenseInstancePending(suspenseInstance)) {
            workInProgress2.flags |= DidCapture;
            workInProgress2.child = current2.child;
            var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
            registerSuspenseInstanceRetry(suspenseInstance, retry);
            return null;
          } else {
            reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Hydrating;
            return primaryChildFragment;
          }
        } else {
          if (workInProgress2.flags & ForceClientRender) {
            workInProgress2.flags &= ~ForceClientRender;
            var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
            return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
          } else if (workInProgress2.memoizedState !== null) {
            workInProgress2.child = current2.child;
            workInProgress2.flags |= DidCapture;
            return null;
          } else {
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
            var _primaryChildFragment4 = workInProgress2.child;
            _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
            workInProgress2.memoizedState = SUSPENDED_MARKER;
            return fallbackChildFragment;
          }
        }
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
        }
        scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
      }
      function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
        var node = firstChild;
        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState;
            if (state !== null) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            }
          } else if (node.tag === SuspenseListComponent) {
            scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === workInProgress2) {
            return;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress2) {
              return;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
      function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;
        while (row !== null) {
          var currentRow = row.alternate;
          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row;
          }
          row = row.sibling;
        }
        return lastContentRow;
      }
      function validateRevealOrder(revealOrder) {
        {
          if (revealOrder !== undefined && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === "string") {
              switch (revealOrder.toLowerCase()) {
                case "together":
                case "forwards":
                case "backwards": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                case "forward":
                case "backward": {
                  error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                  break;
                }
                default:
                  error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                  break;
              }
            } else {
              error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
            }
          }
        }
      }
      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== "collapsed" && tailMode !== "hidden") {
              didWarnAboutTailOptions[tailMode] = true;
              error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
              didWarnAboutTailOptions[tailMode] = true;
              error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
          }
        }
      }
      function validateSuspenseListNestedChild(childSlot, index2) {
        {
          var isAnArray = isArray(childSlot);
          var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
          if (isAnArray || isIterable) {
            var type = isAnArray ? "array" : "iterable";
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
            return false;
          }
        }
        return true;
      }
      function validateSuspenseListChildren(children, revealOrder) {
        {
          if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== undefined && children !== null && children !== false) {
            if (isArray(children)) {
              for (var i = 0;i < children.length; i++) {
                if (!validateSuspenseListNestedChild(children[i], i)) {
                  return;
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var childrenIterator = iteratorFn.call(children);
                if (childrenIterator) {
                  var step = childrenIterator.next();
                  var _i = 0;
                  for (;!step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return;
                    }
                    _i++;
                  }
                }
              } else {
                error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
              }
            }
          }
        }
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        if (renderState === null) {
          workInProgress2.memoizedState = {
            isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail,
            tailMode
          };
        } else {
          renderState.isBackwards = isBackwards;
          renderState.rendering = null;
          renderState.renderingStartTime = 0;
          renderState.last = lastContentRow;
          renderState.tail = tail;
          renderState.tailMode = tailMode;
        }
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          workInProgress2.flags |= DidCapture;
        } else {
          var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
          if (didSuspendBefore) {
            propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress2, suspenseContext);
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          workInProgress2.memoizedState = null;
        } else {
          switch (revealOrder) {
            case "forwards": {
              var lastContentRow = findLastContentRow(workInProgress2.child);
              var tail;
              if (lastContentRow === null) {
                tail = workInProgress2.child;
                workInProgress2.child = null;
              } else {
                tail = lastContentRow.sibling;
                lastContentRow.sibling = null;
              }
              initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode);
              break;
            }
            case "backwards": {
              var _tail = null;
              var row = workInProgress2.child;
              workInProgress2.child = null;
              while (row !== null) {
                var currentRow = row.alternate;
                if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                  workInProgress2.child = row;
                  break;
                }
                var nextRow = row.sibling;
                row.sibling = _tail;
                _tail = row;
                row = nextRow;
              }
              initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode);
              break;
            }
            case "together": {
              initSuspenseListRenderState(workInProgress2, false, null, null, undefined);
              break;
            }
            default: {
              workInProgress2.memoizedState = null;
            }
          }
        }
        return workInProgress2.child;
      }
      function updatePortalComponent(current2, workInProgress2, renderLanes2) {
        pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
        var nextChildren = workInProgress2.pendingProps;
        if (current2 === null) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        } else {
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        }
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
      function updateContextProvider(current2, workInProgress2, renderLanes2) {
        var providerType = workInProgress2.type;
        var context = providerType._context;
        var newProps = workInProgress2.pendingProps;
        var oldProps = workInProgress2.memoizedProps;
        var newValue = newProps.value;
        {
          if (!("value" in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
              hasWarnedAboutUsingNoValuePropOnContextProvider = true;
              error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
            }
          }
          var providerPropTypes = workInProgress2.type.propTypes;
          if (providerPropTypes) {
            checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
          }
        }
        pushProvider(workInProgress2, context, newValue);
        {
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            if (objectIs(oldValue, newValue)) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            } else {
              propagateContextChange(workInProgress2, context, renderLanes2);
            }
          }
        }
        var newChildren = newProps.children;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      var hasWarnedAboutUsingContextAsConsumer = false;
      function updateContextConsumer(current2, workInProgress2, renderLanes2) {
        var context = workInProgress2.type;
        {
          if (context._context === undefined) {
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true;
                error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
              }
            }
          } else {
            context = context._context;
          }
        }
        var newProps = workInProgress2.pendingProps;
        var render2 = newProps.children;
        {
          if (typeof render2 !== "function") {
            error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
          }
        }
        prepareToReadContext(workInProgress2, renderLanes2);
        var newValue = readContext(context);
        {
          markComponentRenderStarted(workInProgress2);
        }
        var newChildren;
        {
          ReactCurrentOwner$1.current = workInProgress2;
          setIsRendering(true);
          newChildren = render2(newValue);
          setIsRendering(false);
        }
        {
          markComponentRenderStopped();
        }
        workInProgress2.flags |= PerformedWork;
        reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
        return workInProgress2.child;
      }
      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
      }
      function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
        if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
          if (current2 !== null) {
            current2.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
        }
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        if (current2 !== null) {
          workInProgress2.dependencies = current2.dependencies;
        }
        {
          stopProfilerTimerIfRunning();
        }
        markSkippedUpdateLanes(workInProgress2.lanes);
        if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
          {
            return null;
          }
        }
        cloneChildFibers(current2, workInProgress2);
        return workInProgress2.child;
      }
      function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return;
          if (returnFiber === null) {
            throw new Error("Cannot swap the root fiber.");
          }
          current2.alternate = null;
          oldWorkInProgress.alternate = null;
          newWorkInProgress.index = oldWorkInProgress.index;
          newWorkInProgress.sibling = oldWorkInProgress.sibling;
          newWorkInProgress.return = oldWorkInProgress.return;
          newWorkInProgress.ref = oldWorkInProgress.ref;
          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress;
          } else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) {
              throw new Error("Expected parent to have a child.");
            }
            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling;
              if (prevSibling === null) {
                throw new Error("Expected to find the previous sibling.");
              }
            }
            prevSibling.sibling = newWorkInProgress;
          }
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [current2];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(current2);
          }
          newWorkInProgress.flags |= Placement;
          return newWorkInProgress;
        }
      }
      function checkScheduledUpdateOrContext(current2, renderLanes2) {
        var updateLanes = current2.lanes;
        if (includesSomeLane(updateLanes, renderLanes2)) {
          return true;
        }
        return false;
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case HostRoot:
            pushHostRootContext(workInProgress2);
            var root2 = workInProgress2.stateNode;
            resetHydrationState();
            break;
          case HostComponent:
            pushHostContext(workInProgress2);
            break;
          case ClassComponent: {
            var Component2 = workInProgress2.type;
            if (isContextProvider(Component2)) {
              pushContextProvider(workInProgress2);
            }
            break;
          }
          case HostPortal:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            break;
          case ContextProvider: {
            var newValue = workInProgress2.memoizedProps.value;
            var context = workInProgress2.type._context;
            pushProvider(workInProgress2, context, newValue);
            break;
          }
          case Profiler:
            {
              var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (hasChildWork) {
                workInProgress2.flags |= Update;
              }
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            break;
          case SuspenseComponent: {
            var state = workInProgress2.memoizedState;
            if (state !== null) {
              if (state.dehydrated !== null) {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                workInProgress2.flags |= DidCapture;
                return null;
              }
              var primaryChildFragment = workInProgress2.child;
              var primaryChildLanes = primaryChildFragment.childLanes;
              if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                if (child !== null) {
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }
            break;
          }
          case SuspenseListComponent: {
            var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
            var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
            if (didSuspendBefore) {
              if (_hasChildWork) {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              workInProgress2.flags |= DidCapture;
            }
            var renderState = workInProgress2.memoizedState;
            if (renderState !== null) {
              renderState.rendering = null;
              renderState.tail = null;
              renderState.lastEffect = null;
            }
            pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
            if (_hasChildWork) {
              break;
            } else {
              return null;
            }
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            workInProgress2.lanes = NoLanes;
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        {
          if (workInProgress2._debugNeedsRemount && current2 !== null) {
            return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
          }
        }
        if (current2 !== null) {
          var oldProps = current2.memoizedProps;
          var newProps = workInProgress2.pendingProps;
          if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
            didReceiveUpdate = true;
          } else {
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext && (workInProgress2.flags & DidCapture) === NoFlags) {
              didReceiveUpdate = false;
              return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
            }
            if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              didReceiveUpdate = true;
            } else {
              didReceiveUpdate = false;
            }
          }
        } else {
          didReceiveUpdate = false;
          if (getIsHydrating() && isForkedChild(workInProgress2)) {
            var slotIndex = workInProgress2.index;
            var numberOfForks = getForksAtLevel();
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        workInProgress2.lanes = NoLanes;
        switch (workInProgress2.tag) {
          case IndeterminateComponent: {
            return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
          }
          case LazyComponent: {
            var elementType = workInProgress2.elementType;
            return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
          }
          case FunctionComponent: {
            var Component2 = workInProgress2.type;
            var unresolvedProps = workInProgress2.pendingProps;
            var resolvedProps = workInProgress2.elementType === Component2 ? unresolvedProps : resolveDefaultProps(Component2, unresolvedProps);
            return updateFunctionComponent(current2, workInProgress2, Component2, resolvedProps, renderLanes2);
          }
          case ClassComponent: {
            var _Component = workInProgress2.type;
            var _unresolvedProps = workInProgress2.pendingProps;
            var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
            return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
          }
          case HostRoot:
            return updateHostRoot(current2, workInProgress2, renderLanes2);
          case HostComponent:
            return updateHostComponent(current2, workInProgress2, renderLanes2);
          case HostText:
            return updateHostText(current2, workInProgress2);
          case SuspenseComponent:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case HostPortal:
            return updatePortalComponent(current2, workInProgress2, renderLanes2);
          case ForwardRef: {
            var type = workInProgress2.type;
            var _unresolvedProps2 = workInProgress2.pendingProps;
            var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
            return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
          }
          case Fragment:
            return updateFragment(current2, workInProgress2, renderLanes2);
          case Mode:
            return updateMode(current2, workInProgress2, renderLanes2);
          case Profiler:
            return updateProfiler(current2, workInProgress2, renderLanes2);
          case ContextProvider:
            return updateContextProvider(current2, workInProgress2, renderLanes2);
          case ContextConsumer:
            return updateContextConsumer(current2, workInProgress2, renderLanes2);
          case MemoComponent: {
            var _type2 = workInProgress2.type;
            var _unresolvedProps3 = workInProgress2.pendingProps;
            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerPropTypes = _type2.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentNameFromType(_type2));
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
          }
          case SimpleMemoComponent: {
            return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
          }
          case IncompleteClassComponent: {
            var _Component2 = workInProgress2.type;
            var _unresolvedProps4 = workInProgress2.pendingProps;
            var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
            return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
          }
          case SuspenseListComponent: {
            return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent: {
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= Update;
      }
      function markRef$1(workInProgress2) {
        workInProgress2.flags |= Ref;
        {
          workInProgress2.flags |= RefStatic;
        }
      }
      var appendAllChildren;
      var updateHostContainer;
      var updateHostComponent$1;
      var updateHostText$1;
      {
        appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
          var node = workInProgress2.child;
          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode);
            } else if (node.tag === HostPortal)
              ;
            else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        };
        updateHostContainer = function(current2, workInProgress2) {
        };
        updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
          var oldProps = current2.memoizedProps;
          if (oldProps === newProps) {
            return;
          }
          var instance = workInProgress2.stateNode;
          var currentHostContext = getHostContext();
          var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
          workInProgress2.updateQueue = updatePayload;
          if (updatePayload) {
            markUpdate(workInProgress2);
          }
        };
        updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
          if (oldText !== newText) {
            markUpdate(workInProgress2);
          }
        };
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) {
          return;
        }
        switch (renderState.tailMode) {
          case "hidden": {
            var tailNode = renderState.tail;
            var lastTailNode = null;
            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode;
              }
              tailNode = tailNode.sibling;
            }
            if (lastTailNode === null) {
              renderState.tail = null;
            } else {
              lastTailNode.sibling = null;
            }
            break;
          }
          case "collapsed": {
            var _tailNode = renderState.tail;
            var _lastTailNode = null;
            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode;
              }
              _tailNode = _tailNode.sibling;
            }
            if (_lastTailNode === null) {
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                renderState.tail.sibling = null;
              } else {
                renderState.tail = null;
              }
            } else {
              _lastTailNode.sibling = null;
            }
            break;
          }
        }
      }
      function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
        var newChildLanes = NoLanes;
        var subtreeFlags = NoFlags;
        if (!didBailout) {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var child = completedWork.child;
            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
              subtreeFlags |= child.subtreeFlags;
              subtreeFlags |= child.flags;
              actualDuration += child.actualDuration;
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              subtreeFlags |= _child.subtreeFlags;
              subtreeFlags |= _child.flags;
              _child.return = completedWork;
              _child = _child.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        } else {
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var _treeBaseDuration = completedWork.selfBaseDuration;
            var _child2 = completedWork.child;
            while (_child2 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
              subtreeFlags |= _child2.subtreeFlags & StaticMask;
              subtreeFlags |= _child2.flags & StaticMask;
              _treeBaseDuration += _child2.treeBaseDuration;
              _child2 = _child2.sibling;
            }
            completedWork.treeBaseDuration = _treeBaseDuration;
          } else {
            var _child3 = completedWork.child;
            while (_child3 !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
              subtreeFlags |= _child3.subtreeFlags & StaticMask;
              subtreeFlags |= _child3.flags & StaticMask;
              _child3.return = completedWork;
              _child3 = _child3.sibling;
            }
          }
          completedWork.subtreeFlags |= subtreeFlags;
        }
        completedWork.childLanes = newChildLanes;
        return didBailout;
      }
      function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
          warnIfUnhydratedTailNodes(workInProgress2);
          resetHydrationState();
          workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
          return false;
        }
        var wasHydrated = popHydrationState(workInProgress2);
        if (nextState !== null && nextState.dehydrated !== null) {
          if (current2 === null) {
            if (!wasHydrated) {
              throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
            }
            prepareToHydrateHostSuspenseInstance(workInProgress2);
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                var isTimedOutSuspense = nextState !== null;
                if (isTimedOutSuspense) {
                  var primaryChildFragment = workInProgress2.child;
                  if (primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return false;
          } else {
            resetHydrationState();
            if ((workInProgress2.flags & DidCapture) === NoFlags) {
              workInProgress2.memoizedState = null;
            }
            workInProgress2.flags |= Update;
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                var _isTimedOutSuspense = nextState !== null;
                if (_isTimedOutSuspense) {
                  var _primaryChildFragment = workInProgress2.child;
                  if (_primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return false;
          }
        } else {
          upgradeHydrationErrorsToRecoverable();
          return true;
        }
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            bubbleProperties(workInProgress2);
            return null;
          case ClassComponent: {
            var Component2 = workInProgress2.type;
            if (isContextProvider(Component2)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostRoot: {
            var fiberRoot = workInProgress2.stateNode;
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }
            if (current2 === null || current2.child === null) {
              var wasHydrated = popHydrationState(workInProgress2);
              if (wasHydrated) {
                markUpdate(workInProgress2);
              } else {
                if (current2 !== null) {
                  var prevState = current2.memoizedState;
                  if (!prevState.isDehydrated || (workInProgress2.flags & ForceClientRender) !== NoFlags) {
                    workInProgress2.flags |= Snapshot;
                    upgradeHydrationErrorsToRecoverable();
                  }
                }
              }
            }
            updateHostContainer(current2, workInProgress2);
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress2.type;
            if (current2 !== null && workInProgress2.stateNode != null) {
              updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
              if (current2.ref !== workInProgress2.ref) {
                markRef$1(workInProgress2);
              }
            } else {
              if (!newProps) {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              var currentHostContext = getHostContext();
              var _wasHydrated = popHydrationState(workInProgress2);
              if (_wasHydrated) {
                if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress2);
                }
              } else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                appendAllChildren(instance, workInProgress2, false, false);
                workInProgress2.stateNode = instance;
                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                  markUpdate(workInProgress2);
                }
              }
              if (workInProgress2.ref !== null) {
                markRef$1(workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case HostText: {
            var newText = newProps;
            if (current2 && workInProgress2.stateNode != null) {
              var oldText = current2.memoizedProps;
              updateHostText$1(current2, workInProgress2, oldText, newText);
            } else {
              if (typeof newText !== "string") {
                if (workInProgress2.stateNode === null) {
                  throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var _rootContainerInstance = getRootHostContainer();
              var _currentHostContext = getHostContext();
              var _wasHydrated2 = popHydrationState(workInProgress2);
              if (_wasHydrated2) {
                if (prepareToHydrateHostTextInstance(workInProgress2)) {
                  markUpdate(workInProgress2);
                }
              } else {
                workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var nextState = workInProgress2.memoizedState;
            if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
              var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
              if (!fallthroughToNormalSuspensePath) {
                if (workInProgress2.flags & ShouldCapture) {
                  return workInProgress2;
                } else {
                  return null;
                }
              }
            }
            if ((workInProgress2.flags & DidCapture) !== NoFlags) {
              workInProgress2.lanes = renderLanes2;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
            if (nextDidTimeout !== prevDidTimeout) {
              if (nextDidTimeout) {
                var _offscreenFiber2 = workInProgress2.child;
                _offscreenFiber2.flags |= Visibility;
                if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
            }
            var wakeables = workInProgress2.updateQueue;
            if (wakeables !== null) {
              workInProgress2.flags |= Update;
            }
            bubbleProperties(workInProgress2);
            {
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                if (nextDidTimeout) {
                  var primaryChildFragment = workInProgress2.child;
                  if (primaryChildFragment !== null) {
                    workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                  }
                }
              }
            }
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            updateHostContainer(current2, workInProgress2);
            if (current2 === null) {
              preparePortalMount(workInProgress2.stateNode.containerInfo);
            }
            bubbleProperties(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            bubbleProperties(workInProgress2);
            return null;
          case IncompleteClassComponent: {
            var _Component = workInProgress2.type;
            if (isContextProvider(_Component)) {
              popContext(workInProgress2);
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              bubbleProperties(workInProgress2);
              return null;
            }
            var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
            var renderedTail = renderState.rendering;
            if (renderedTail === null) {
              if (!didSuspendAlready) {
                var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                if (!cannotBeSuspended) {
                  var row = workInProgress2.child;
                  while (row !== null) {
                    var suspended = findFirstSuspended(row);
                    if (suspended !== null) {
                      didSuspendAlready = true;
                      workInProgress2.flags |= DidCapture;
                      cutOffTailIfNeeded(renderState, false);
                      var newThenables = suspended.updateQueue;
                      if (newThenables !== null) {
                        workInProgress2.updateQueue = newThenables;
                        workInProgress2.flags |= Update;
                      }
                      workInProgress2.subtreeFlags = NoFlags;
                      resetChildFibers(workInProgress2, renderLanes2);
                      pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                      return workInProgress2.child;
                    }
                    row = row.sibling;
                  }
                }
                if (renderState.tail !== null && now() > getRenderTargetTime()) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              } else {
                cutOffTailIfNeeded(renderState, false);
              }
            } else {
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail);
                if (_suspended !== null) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  var _newThenables = _suspended.updateQueue;
                  if (_newThenables !== null) {
                    workInProgress2.updateQueue = _newThenables;
                    workInProgress2.flags |= Update;
                  }
                  cutOffTailIfNeeded(renderState, true);
                  if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                  workInProgress2.flags |= DidCapture;
                  didSuspendAlready = true;
                  cutOffTailIfNeeded(renderState, false);
                  workInProgress2.lanes = SomeRetryLane;
                }
              }
              if (renderState.isBackwards) {
                renderedTail.sibling = workInProgress2.child;
                workInProgress2.child = renderedTail;
              } else {
                var previousSibling = renderState.last;
                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail;
                } else {
                  workInProgress2.child = renderedTail;
                }
                renderState.last = renderedTail;
              }
            }
            if (renderState.tail !== null) {
              var next = renderState.tail;
              renderState.rendering = next;
              renderState.tail = next.sibling;
              renderState.renderingStartTime = now();
              next.sibling = null;
              var suspenseContext = suspenseStackCursor.current;
              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              } else {
                suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
              }
              pushSuspenseContext(workInProgress2, suspenseContext);
              return next;
            }
            bubbleProperties(workInProgress2);
            return null;
          }
          case ScopeComponent: {
            break;
          }
          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popRenderLanes(workInProgress2);
            var _nextState = workInProgress2.memoizedState;
            var nextIsHidden = _nextState !== null;
            if (current2 !== null) {
              var _prevState = current2.memoizedState;
              var prevIsHidden = _prevState !== null;
              if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) {
                workInProgress2.flags |= Visibility;
              }
            }
            if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
              bubbleProperties(workInProgress2);
            } else {
              if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                bubbleProperties(workInProgress2);
                {
                  if (workInProgress2.subtreeFlags & (Placement | Update)) {
                    workInProgress2.flags |= Visibility;
                  }
                }
              }
            }
            return null;
          }
          case CacheComponent: {
            return null;
          }
          case TracingMarkerComponent: {
            return null;
          }
        }
        throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
      }
      function unwindWork(current2, workInProgress2, renderLanes2) {
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case ClassComponent: {
            var Component2 = workInProgress2.type;
            if (isContextProvider(Component2)) {
              popContext(workInProgress2);
            }
            var flags = workInProgress2.flags;
            if (flags & ShouldCapture) {
              workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case HostRoot: {
            var root2 = workInProgress2.stateNode;
            popHostContainer(workInProgress2);
            popTopLevelContextObject(workInProgress2);
            resetWorkInProgressVersions();
            var _flags = workInProgress2.flags;
            if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
              workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            return null;
          }
          case HostComponent: {
            popHostContext(workInProgress2);
            return null;
          }
          case SuspenseComponent: {
            popSuspenseContext(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              if (workInProgress2.alternate === null) {
                throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              }
              resetHydrationState();
            }
            var _flags2 = workInProgress2.flags;
            if (_flags2 & ShouldCapture) {
              workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
              if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress2);
              }
              return workInProgress2;
            }
            return null;
          }
          case SuspenseListComponent: {
            popSuspenseContext(workInProgress2);
            return null;
          }
          case HostPortal:
            popHostContainer(workInProgress2);
            return null;
          case ContextProvider:
            var context = workInProgress2.type._context;
            popProvider(context, workInProgress2);
            return null;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(workInProgress2);
            return null;
          case CacheComponent:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
        popTreeContext(interruptedWork);
        switch (interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes;
            if (childContextTypes !== null && childContextTypes !== undefined) {
              popContext(interruptedWork);
            }
            break;
          }
          case HostRoot: {
            var root2 = interruptedWork.stateNode;
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            resetWorkInProgressVersions();
            break;
          }
          case HostComponent: {
            popHostContext(interruptedWork);
            break;
          }
          case HostPortal:
            popHostContainer(interruptedWork);
            break;
          case SuspenseComponent:
            popSuspenseContext(interruptedWork);
            break;
          case SuspenseListComponent:
            popSuspenseContext(interruptedWork);
            break;
          case ContextProvider:
            var context = interruptedWork.type._context;
            popProvider(context, interruptedWork);
            break;
          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork);
            break;
        }
      }
      var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set;
      }
      var offscreenSubtreeIsHidden = false;
      var offscreenSubtreeWasHidden = false;
      var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
      var nextEffect = null;
      var inProgressLanes = null;
      var inProgressRoot = null;
      function reportUncaughtErrorInDEV(error2) {
        {
          invokeGuardedCallback(null, function() {
            throw error2;
          });
          clearCaughtError();
        }
      }
      var callComponentWillUnmountWithTimer = function(current2, instance) {
        instance.props = current2.memoizedProps;
        instance.state = current2.memoizedState;
        if (current2.mode & ProfileMode) {
          try {
            startLayoutEffectTimer();
            instance.componentWillUnmount();
          } finally {
            recordLayoutEffectDuration(current2);
          }
        } else {
          instance.componentWillUnmount();
        }
      };
      function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
        try {
          commitHookEffectListMount(Layout, current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
        try {
          callComponentWillUnmountWithTimer(current2, instance);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
        try {
          instance.componentDidMount();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyAttachRef(current2, nearestMountedAncestor) {
        try {
          commitAttachRef(current2);
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      function safelyDetachRef(current2, nearestMountedAncestor) {
        var ref = current2.ref;
        if (ref !== null) {
          if (typeof ref === "function") {
            var retVal;
            try {
              if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(null);
                } finally {
                  recordLayoutEffectDuration(current2);
                }
              } else {
                retVal = ref(null);
              }
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
            {
              if (typeof retVal === "function") {
                error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
              }
            }
          } else {
            ref.current = null;
          }
        }
      }
      function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
        try {
          destroy();
        } catch (error2) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error2);
        }
      }
      var focusedInstanceHandle = null;
      var shouldFireAfterActiveInstanceBlur = false;
      function commitBeforeMutationEffects(root2, firstChild) {
        focusedInstanceHandle = prepareForCommit(root2.containerInfo);
        nextEffect = firstChild;
        commitBeforeMutationEffects_begin();
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        focusedInstanceHandle = null;
        return shouldFire;
      }
      function commitBeforeMutationEffects_begin() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var child = fiber.child;
          if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitBeforeMutationEffects_complete();
          }
        }
      }
      function commitBeforeMutationEffects_complete() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            commitBeforeMutationEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current2 = finishedWork.alternate;
        var flags = finishedWork.flags;
        if ((flags & Snapshot) !== NoFlags) {
          setCurrentFiber(finishedWork);
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              break;
            }
            case ClassComponent: {
              if (current2 !== null) {
                var prevProps = current2.memoizedProps;
                var prevState = current2.memoizedState;
                var instance = finishedWork.stateNode;
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
              }
              break;
            }
            case HostRoot: {
              {
                var root2 = finishedWork.stateNode;
                clearContainer(root2.containerInfo);
              }
              break;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              break;
            default: {
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          resetCurrentFiber();
        }
      }
      function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & flags) === flags) {
              var destroy = effect.destroy;
              effect.destroy = undefined;
              if (destroy !== undefined) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectUnmountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectUnmountStarted(finishedWork);
                  }
                }
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectUnmountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectUnmountStopped();
                  }
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
          var firstEffect = lastEffect.next;
          var effect = firstEffect;
          do {
            if ((effect.tag & flags) === flags) {
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectMountStarted(finishedWork);
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectMountStarted(finishedWork);
                }
              }
              var create = effect.create;
              {
                if ((flags & Insertion) !== NoFlags$1) {
                  setIsRunningInsertionEffect(true);
                }
              }
              effect.destroy = create();
              {
                if ((flags & Insertion) !== NoFlags$1) {
                  setIsRunningInsertionEffect(false);
                }
              }
              {
                if ((flags & Passive$1) !== NoFlags$1) {
                  markComponentPassiveEffectMountStopped();
                } else if ((flags & Layout) !== NoFlags$1) {
                  markComponentLayoutEffectMountStopped();
                }
              }
              {
                var destroy = effect.destroy;
                if (destroy !== undefined && typeof destroy !== "function") {
                  var hookName = undefined;
                  if ((effect.tag & Layout) !== NoFlags) {
                    hookName = "useLayoutEffect";
                  } else if ((effect.tag & Insertion) !== NoFlags) {
                    hookName = "useInsertionEffect";
                  } else {
                    hookName = "useEffect";
                  }
                  var addendum = undefined;
                  if (destroy === null) {
                    addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                  } else if (typeof destroy.then === "function") {
                    addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                  } else {
                    addendum = " You returned: " + destroy;
                  }
                  error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                }
              }
            }
            effect = effect.next;
          } while (effect !== firstEffect);
        }
      }
      function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        {
          if ((finishedWork.flags & Update) !== NoFlags) {
            switch (finishedWork.tag) {
              case Profiler: {
                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                var commitTime2 = getCommitTime();
                var phase = finishedWork.alternate === null ? "mount" : "update";
                {
                  if (isCurrentUpdateNested()) {
                    phase = "nested-update";
                  }
                }
                if (typeof onPostCommit === "function") {
                  onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                }
                var parentFiber = finishedWork.return;
                outer:
                  while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root2 = parentFiber.stateNode;
                        root2.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                break;
              }
            }
          }
        }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
              }
              break;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update) {
                if (!offscreenSubtreeWasHidden) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        instance.componentDidMount();
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              break;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              break;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              break;
            }
            case HostText: {
              break;
            }
            case HostPortal: {
              break;
            }
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime2 = getCommitTime();
                var phase = current2 === null ? "mount" : "update";
                {
                  if (isCurrentUpdateNested()) {
                    phase = "nested-update";
                  }
                }
                if (typeof onRender === "function") {
                  onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                }
                {
                  if (typeof onCommit === "function") {
                    onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                  }
                  enqueuePendingPassiveProfilerEffect(finishedWork);
                  var parentFiber = finishedWork.return;
                  outer:
                    while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                }
              }
              break;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
            case TracingMarkerComponent: {
              break;
            }
            default:
              throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        if (!offscreenSubtreeWasHidden) {
          {
            if (finishedWork.flags & Ref) {
              commitAttachRef(finishedWork);
            }
          }
        }
      }
      function reappearLayoutEffectsOnFiber(node) {
        switch (node.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (node.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              } finally {
                recordLayoutEffectDuration(node);
              }
            } else {
              safelyCallCommitHookLayoutEffectListMount(node, node.return);
            }
            break;
          }
          case ClassComponent: {
            var instance = node.stateNode;
            if (typeof instance.componentDidMount === "function") {
              safelyCallComponentDidMount(node, node.return, instance);
            }
            safelyAttachRef(node, node.return);
            break;
          }
          case HostComponent: {
            safelyAttachRef(node, node.return);
            break;
          }
        }
      }
      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        var hostSubtreeRoot = null;
        {
          var node = finishedWork;
          while (true) {
            if (node.tag === HostComponent) {
              if (hostSubtreeRoot === null) {
                hostSubtreeRoot = node;
                try {
                  var instance = node.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node.stateNode, node.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if (node.tag === HostText) {
              if (hostSubtreeRoot === null) {
                try {
                  var _instance3 = node.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node.memoizedProps);
                  }
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
              ;
            else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === finishedWork) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node = node.return;
            }
            if (hostSubtreeRoot === node) {
              hostSubtreeRoot = null;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
      }
      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
          var instance = finishedWork.stateNode;
          var instanceToUse;
          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance);
              break;
            default:
              instanceToUse = instance;
          }
          if (typeof ref === "function") {
            var retVal;
            if (finishedWork.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                retVal = ref(instanceToUse);
              } finally {
                recordLayoutEffectDuration(finishedWork);
              }
            } else {
              retVal = ref(instanceToUse);
            }
            {
              if (typeof retVal === "function") {
                error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
              }
            }
          } else {
            {
              if (!ref.hasOwnProperty("current")) {
                error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
              }
            }
            ref.current = instanceToUse;
          }
        }
      }
      function detachFiberMutation(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          alternate.return = null;
        }
        fiber.return = null;
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
          fiber.alternate = null;
          detachFiberAfterEffects(alternate);
        }
        {
          fiber.child = null;
          fiber.deletions = null;
          fiber.sibling = null;
          if (fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            if (hostInstance !== null) {
              detachDeletedInstance(hostInstance);
            }
          }
          fiber.stateNode = null;
          {
            fiber._debugOwner = null;
          }
          {
            fiber.return = null;
            fiber.dependencies = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.stateNode = null;
            fiber.updateQueue = null;
          }
        }
      }
      function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent;
          }
          parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      }
      function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
      }
      function getHostSibling(fiber) {
        var node = fiber;
        siblings:
          while (true) {
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
              if (node.flags & Placement) {
                continue siblings;
              }
              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            }
            if (!(node.flags & Placement)) {
              return node.stateNode;
            }
          }
      }
      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        switch (parentFiber.tag) {
          case HostComponent: {
            var parent = parentFiber.stateNode;
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            insertOrAppendPlacementNode(finishedWork, before, parent);
            break;
          }
          case HostRoot:
          case HostPortal: {
            var _parent = parentFiber.stateNode.containerInfo;
            var _before = getHostSibling(finishedWork);
            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
            break;
          }
          default:
            throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          if (before) {
            insertInContainerBefore(parent, stateNode, before);
          } else {
            appendChildToContainer(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
          var stateNode = node.stateNode;
          if (before) {
            insertBefore(parent, stateNode, before);
          } else {
            appendChild(parent, stateNode);
          }
        } else if (tag === HostPortal)
          ;
        else {
          var child = node.child;
          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent);
            var sibling = child.sibling;
            while (sibling !== null) {
              insertOrAppendPlacementNode(sibling, before, parent);
              sibling = sibling.sibling;
            }
          }
        }
      }
      var hostParent = null;
      var hostParentIsContainer = false;
      function commitDeletionEffects(root2, returnFiber, deletedFiber) {
        {
          var parent = returnFiber;
          findParent:
            while (parent !== null) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
              }
              parent = parent.return;
            }
          if (hostParent === null) {
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
          hostParent = null;
          hostParentIsContainer = false;
        }
        detachFiberMutation(deletedFiber);
      }
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        var child = parent.child;
        while (child !== null) {
          commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
          child = child.sibling;
        }
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        onCommitUnmount(deletedFiber);
        switch (deletedFiber.tag) {
          case HostComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
            }
          }
          case HostText: {
            {
              var prevHostParent = hostParent;
              var prevHostParentIsContainer = hostParentIsContainer;
              hostParent = null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = prevHostParent;
              hostParentIsContainer = prevHostParentIsContainer;
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  removeChildFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  removeChild(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case DehydratedFragment: {
            {
              if (hostParent !== null) {
                if (hostParentIsContainer) {
                  clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                } else {
                  clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                }
              }
            }
            return;
          }
          case HostPortal: {
            {
              var _prevHostParent = hostParent;
              var _prevHostParentIsContainer = hostParentIsContainer;
              hostParent = deletedFiber.stateNode.containerInfo;
              hostParentIsContainer = true;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              hostParent = _prevHostParent;
              hostParentIsContainer = _prevHostParentIsContainer;
            }
            return;
          }
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            if (!offscreenSubtreeWasHidden) {
              var updateQueue = deletedFiber.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var effect = firstEffect;
                  do {
                    var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                    if (destroy !== undefined) {
                      if ((tag & Insertion) !== NoFlags$1) {
                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                      } else if ((tag & Layout) !== NoFlags$1) {
                        {
                          markComponentLayoutEffectUnmountStarted(deletedFiber);
                        }
                        if (deletedFiber.mode & ProfileMode) {
                          startLayoutEffectTimer();
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          recordLayoutEffectDuration(deletedFiber);
                        } else {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        }
                        {
                          markComponentLayoutEffectUnmountStopped();
                        }
                      }
                    }
                    effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ClassComponent: {
            if (!offscreenSubtreeWasHidden) {
              safelyDetachRef(deletedFiber, nearestMountedAncestor);
              var instance = deletedFiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
              }
            }
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case ScopeComponent: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
          case OffscreenComponent: {
            if (deletedFiber.mode & ConcurrentMode) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            }
            break;
          }
          default: {
            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
            return;
          }
        }
      }
      function commitSuspenseCallback(finishedWork) {
        var newState = finishedWork.memoizedState;
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
          var current2 = finishedWork.alternate;
          if (current2 !== null) {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated;
              if (suspenseInstance !== null) {
                commitHydratedSuspenseInstance(suspenseInstance);
              }
            }
          }
        }
      }
      function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
          finishedWork.updateQueue = null;
          var retryCache = finishedWork.stateNode;
          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet;
          }
          wakeables.forEach(function(wakeable) {
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
            if (!retryCache.has(wakeable)) {
              retryCache.add(wakeable);
              {
                if (isDevToolsPresent) {
                  if (inProgressLanes !== null && inProgressRoot !== null) {
                    restorePendingUpdaters(inProgressRoot, inProgressLanes);
                  } else {
                    throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                  }
                }
              }
              wakeable.then(retry, retry);
            }
          });
        }
      }
      function commitMutationEffects(root2, finishedWork, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        setCurrentFiber(finishedWork);
        commitMutationEffectsOnFiber(finishedWork, root2);
        setCurrentFiber(finishedWork);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
        var deletions = parentFiber.deletions;
        if (deletions !== null) {
          for (var i = 0;i < deletions.length; i++) {
            var childToDelete = deletions[i];
            try {
              commitDeletionEffects(root2, parentFiber, childToDelete);
            } catch (error2) {
              captureCommitPhaseError(childToDelete, parentFiber, error2);
            }
          }
        }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask) {
          var child = parentFiber.child;
          while (child !== null) {
            setCurrentFiber(child);
            commitMutationEffectsOnFiber(child, root2);
            child = child.sibling;
          }
        }
        setCurrentFiber(prevDebugFiber);
      }
      function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
        var current2 = finishedWork.alternate;
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              try {
                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                commitHookEffectListMount(Insertion | HasEffect, finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                recordLayoutEffectDuration(finishedWork);
              } else {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case ClassComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            return;
          }
          case HostComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Ref) {
              if (current2 !== null) {
                safelyDetachRef(current2, current2.return);
              }
            }
            {
              if (finishedWork.flags & ContentReset) {
                var instance = finishedWork.stateNode;
                try {
                  resetTextContent(instance);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
              if (flags & Update) {
                var _instance4 = finishedWork.stateNode;
                if (_instance4 != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    try {
                      commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostText: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              {
                if (finishedWork.stateNode === null) {
                  throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                try {
                  commitTextUpdate(textInstance, oldText, newText);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
              }
            }
            return;
          }
          case HostRoot: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              {
                if (current2 !== null) {
                  var prevRootState = current2.memoizedState;
                  if (prevRootState.isDehydrated) {
                    try {
                      commitHydratedContainer(root2.containerInfo);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
              }
            }
            return;
          }
          case HostPortal: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            return;
          }
          case SuspenseComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            var offscreenFiber = finishedWork.child;
            if (offscreenFiber.flags & Visibility) {
              var offscreenInstance = offscreenFiber.stateNode;
              var newState = offscreenFiber.memoizedState;
              var isHidden = newState !== null;
              offscreenInstance.isHidden = isHidden;
              if (isHidden) {
                var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                if (!wasHidden) {
                  markCommitTimeOfFallback();
                }
              }
            }
            if (flags & Update) {
              try {
                commitSuspenseCallback(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case OffscreenComponent: {
            var _wasHidden = current2 !== null && current2.memoizedState !== null;
            if (finishedWork.mode & ConcurrentMode) {
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
              recursivelyTraverseMutationEffects(root2, finishedWork);
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            } else {
              recursivelyTraverseMutationEffects(root2, finishedWork);
            }
            commitReconciliationEffects(finishedWork);
            if (flags & Visibility) {
              var _offscreenInstance = finishedWork.stateNode;
              var _newState = finishedWork.memoizedState;
              var _isHidden = _newState !== null;
              var offscreenBoundary = finishedWork;
              _offscreenInstance.isHidden = _isHidden;
              {
                if (_isHidden) {
                  if (!_wasHidden) {
                    if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                      nextEffect = offscreenBoundary;
                      var offscreenChild = offscreenBoundary.child;
                      while (offscreenChild !== null) {
                        nextEffect = offscreenChild;
                        disappearLayoutEffects_begin(offscreenChild);
                        offscreenChild = offscreenChild.sibling;
                      }
                    }
                  }
                }
              }
              {
                hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
              }
            }
            return;
          }
          case SuspenseListComponent: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & Update) {
              attachSuspenseRetryListeners(finishedWork);
            }
            return;
          }
          case ScopeComponent: {
            return;
          }
          default: {
            recursivelyTraverseMutationEffects(root2, finishedWork);
            commitReconciliationEffects(finishedWork);
            return;
          }
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags = finishedWork.flags;
        if (flags & Placement) {
          try {
            commitPlacement(finishedWork);
          } catch (error2) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error2);
          }
          finishedWork.flags &= ~Placement;
        }
        if (flags & Hydrating) {
          finishedWork.flags &= ~Hydrating;
        }
      }
      function commitLayoutEffects(finishedWork, root2, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root2;
        nextEffect = finishedWork;
        commitLayoutEffects_begin(finishedWork, root2, committedLanes);
        inProgressLanes = null;
        inProgressRoot = null;
      }
      function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
        var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent && isModernRoot) {
            var isHidden = fiber.memoizedState !== null;
            var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
            if (newOffscreenSubtreeIsHidden) {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            } else {
              var current2 = fiber.alternate;
              var wasHidden = current2 !== null && current2.memoizedState !== null;
              var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
              var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
              offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
              if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                nextEffect = fiber;
                reappearLayoutEffects_begin(fiber);
              }
              var child = firstChild;
              while (child !== null) {
                nextEffect = child;
                commitLayoutEffects_begin(child, root2, committedLanes);
                child = child.sibling;
              }
              nextEffect = fiber;
              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              continue;
            }
          }
          if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
          }
        }
      }
      function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & LayoutMask) !== NoFlags) {
            var current2 = fiber.alternate;
            setCurrentFiber(fiber);
            try {
              commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function disappearLayoutEffects_begin(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (fiber.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                } finally {
                  recordLayoutEffectDuration(fiber);
                }
              } else {
                commitHookEffectListUnmount(Layout, fiber, fiber.return);
              }
              break;
            }
            case ClassComponent: {
              safelyDetachRef(fiber, fiber.return);
              var instance = fiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              }
              break;
            }
            case HostComponent: {
              safelyDetachRef(fiber, fiber.return);
              break;
            }
            case OffscreenComponent: {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                disappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
              break;
            }
          }
          if (firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            disappearLayoutEffects_complete(subtreeRoot);
          }
        }
      }
      function disappearLayoutEffects_complete(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function reappearLayoutEffects_begin(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if (fiber.tag === OffscreenComponent) {
            var isHidden = fiber.memoizedState !== null;
            if (isHidden) {
              reappearLayoutEffects_complete(subtreeRoot);
              continue;
            }
          }
          if (firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            reappearLayoutEffects_complete(subtreeRoot);
          }
        }
      }
      function reappearLayoutEffects_complete(subtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          try {
            reappearLayoutEffectsOnFiber(fiber);
          } catch (error2) {
            captureCommitPhaseError(fiber, fiber.return, error2);
          }
          resetCurrentFiber();
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork;
        commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
      }
      function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var firstChild = fiber.child;
          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
            firstChild.return = fiber;
            nextEffect = firstChild;
          } else {
            commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
          }
        }
      }
      function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            try {
              commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
          }
          if (fiber === subtreeRoot) {
            nextEffect = null;
            return;
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              } finally {
                recordPassiveEffectDuration(finishedWork);
              }
            } else {
              commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
            }
            break;
          }
        }
      }
      function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild;
        commitPassiveUnmountEffects_begin();
      }
      function commitPassiveUnmountEffects_begin() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var child = fiber.child;
          if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
            var deletions = fiber.deletions;
            if (deletions !== null) {
              for (var i = 0;i < deletions.length; i++) {
                var fiberToDelete = deletions[i];
                nextEffect = fiberToDelete;
                commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
              }
              {
                var previousFiber = fiber.alternate;
                if (previousFiber !== null) {
                  var detachedChild = previousFiber.child;
                  if (detachedChild !== null) {
                    previousFiber.child = null;
                    do {
                      var detachedSibling = detachedChild.sibling;
                      detachedChild.sibling = null;
                      detachedChild = detachedSibling;
                    } while (detachedChild !== null);
                  }
                }
              }
              nextEffect = fiber;
            }
          }
          if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitPassiveUnmountEffects_complete();
          }
        }
      }
      function commitPassiveUnmountEffects_complete() {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          if ((fiber.flags & Passive) !== NoFlags) {
            setCurrentFiber(fiber);
            commitPassiveUnmountOnFiber(fiber);
            resetCurrentFiber();
          }
          var sibling = fiber.sibling;
          if (sibling !== null) {
            sibling.return = fiber.return;
            nextEffect = sibling;
            return;
          }
          nextEffect = fiber.return;
        }
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (finishedWork.mode & ProfileMode) {
              startPassiveEffectTimer();
              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              recordPassiveEffectDuration(finishedWork);
            } else {
              commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
            }
            break;
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          setCurrentFiber(fiber);
          commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
          resetCurrentFiber();
          var child = fiber.child;
          if (child !== null) {
            child.return = fiber;
            nextEffect = child;
          } else {
            commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
          }
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        while (nextEffect !== null) {
          var fiber = nextEffect;
          var sibling = fiber.sibling;
          var returnFiber = fiber.return;
          {
            detachFiberAfterEffects(fiber);
            if (fiber === deletedSubtreeRoot) {
              nextEffect = null;
              return;
            }
          }
          if (sibling !== null) {
            sibling.return = returnFiber;
            nextEffect = sibling;
            return;
          }
          nextEffect = returnFiber;
        }
      }
      function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
        switch (current2.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent: {
            if (current2.mode & ProfileMode) {
              startPassiveEffectTimer();
              commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              recordPassiveEffectDuration(current2);
            } else {
              commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
            }
            break;
          }
        }
      }
      function invokeLayoutEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Layout | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance = fiber.stateNode;
              try {
                instance.componentDidMount();
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectMountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListMount(Passive$1 | HasEffect, fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
          }
        }
      }
      function invokeLayoutEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              break;
            }
            case ClassComponent: {
              var instance = fiber.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(fiber, fiber.return, instance);
              }
              break;
            }
          }
        }
      }
      function invokePassiveEffectUnmountInDEV(fiber) {
        {
          switch (fiber.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              try {
                commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
            }
          }
        }
      }
      var COMPONENT_TYPE = 0;
      var HAS_PSEUDO_CLASS_TYPE = 1;
      var ROLE_TYPE = 2;
      var TEST_NAME_TYPE = 3;
      var TEXT_TYPE = 4;
      if (typeof Symbol === "function" && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor("selector.component");
        HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
        ROLE_TYPE = symbolFor("selector.role");
        TEST_NAME_TYPE = symbolFor("selector.test_id");
        TEXT_TYPE = symbolFor("selector.text");
      }
      var commitHooks = [];
      function onCommitRoot$1() {
        {
          commitHooks.forEach(function(commitHook) {
            return commitHook();
          });
        }
      }
      var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
      function isLegacyActEnvironment(fiber) {
        {
          var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
          var jestIsDefined = typeof jest !== "undefined";
          return jestIsDefined && isReactActEnvironmentGlobal !== false;
        }
      }
      function isConcurrentActEnvironment() {
        {
          var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : undefined;
          if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
            error("The current testing environment is not configured to support act(...)");
          }
          return isReactActEnvironmentGlobal;
        }
      }
      var ceil = Math.ceil;
      var { ReactCurrentDispatcher: ReactCurrentDispatcher$2, ReactCurrentOwner: ReactCurrentOwner$2, ReactCurrentBatchConfig: ReactCurrentBatchConfig$3, ReactCurrentActQueue: ReactCurrentActQueue$1 } = ReactSharedInternals;
      var NoContext = 0;
      var BatchedContext = 1;
      var RenderContext = 2;
      var CommitContext = 4;
      var RootInProgress = 0;
      var RootFatalErrored = 1;
      var RootErrored = 2;
      var RootSuspended = 3;
      var RootSuspendedWithDelay = 4;
      var RootCompleted = 5;
      var RootDidNotComplete = 6;
      var executionContext = NoContext;
      var workInProgressRoot = null;
      var workInProgress = null;
      var workInProgressRootRenderLanes = NoLanes;
      var subtreeRenderLanes = NoLanes;
      var subtreeRenderLanesCursor = createCursor(NoLanes);
      var workInProgressRootExitStatus = RootInProgress;
      var workInProgressRootFatalError = null;
      var workInProgressRootIncludedLanes = NoLanes;
      var workInProgressRootSkippedLanes = NoLanes;
      var workInProgressRootInterleavedUpdatedLanes = NoLanes;
      var workInProgressRootPingedLanes = NoLanes;
      var workInProgressRootConcurrentErrors = null;
      var workInProgressRootRecoverableErrors = null;
      var globalMostRecentFallbackTime = 0;
      var FALLBACK_THROTTLE_MS = 500;
      var workInProgressRootRenderTargetTime = Infinity;
      var RENDER_TIMEOUT_MS = 500;
      var workInProgressTransitions = null;
      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
      }
      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
      }
      var hasUncaughtError = false;
      var firstUncaughtError = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var rootDoesHavePassiveEffects = false;
      var rootWithPendingPassiveEffects = null;
      var pendingPassiveEffectsLanes = NoLanes;
      var pendingPassiveProfilerEffects = [];
      var pendingPassiveTransitions = null;
      var NESTED_UPDATE_LIMIT = 50;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      var isFlushingPassiveEffects = false;
      var didScheduleUpdateDuringPassiveEffects = false;
      var NESTED_PASSIVE_UPDATE_LIMIT = 50;
      var nestedPassiveUpdateCount = 0;
      var rootWithPassiveNestedUpdates = null;
      var currentEventTime = NoTimestamp;
      var currentEventTransitionLane = NoLanes;
      var isRunningInsertionEffect = false;
      function getWorkInProgressRoot() {
        return workInProgressRoot;
      }
      function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          return now();
        }
        if (currentEventTime !== NoTimestamp) {
          return currentEventTime;
        }
        currentEventTime = now();
        return currentEventTime;
      }
      function requestUpdateLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
          return pickArbitraryLane(workInProgressRootRenderLanes);
        }
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
          if (ReactCurrentBatchConfig$3.transition !== null) {
            var transition = ReactCurrentBatchConfig$3.transition;
            if (!transition._updatedFibers) {
              transition._updatedFibers = new Set;
            }
            transition._updatedFibers.add(fiber);
          }
          if (currentEventTransitionLane === NoLane) {
            currentEventTransitionLane = claimNextTransitionLane();
          }
          return currentEventTransitionLane;
        }
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane) {
          return updateLane;
        }
        var eventLane = getCurrentEventPriority();
        return eventLane;
      }
      function requestRetryLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) {
          return SyncLane;
        }
        return claimNextRetryLane();
      }
      function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
        checkForNestedUpdates();
        {
          if (isRunningInsertionEffect) {
            error("useInsertionEffect must not schedule updates.");
          }
        }
        {
          if (isFlushingPassiveEffects) {
            didScheduleUpdateDuringPassiveEffects = true;
          }
        }
        markRootUpdated(root2, lane, eventTime);
        if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
          warnAboutRenderPhaseUpdatesInDEV(fiber);
        } else {
          {
            if (isDevToolsPresent) {
              addFiberToLanesMap(root2, fiber, lane);
            }
          }
          warnIfUpdatesNotWrappedWithActDEV(fiber);
          if (root2 === workInProgressRoot) {
            if ((executionContext & RenderContext) === NoContext) {
              workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
            }
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspended$1(root2, workInProgressRootRenderLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
          if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
            resetRenderTimer();
            flushSyncCallbacksOnlyInLegacyMode();
          }
        }
      }
      function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
        var current2 = root2.current;
        current2.lanes = lane;
        markRootUpdated(root2, lane, eventTime);
        ensureRootIsScheduled(root2, eventTime);
      }
      function isUnsafeClassRenderPhaseUpdate(fiber) {
        return (executionContext & RenderContext) !== NoContext;
      }
      function ensureRootIsScheduled(root2, currentTime) {
        var existingCallbackNode = root2.callbackNode;
        markStarvedLanesAsExpired(root2, currentTime);
        var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
          if (existingCallbackNode !== null) {
            cancelCallback$1(existingCallbackNode);
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          return;
        }
        var newCallbackPriority = getHighestPriorityLane(nextLanes);
        var existingCallbackPriority = root2.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
          {
            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
              error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return;
        }
        if (existingCallbackNode != null) {
          cancelCallback$1(existingCallbackNode);
        }
        var newCallbackNode;
        if (newCallbackPriority === SyncLane) {
          if (root2.tag === LegacyRoot) {
            if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
              ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
            }
            scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
          } else {
            scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
          }
          {
            if (ReactCurrentActQueue$1.current !== null) {
              ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
            } else {
              scheduleMicrotask(function() {
                if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                  flushSyncCallbacks();
                }
              });
            }
          }
          newCallbackNode = null;
        } else {
          var schedulerPriorityLevel;
          switch (lanesToEventPriority(nextLanes)) {
            case DiscreteEventPriority:
              schedulerPriorityLevel = ImmediatePriority;
              break;
            case ContinuousEventPriority:
              schedulerPriorityLevel = UserBlockingPriority;
              break;
            case DefaultEventPriority:
              schedulerPriorityLevel = NormalPriority;
              break;
            case IdleEventPriority:
              schedulerPriorityLevel = IdlePriority;
              break;
            default:
              schedulerPriorityLevel = NormalPriority;
              break;
          }
          newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
        }
        root2.callbackPriority = newCallbackPriority;
        root2.callbackNode = newCallbackNode;
      }
      function performConcurrentWorkOnRoot(root2, didTimeout) {
        {
          resetNestedUpdateFlag();
        }
        currentEventTime = NoTimestamp;
        currentEventTransitionLane = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var originalCallbackNode = root2.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
          if (root2.callbackNode !== originalCallbackNode) {
            return null;
          }
        }
        var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) {
          return null;
        }
        var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
        if (exitStatus !== RootInProgress) {
          if (exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            markRootSuspended$1(root2, lanes);
          } else {
            var renderWasConcurrent = !includesBlockingLane(root2, lanes);
            var finishedWork = root2.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
              exitStatus = renderRootSync(root2, lanes);
              if (exitStatus === RootErrored) {
                var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (_errorRetryLanes !== NoLanes) {
                  lanes = _errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var _fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw _fatalError;
              }
            }
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            finishConcurrentRender(root2, exitStatus, lanes);
          }
        }
        ensureRootIsScheduled(root2, now());
        if (root2.callbackNode === originalCallbackNode) {
          return performConcurrentWorkOnRoot.bind(null, root2);
        }
        return null;
      }
      function recoverFromConcurrentError(root2, errorRetryLanes) {
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root2)) {
          var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
          rootWorkInProgress.flags |= ForceClientRender;
          {
            errorHydratingContainer(root2.containerInfo);
          }
        }
        var exitStatus = renderRootSync(root2, errorRetryLanes);
        if (exitStatus !== RootErrored) {
          var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
          workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
          if (errorsFromSecondAttempt !== null) {
            queueRecoverableErrors(errorsFromSecondAttempt);
          }
        }
        return exitStatus;
      }
      function queueRecoverableErrors(errors) {
        if (workInProgressRootRecoverableErrors === null) {
          workInProgressRootRecoverableErrors = errors;
        } else {
          workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
        }
      }
      function finishConcurrentRender(root2, exitStatus, lanes) {
        switch (exitStatus) {
          case RootInProgress:
          case RootFatalErrored: {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          case RootErrored: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspended: {
            markRootSuspended$1(root2, lanes);
            if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
              var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root2, NoLanes);
                if (nextLanes !== NoLanes) {
                  break;
                }
                var suspendedLanes = root2.suspendedLanes;
                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  var eventTime = requestEventTime();
                  markRootPinged(root2, suspendedLanes);
                  break;
                }
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootSuspendedWithDelay: {
            markRootSuspended$1(root2, lanes);
            if (includesOnlyTransitions(lanes)) {
              break;
            }
            if (!shouldForceFlushFallbacksInDEV()) {
              var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
              var eventTimeMs = mostRecentEventTime;
              var timeElapsedMs = now() - eventTimeMs;
              var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
              if (_msUntilTimeout > 10) {
                root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                break;
              }
            }
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          case RootCompleted: {
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            break;
          }
          default: {
            throw new Error("Unknown root exit status.");
          }
        }
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        var node = finishedWork;
        while (true) {
          if (node.flags & StoreConsistency) {
            var updateQueue = node.updateQueue;
            if (updateQueue !== null) {
              var checks = updateQueue.stores;
              if (checks !== null) {
                for (var i = 0;i < checks.length; i++) {
                  var check = checks[i];
                  var getSnapshot = check.getSnapshot;
                  var renderedValue = check.value;
                  try {
                    if (!objectIs(getSnapshot(), renderedValue)) {
                      return false;
                    }
                  } catch (error2) {
                    return false;
                  }
                }
              }
            }
          }
          var child = node.child;
          if (node.subtreeFlags & StoreConsistency && child !== null) {
            child.return = node;
            node = child;
            continue;
          }
          if (node === finishedWork) {
            return true;
          }
          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork) {
              return true;
            }
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return true;
      }
      function markRootSuspended$1(root2, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
        markRootSuspended(root2, suspendedLanes);
      }
      function performSyncWorkOnRoot(root2) {
        {
          syncNestedUpdateFlag();
        }
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        flushPassiveEffects();
        var lanes = getNextLanes(root2, NoLanes);
        if (!includesSomeLane(lanes, SyncLane)) {
          ensureRootIsScheduled(root2, now());
          return null;
        }
        var exitStatus = renderRootSync(root2, lanes);
        if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
          var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
          if (errorRetryLanes !== NoLanes) {
            lanes = errorRetryLanes;
            exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
          }
        }
        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError;
          prepareFreshStack(root2, NoLanes);
          markRootSuspended$1(root2, lanes);
          ensureRootIsScheduled(root2, now());
          throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) {
          throw new Error("Root did not complete. This is a bug in React.");
        }
        var finishedWork = root2.current.alternate;
        root2.finishedWork = finishedWork;
        root2.finishedLanes = lanes;
        commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
        ensureRootIsScheduled(root2, now());
        return null;
      }
      function flushRoot(root2, lanes) {
        if (lanes !== NoLanes) {
          markRootEntangled(root2, mergeLanes(lanes, SyncLane));
          ensureRootIsScheduled(root2, now());
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            resetRenderTimer();
            flushSyncCallbacks();
          }
        }
      }
      function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
          return fn(a);
        } finally {
          executionContext = prevExecutionContext;
          if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
            resetRenderTimer();
            flushSyncCallbacksOnlyInLegacyMode();
          }
        }
      }
      function discreteUpdates(fn, a, b, c, d) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          return fn(a, b, c, d);
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
          if (executionContext === NoContext) {
            resetRenderTimer();
          }
        }
      }
      function flushSync(fn) {
        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
          flushPassiveEffects();
        }
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          if (fn) {
            return fn();
          } else {
            return;
          }
        } finally {
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
          executionContext = prevExecutionContext;
          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushSyncCallbacks();
          }
        }
      }
      function isAlreadyRendering() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
      }
      function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
      }
      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
      }
      function prepareFreshStack(root2, lanes) {
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        var timeoutHandle = root2.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
          root2.timeoutHandle = noTimeout;
          cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return;
          while (interruptedWork !== null) {
            var current2 = interruptedWork.alternate;
            unwindInterruptedWork(current2, interruptedWork);
            interruptedWork = interruptedWork.return;
          }
        }
        workInProgressRoot = root2;
        var rootWorkInProgress = createWorkInProgress(root2.current, null);
        workInProgress = rootWorkInProgress;
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootInterleavedUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        workInProgressRootConcurrentErrors = null;
        workInProgressRootRecoverableErrors = null;
        finishQueueingConcurrentUpdates();
        {
          ReactStrictModeWarnings.discardPendingWarnings();
        }
        return rootWorkInProgress;
      }
      function handleError(root2, thrownValue) {
        do {
          var erroredWork = workInProgress;
          try {
            resetContextDependencies();
            resetHooksAfterThrow();
            resetCurrentFiber();
            ReactCurrentOwner$2.current = null;
            if (erroredWork === null || erroredWork.return === null) {
              workInProgressRootExitStatus = RootFatalErrored;
              workInProgressRootFatalError = thrownValue;
              workInProgress = null;
              return;
            }
            if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
              stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
            }
            if (enableSchedulingProfiler) {
              markComponentRenderStopped();
              if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                var wakeable = thrownValue;
                markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
              } else {
                markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
              }
            }
            throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
            completeUnitOfWork(erroredWork);
          } catch (yetAnotherThrownValue) {
            thrownValue = yetAnotherThrownValue;
            if (workInProgress === erroredWork && erroredWork !== null) {
              erroredWork = erroredWork.return;
              workInProgress = erroredWork;
            } else {
              erroredWork = workInProgress;
            }
            continue;
          }
          return;
        } while (true);
      }
      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) {
          return ContextOnlyDispatcher;
        } else {
          return prevDispatcher;
        }
      }
      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
      }
      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
      }
      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
      }
      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootSuspended;
        }
      }
      function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
          workInProgressRootExitStatus = RootSuspendedWithDelay;
        }
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
          markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
        }
      }
      function renderDidError(error2) {
        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
          workInProgressRootExitStatus = RootErrored;
        }
        if (workInProgressRootConcurrentErrors === null) {
          workInProgressRootConcurrentErrors = [error2];
        } else {
          workInProgressRootConcurrentErrors.push(error2);
        }
      }
      function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootInProgress;
      }
      function renderRootSync(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root2, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          prepareFreshStack(root2, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        do {
          try {
            workLoopSync();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) {
          throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        }
        {
          markRenderStopped();
        }
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
      }
      function workLoopSync() {
        while (workInProgress !== null) {
          performUnitOfWork(workInProgress);
        }
      }
      function renderRootConcurrent(root2, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              if (memoizedUpdaters.size > 0) {
                restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                memoizedUpdaters.clear();
              }
              movePendingFibersToMemoized(root2, lanes);
            }
          }
          workInProgressTransitions = getTransitionsForLanes();
          resetRenderTimer();
          prepareFreshStack(root2, lanes);
        }
        {
          markRenderStarted(lanes);
        }
        do {
          try {
            workLoopConcurrent();
            break;
          } catch (thrownValue) {
            handleError(root2, thrownValue);
          }
        } while (true);
        resetContextDependencies();
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) {
          {
            markRenderYielded();
          }
          return RootInProgress;
        } else {
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
      }
      function workLoopConcurrent() {
        while (workInProgress !== null && !shouldYield()) {
          performUnitOfWork(workInProgress);
        }
      }
      function performUnitOfWork(unitOfWork) {
        var current2 = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork);
          next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else {
          next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
        }
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) {
          completeUnitOfWork(unitOfWork);
        } else {
          workInProgress = next;
        }
        ReactCurrentOwner$2.current = null;
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          var current2 = completedWork.alternate;
          var returnFiber = completedWork.return;
          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork);
            var next = undefined;
            if ((completedWork.mode & ProfileMode) === NoMode) {
              next = completeWork(current2, completedWork, subtreeRenderLanes);
            } else {
              startProfilerTimer(completedWork);
              next = completeWork(current2, completedWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
            }
            resetCurrentFiber();
            if (next !== null) {
              workInProgress = next;
              return;
            }
          } else {
            var _next = unwindWork(current2, completedWork);
            if (_next !== null) {
              _next.flags &= HostEffectMask;
              workInProgress = _next;
              return;
            }
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              var actualDuration = completedWork.actualDuration;
              var child = completedWork.child;
              while (child !== null) {
                actualDuration += child.actualDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
            }
            if (returnFiber !== null) {
              returnFiber.flags |= Incomplete;
              returnFiber.subtreeFlags = NoFlags;
              returnFiber.deletions = null;
            } else {
              workInProgressRootExitStatus = RootDidNotComplete;
              workInProgress = null;
              return;
            }
          }
          var siblingFiber = completedWork.sibling;
          if (siblingFiber !== null) {
            workInProgress = siblingFiber;
            return;
          }
          completedWork = returnFiber;
          workInProgress = completedWork;
        } while (completedWork !== null);
        if (workInProgressRootExitStatus === RootInProgress) {
          workInProgressRootExitStatus = RootCompleted;
        }
      }
      function commitRoot(root2, recoverableErrors, transitions) {
        var previousUpdateLanePriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
          ReactCurrentBatchConfig$3.transition = null;
          setCurrentUpdatePriority(DiscreteEventPriority);
          commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally {
          ReactCurrentBatchConfig$3.transition = prevTransition;
          setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
      }
      function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
        do {
          flushPassiveEffects();
        } while (rootWithPendingPassiveEffects !== null);
        flushRenderPhaseStrictModeWarningsInDEV();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Should not already be working.");
        }
        var finishedWork = root2.finishedWork;
        var lanes = root2.finishedLanes;
        {
          markCommitStarted(lanes);
        }
        if (finishedWork === null) {
          {
            markCommitStopped();
          }
          return null;
        } else {
          {
            if (lanes === NoLanes) {
              error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
            }
          }
        }
        root2.finishedWork = null;
        root2.finishedLanes = NoLanes;
        if (finishedWork === root2.current) {
          throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        }
        root2.callbackNode = null;
        root2.callbackPriority = NoLane;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root2, remainingLanes);
        if (root2 === workInProgressRoot) {
          workInProgressRoot = null;
          workInProgress = null;
          workInProgressRootRenderLanes = NoLanes;
        }
        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            pendingPassiveTransitions = transitions;
            scheduleCallback$1(NormalPriority, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          ReactCurrentBatchConfig$3.transition = null;
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(DiscreteEventPriority);
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          ReactCurrentOwner$2.current = null;
          var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
          {
            recordCommitTime();
          }
          commitMutationEffects(root2, finishedWork, lanes);
          resetAfterCommit(root2.containerInfo);
          root2.current = finishedWork;
          {
            markLayoutEffectsStarted(lanes);
          }
          commitLayoutEffects(finishedWork, root2, lanes);
          {
            markLayoutEffectsStopped();
          }
          requestPaint();
          executionContext = prevExecutionContext;
          setCurrentUpdatePriority(previousPriority);
          ReactCurrentBatchConfig$3.transition = prevTransition;
        } else {
          root2.current = finishedWork;
          {
            recordCommitTime();
          }
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = false;
          rootWithPendingPassiveEffects = root2;
          pendingPassiveEffectsLanes = lanes;
        } else {
          {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
          }
        }
        remainingLanes = root2.pendingLanes;
        if (remainingLanes === NoLanes) {
          legacyErrorBoundariesThatAlreadyFailed = null;
        }
        {
          if (!rootDidHavePassiveEffects) {
            commitDoubleInvokeEffectsInDEV(root2.current, false);
          }
        }
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        {
          if (isDevToolsPresent) {
            root2.memoizedUpdaters.clear();
          }
        }
        {
          onCommitRoot$1();
        }
        ensureRootIsScheduled(root2, now());
        if (recoverableErrors !== null) {
          var onRecoverableError = root2.onRecoverableError;
          for (var i = 0;i < recoverableErrors.length; i++) {
            var recoverableError = recoverableErrors[i];
            var componentStack = recoverableError.stack;
            var digest = recoverableError.digest;
            onRecoverableError(recoverableError.value, {
              componentStack,
              digest
            });
          }
        }
        if (hasUncaughtError) {
          hasUncaughtError = false;
          var error$1 = firstUncaughtError;
          firstUncaughtError = null;
          throw error$1;
        }
        if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
          flushPassiveEffects();
        }
        remainingLanes = root2.pendingLanes;
        if (includesSomeLane(remainingLanes, SyncLane)) {
          {
            markNestedUpdateScheduled();
          }
          if (root2 === rootWithNestedUpdates) {
            nestedUpdateCount++;
          } else {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = root2;
          }
        } else {
          nestedUpdateCount = 0;
        }
        flushSyncCallbacks();
        {
          markCommitStopped();
        }
        return null;
      }
      function flushPassiveEffects() {
        if (rootWithPendingPassiveEffects !== null) {
          var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
          var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(priority);
            return flushPassiveEffectsImpl();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          }
        }
        return false;
      }
      function enqueuePendingPassiveProfilerEffect(fiber) {
        {
          pendingPassiveProfilerEffects.push(fiber);
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback$1(NormalPriority, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
      }
      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false;
        }
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root2 = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
          throw new Error("Cannot flush passive effects while already rendering.");
        }
        {
          isFlushingPassiveEffects = true;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        {
          markPassiveEffectsStarted(lanes);
        }
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountEffects(root2.current);
        commitPassiveMountEffects(root2, root2.current, lanes, transitions);
        {
          var profilerEffects = pendingPassiveProfilerEffects;
          pendingPassiveProfilerEffects = [];
          for (var i = 0;i < profilerEffects.length; i++) {
            var _fiber = profilerEffects[i];
            commitPassiveEffectDurations(root2, _fiber);
          }
        }
        {
          markPassiveEffectsStopped();
        }
        {
          commitDoubleInvokeEffectsInDEV(root2.current, true);
        }
        executionContext = prevExecutionContext;
        flushSyncCallbacks();
        {
          if (didScheduleUpdateDuringPassiveEffects) {
            if (root2 === rootWithPassiveNestedUpdates) {
              nestedPassiveUpdateCount++;
            } else {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = root2;
            }
          } else {
            nestedPassiveUpdateCount = 0;
          }
          isFlushingPassiveEffects = false;
          didScheduleUpdateDuringPassiveEffects = false;
        }
        onPostCommitRoot(root2);
        {
          var stateNode = root2.current.stateNode;
          stateNode.effectDuration = 0;
          stateNode.passiveEffectDuration = 0;
        }
        return true;
      }
      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
      }
      function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance);
        }
      }
      function prepareToThrowUncaughtError(error2) {
        if (!hasUncaughtError) {
          hasUncaughtError = true;
          firstUncaughtError = error2;
        }
      }
      var onUncaughtError = prepareToThrowUncaughtError;
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
        var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        var root2 = enqueueUpdate(rootFiber, update, SyncLane);
        var eventTime = requestEventTime();
        if (root2 !== null) {
          markRootUpdated(root2, SyncLane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        {
          reportUncaughtErrorInDEV(error$1);
          setIsRunningInsertionEffect(false);
        }
        if (sourceFiber.tag === HostRoot) {
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
          return;
        }
        var fiber = null;
        {
          fiber = nearestMountedAncestor;
        }
        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
            return;
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type;
            var instance = fiber.stateNode;
            if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
              var root2 = enqueueUpdate(fiber, update, SyncLane);
              var eventTime = requestEventTime();
              if (root2 !== null) {
                markRootUpdated(root2, SyncLane, eventTime);
                ensureRootIsScheduled(root2, eventTime);
              }
              return;
            }
          }
          fiber = fiber.return;
        }
        {
          error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
        }
      }
      function pingSuspendedRoot(root2, wakeable, pingedLanes) {
        var pingCache = root2.pingCache;
        if (pingCache !== null) {
          pingCache.delete(wakeable);
        }
        var eventTime = requestEventTime();
        markRootPinged(root2, pingedLanes);
        warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
        if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
          if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
            prepareFreshStack(root2, NoLanes);
          } else {
            workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
          }
        }
        ensureRootIsScheduled(root2, eventTime);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        if (retryLane === NoLane) {
          retryLane = requestRetryLane(boundaryFiber);
        }
        var eventTime = requestEventTime();
        var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        if (root2 !== null) {
          markRootUpdated(root2, retryLane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryLane = NoLane;
        if (suspenseState !== null) {
          retryLane = suspenseState.retryLane;
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane;
        var retryCache;
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            break;
          case SuspenseListComponent:
            retryCache = boundaryFiber.stateNode;
            break;
          default:
            throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        if (retryCache !== null) {
          retryCache.delete(wakeable);
        }
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
      }
      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0;
          rootWithNestedUpdates = null;
          throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
          }
        }
      }
      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning();
          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
          }
        }
      }
      function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        {
          setCurrentFiber(fiber);
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
          }
          invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
          if (hasPassiveEffects) {
            invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
          }
          resetCurrentFiber();
        }
      }
      function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        {
          var current2 = firstChild;
          var subtreeRoot = null;
          while (current2 !== null) {
            var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
            if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
              current2 = current2.child;
            } else {
              if ((current2.flags & fiberFlags) !== NoFlags) {
                invokeEffectFn(current2);
              }
              if (current2.sibling !== null) {
                current2 = current2.sibling;
              } else {
                current2 = subtreeRoot = current2.return;
              }
            }
          }
        }
      }
      var didWarnStateUpdateForNotYetMountedComponent = null;
      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            return;
          }
          if (!(fiber.mode & ConcurrentMode)) {
            return;
          }
          var tag = fiber.tag;
          if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
            return;
          }
          var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
              return;
            }
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
          } else {
            didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
          }
          var previousFiber = current;
          try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber);
            } else {
              resetCurrentFiber();
            }
          }
        }
      }
      var beginWork$1;
      {
        var dummyFiber = null;
        beginWork$1 = function(current2, unitOfWork, lanes) {
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
          try {
            return beginWork(current2, unitOfWork, lanes);
          } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
              throw originalError;
            }
            resetContextDependencies();
            resetHooksAfterThrow();
            unwindInterruptedWork(current2, unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) {
              startProfilerTimer(unitOfWork);
            }
            invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
            if (hasCaughtError()) {
              var replayError = clearCaughtError();
              if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                originalError._suppressLogging = true;
              }
            }
            throw originalError;
          }
        };
      }
      var didWarnAboutUpdateInRender = false;
      var didWarnAboutUpdateInRenderForAnotherComponent;
      {
        didWarnAboutUpdateInRenderForAnotherComponent = new Set;
      }
      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        {
          if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                  var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                  error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
              }
              case ClassComponent: {
                if (!didWarnAboutUpdateInRender) {
                  error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                  didWarnAboutUpdateInRender = true;
                }
                break;
              }
            }
          }
        }
      }
      function restorePendingUpdaters(root2, lanes) {
        {
          if (isDevToolsPresent) {
            var memoizedUpdaters = root2.memoizedUpdaters;
            memoizedUpdaters.forEach(function(schedulingFiber) {
              addFiberToLanesMap(root2, schedulingFiber, lanes);
            });
          }
        }
      }
      var fakeActCallbackNode = {};
      function scheduleCallback$1(priorityLevel, callback) {
        {
          var actQueue = ReactCurrentActQueue$1.current;
          if (actQueue !== null) {
            actQueue.push(callback);
            return fakeActCallbackNode;
          } else {
            return scheduleCallback(priorityLevel, callback);
          }
        }
      }
      function cancelCallback$1(callbackNode) {
        if (callbackNode === fakeActCallbackNode) {
          return;
        }
        return cancelCallback(callbackNode);
      }
      function shouldForceFlushFallbacksInDEV() {
        return ReactCurrentActQueue$1.current !== null;
      }
      function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        {
          if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment()) {
              return;
            }
          } else {
            if (!isLegacyActEnvironment()) {
              return;
            }
            if (executionContext !== NoContext) {
              return;
            }
            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
              return;
            }
          }
          if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
      }
      function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
        {
          if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
            error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
          }
        }
      }
      function setIsRunningInsertionEffect(isRunning) {
        {
          isRunningInsertionEffect = isRunning;
        }
      }
      var resolveFamily = null;
      var failedBoundaries = null;
      var setRefreshHandler = function(handler) {
        {
          resolveFamily = handler;
        }
      };
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === undefined) {
            return type;
          }
          return family.current;
        }
      }
      function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            return type;
          }
          var family = resolveFamily(type);
          if (family === undefined) {
            if (type !== null && type !== undefined && typeof type.render === "function") {
              var currentRender = resolveFunctionForHotReloading(type.render);
              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender
                };
                if (type.displayName !== undefined) {
                  syntheticType.displayName = type.displayName;
                }
                return syntheticType;
              }
            }
            return type;
          }
          return family.current;
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            return false;
          }
          var prevType = fiber.elementType;
          var nextType = element.type;
          var needsCompareFamilies = false;
          var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
          switch (fiber.tag) {
            case ClassComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              }
              break;
            }
            case FunctionComponent: {
              if (typeof nextType === "function") {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case ForwardRef: {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            case MemoComponent:
            case SimpleMemoComponent: {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                needsCompareFamilies = true;
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true;
              }
              break;
            }
            default:
              return false;
          }
          if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
              return true;
            }
          }
          return false;
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            return;
          }
          if (typeof WeakSet !== "function") {
            return;
          }
          if (failedBoundaries === null) {
            failedBoundaries = new WeakSet;
          }
          failedBoundaries.add(fiber);
        }
      }
      var scheduleRefresh = function(root2, update) {
        {
          if (resolveFamily === null) {
            return;
          }
          var { staleFamilies, updatedFamilies } = update;
          flushPassiveEffects();
          flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
          });
        }
      };
      var scheduleRoot = function(root2, element) {
        {
          if (root2.context !== emptyContextObject) {
            return;
          }
          flushPassiveEffects();
          flushSync(function() {
            updateContainer(element, root2, null, null);
          });
        }
      };
      function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        {
          var { alternate, child, sibling, tag, type } = fiber;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          if (resolveFamily === null) {
            throw new Error("Expected resolveFamily to be set during hot reload.");
          }
          var needsRender = false;
          var needsRemount = false;
          if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
              if (staleFamilies.has(family)) {
                needsRemount = true;
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true;
                } else {
                  needsRender = true;
                }
              }
            }
          }
          if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
              needsRemount = true;
            }
          }
          if (needsRemount) {
            fiber._debugNeedsRemount = true;
          }
          if (needsRemount || needsRender) {
            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (_root !== null) {
              scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
            }
          }
          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
          }
          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
          }
        }
      }
      var findHostInstancesForRefresh = function(root2, families) {
        {
          var hostInstances = new Set;
          var types = new Set(families.map(function(family) {
            return family.current;
          }));
          findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
          return hostInstances;
        }
      };
      function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        {
          var { child, sibling, tag, type } = fiber;
          var candidateType = null;
          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type;
              break;
            case ForwardRef:
              candidateType = type.render;
              break;
          }
          var didMatch = false;
          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true;
            }
          }
          if (didMatch) {
            findHostInstancesForFiberShallowly(fiber, hostInstances);
          } else {
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
            }
          }
          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
          }
        }
      }
      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
          if (foundHostInstances) {
            return;
          }
          var node = fiber;
          while (true) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode);
                return;
              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo);
                return;
              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo);
                return;
            }
            if (node.return === null) {
              throw new Error("Expected to reach root first.");
            }
            node = node.return;
          }
        }
      }
      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node = fiber;
          var foundHostInstances = false;
          while (true) {
            if (node.tag === HostComponent) {
              foundHostInstances = true;
              hostInstances.add(node.stateNode);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === fiber) {
              return foundHostInstances;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === fiber) {
                return foundHostInstances;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return false;
      }
      var hasBadMapPolyfill;
      {
        hasBadMapPolyfill = false;
        try {
          var nonExtensibleObject = Object.preventExtensions({});
          new Map([[nonExtensibleObject, null]]);
          new Set([nonExtensibleObject]);
        } catch (e) {
          hasBadMapPolyfill = true;
        }
      }
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.flags = NoFlags;
        this.subtreeFlags = NoFlags;
        this.deletions = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        {
          this.actualDuration = Number.NaN;
          this.actualStartTime = Number.NaN;
          this.selfBaseDuration = Number.NaN;
          this.treeBaseDuration = Number.NaN;
          this.actualDuration = 0;
          this.actualStartTime = -1;
          this.selfBaseDuration = 0;
          this.treeBaseDuration = 0;
        }
        {
          this._debugSource = null;
          this._debugOwner = null;
          this._debugNeedsRemount = false;
          this._debugHookTypes = null;
          if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
            Object.preventExtensions(this);
          }
        }
      }
      var createFiber = function(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      };
      function shouldConstruct$1(Component2) {
        var prototype = Component2.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function isSimpleFunctionComponent(type) {
        return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === undefined;
      }
      function resolveLazyComponentTag(Component2) {
        if (typeof Component2 === "function") {
          return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
        } else if (Component2 !== undefined && Component2 !== null) {
          var $$typeof = Component2.$$typeof;
          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef;
          }
          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent;
          }
        }
        return IndeterminateComponent;
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        if (workInProgress2 === null) {
          workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
          workInProgress2.elementType = current2.elementType;
          workInProgress2.type = current2.type;
          workInProgress2.stateNode = current2.stateNode;
          {
            workInProgress2._debugSource = current2._debugSource;
            workInProgress2._debugOwner = current2._debugOwner;
            workInProgress2._debugHookTypes = current2._debugHookTypes;
          }
          workInProgress2.alternate = current2;
          current2.alternate = workInProgress2;
        } else {
          workInProgress2.pendingProps = pendingProps;
          workInProgress2.type = current2.type;
          workInProgress2.flags = NoFlags;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.deletions = null;
          {
            workInProgress2.actualDuration = 0;
            workInProgress2.actualStartTime = -1;
          }
        }
        workInProgress2.flags = current2.flags & StaticMask;
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        var currentDependencies = current2.dependencies;
        workInProgress2.dependencies = currentDependencies === null ? null : {
          lanes: currentDependencies.lanes,
          firstContext: currentDependencies.firstContext
        };
        workInProgress2.sibling = current2.sibling;
        workInProgress2.index = current2.index;
        workInProgress2.ref = current2.ref;
        {
          workInProgress2.selfBaseDuration = current2.selfBaseDuration;
          workInProgress2.treeBaseDuration = current2.treeBaseDuration;
        }
        {
          workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress2.type = resolveFunctionForHotReloading(current2.type);
              break;
            case ClassComponent:
              workInProgress2.type = resolveClassForHotReloading(current2.type);
              break;
            case ForwardRef:
              workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
              break;
          }
        }
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= StaticMask | Placement;
        var current2 = workInProgress2.alternate;
        if (current2 === null) {
          workInProgress2.childLanes = NoLanes;
          workInProgress2.lanes = renderLanes2;
          workInProgress2.child = null;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.memoizedProps = null;
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.dependencies = null;
          workInProgress2.stateNode = null;
          {
            workInProgress2.selfBaseDuration = 0;
            workInProgress2.treeBaseDuration = 0;
          }
        } else {
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.subtreeFlags = NoFlags;
          workInProgress2.deletions = null;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.type = current2.type;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
        }
        return workInProgress2;
      }
      function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode;
          if (isStrictMode === true) {
            mode |= StrictLegacyMode;
            {
              mode |= StrictEffectsMode;
            }
          }
        } else {
          mode = NoMode;
        }
        if (isDevToolsPresent) {
          mode |= ProfileMode;
        }
        return createFiber(HostRoot, null, null, mode);
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;
        if (typeof type === "function") {
          if (shouldConstruct$1(type)) {
            fiberTag = ClassComponent;
            {
              resolvedType = resolveClassForHotReloading(resolvedType);
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType);
            }
          }
        } else if (typeof type === "string") {
          fiberTag = HostComponent;
        } else {
          getTag:
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) {
                  mode |= StrictEffectsMode;
                }
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              case REACT_SCOPE_TYPE:
              case REACT_CACHE_TYPE:
              case REACT_TRACING_MARKER_TYPE:
              case REACT_DEBUG_TRACING_MODE_TYPE:
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                  }
                }
                var info = "";
                {
                  if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
              }
            }
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        {
          fiber._debugOwner = owner;
        }
        return fiber;
      }
      function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        {
          owner = element._owner;
        }
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        {
          fiber._debugSource = element._source;
          fiber._debugOwner = element._owner;
        }
        return fiber;
      }
      function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        {
          if (typeof pendingProps.id !== "string") {
            error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
          }
        }
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        {
          fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
          };
        }
        return fiber;
      }
      function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        var primaryChildInstance = {
          isHidden: false
        };
        fiber.stateNode = primaryChildInstance;
        return fiber;
      }
      function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = "DELETED";
        return fiber;
      }
      function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return fiber;
      }
      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          target = createFiber(IndeterminateComponent, null, null, NoMode);
        }
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.subtreeFlags = source.subtreeFlags;
        target.deletions = source.deletions;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        {
          target.actualDuration = source.actualDuration;
          target.actualStartTime = source.actualStartTime;
          target.selfBaseDuration = source.selfBaseDuration;
          target.treeBaseDuration = source.treeBaseDuration;
        }
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
      }
      function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.callbackNode = null;
        this.callbackPriority = NoLane;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.identifierPrefix = identifierPrefix;
        this.onRecoverableError = onRecoverableError;
        {
          this.mutableSourceEagerHydrationData = null;
        }
        {
          this.effectDuration = 0;
          this.passiveEffectDuration = 0;
        }
        {
          this.memoizedUpdaters = new Set;
          var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
          for (var _i = 0;_i < TotalLanes; _i++) {
            pendingUpdatersLaneMap.push(new Set);
          }
        }
        {
          switch (tag) {
            case ConcurrentRoot:
              this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
              break;
            case LegacyRoot:
              this._debugRootType = hydrate2 ? "hydrate()" : "render()";
              break;
          }
        }
      }
      function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root2.current = uninitializedFiber;
        uninitializedFiber.stateNode = root2;
        {
          var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate2,
            cache: null,
            transitions: null,
            pendingSuspenseBoundaries: null
          };
          uninitializedFiber.memoizedState = _initialState;
        }
        initializeUpdateQueue(uninitializedFiber);
        return root2;
      }
      var ReactVersion = "18.2.0";
      function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        {
          checkKeyStringCoercion(key);
        }
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      var didWarnAboutNestedUpdates;
      var didWarnAboutFindNodeInStrictMode;
      {
        didWarnAboutNestedUpdates = false;
        didWarnAboutFindNodeInStrictMode = {};
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject;
        }
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
          var Component2 = fiber.type;
          if (isContextProvider(Component2)) {
            return processChildContext(fiber, Component2, parentContext);
          }
        }
        return parentContext;
      }
      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get(component);
          if (fiber === undefined) {
            if (typeof component.render === "function") {
              throw new Error("Unable to find node on an unmounted component.");
            } else {
              var keys = Object.keys(component).join(",");
              throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
            }
          }
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || "Component";
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true;
              var previousFiber = current;
              try {
                setCurrentFiber(hostFiber);
                if (fiber.mode & StrictLegacyMode) {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } else {
                  error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                }
              } finally {
                if (previousFiber) {
                  setCurrentFiber(previousFiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          return hostFiber.stateNode;
        }
      }
      function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = false;
        var initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
      }
      function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate2 = true;
        var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        root2.context = getContextForSubtree(null);
        var current2 = root2.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current2);
        var update = createUpdate(eventTime, lane);
        update.callback = callback !== undefined && callback !== null ? callback : null;
        enqueueUpdate(current2, update, lane);
        scheduleInitialHydrationOnRoot(root2, lane, eventTime);
        return root2;
      }
      function updateContainer(element, container, parentComponent, callback) {
        {
          onScheduleRoot(container, element);
        }
        var current$1 = container.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current$1);
        {
          markRenderScheduled(lane);
        }
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) {
          container.context = context;
        } else {
          container.pendingContext = context;
        }
        {
          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
          }
        }
        var update = createUpdate(eventTime, lane);
        update.payload = {
          element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
          {
            if (typeof callback !== "function") {
              error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            }
          }
          update.callback = callback;
        }
        var root2 = enqueueUpdate(current$1, update, lane);
        if (root2 !== null) {
          scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
          entangleTransitions(root2, current$1, lane);
        }
        return lane;
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) {
          return null;
        }
        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode);
          default:
            return containerFiber.child.stateNode;
        }
      }
      function attemptSynchronousHydration$1(fiber) {
        switch (fiber.tag) {
          case HostRoot: {
            var root2 = fiber.stateNode;
            if (isRootDehydrated(root2)) {
              var lanes = getHighestPriorityPendingLanes(root2);
              flushRoot(root2, lanes);
            }
            break;
          }
          case SuspenseComponent: {
            flushSync(function() {
              var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root3 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
              }
            });
            var retryLane = SyncLane;
            markRetryLaneIfNotHydrated(fiber, retryLane);
            break;
          }
        }
      }
      function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) {
          suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
        }
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) {
          markRetryLaneImpl(alternate, retryLane);
        }
      }
      function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var lane = SelectiveHydrationLane;
        var root2 = enqueueConcurrentRenderForLane(fiber, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          return;
        }
        var lane = requestUpdateLane(fiber);
        var root2 = enqueueConcurrentRenderForLane(fiber, lane);
        if (root2 !== null) {
          var eventTime = requestEventTime();
          scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      var shouldErrorImpl = function(fiber) {
        return null;
      };
      function shouldError(fiber) {
        return shouldErrorImpl(fiber);
      }
      var shouldSuspendImpl = function(fiber) {
        return false;
      };
      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
      }
      var overrideHookState = null;
      var overrideHookStateDeletePath = null;
      var overrideHookStateRenamePath = null;
      var overrideProps = null;
      var overridePropsDeletePath = null;
      var overridePropsRenamePath = null;
      var scheduleUpdate = null;
      var setErrorHandler = null;
      var setSuspenseHandler = null;
      {
        var copyWithDeleteImpl = function(obj, path, index2) {
          var key = path[index2];
          var updated = isArray(obj) ? obj.slice() : assign({}, obj);
          if (index2 + 1 === path.length) {
            if (isArray(updated)) {
              updated.splice(key, 1);
            } else {
              delete updated[key];
            }
            return updated;
          }
          updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
          return updated;
        };
        var copyWithDelete = function(obj, path) {
          return copyWithDeleteImpl(obj, path, 0);
        };
        var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
          var oldKey = oldPath[index2];
          var updated = isArray(obj) ? obj.slice() : assign({}, obj);
          if (index2 + 1 === oldPath.length) {
            var newKey = newPath[index2];
            updated[newKey] = updated[oldKey];
            if (isArray(updated)) {
              updated.splice(oldKey, 1);
            } else {
              delete updated[oldKey];
            }
          } else {
            updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
          }
          return updated;
        };
        var copyWithRename = function(obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn("copyWithRename() expects paths of the same length");
            return;
          } else {
            for (var i = 0;i < newPath.length - 1; i++) {
              if (oldPath[i] !== newPath[i]) {
                warn("copyWithRename() expects paths to be the same except for the deepest key");
                return;
              }
            }
          }
          return copyWithRenameImpl(obj, oldPath, newPath, 0);
        };
        var copyWithSetImpl = function(obj, path, index2, value) {
          if (index2 >= path.length) {
            return value;
          }
          var key = path[index2];
          var updated = isArray(obj) ? obj.slice() : assign({}, obj);
          updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
          return updated;
        };
        var copyWithSet = function(obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value);
        };
        var findHook = function(fiber, id) {
          var currentHook2 = fiber.memoizedState;
          while (currentHook2 !== null && id > 0) {
            currentHook2 = currentHook2.next;
            id--;
          }
          return currentHook2;
        };
        overrideHookState = function(fiber, id, path, value) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideHookStateDeletePath = function(fiber, id, path) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
          var hook = findHook(fiber, id);
          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
        };
        overrideProps = function(fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        overridePropsDeletePath = function(fiber, path) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        overridePropsRenamePath = function(fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps;
          }
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        scheduleUpdate = function(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        };
        setErrorHandler = function(newShouldErrorImpl) {
          shouldErrorImpl = newShouldErrorImpl;
        };
        setSuspenseHandler = function(newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl;
        };
      }
      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) {
          return null;
        }
        return hostFiber.stateNode;
      }
      function emptyFindFiberByHostInstance(instance) {
        return null;
      }
      function getCurrentFiberForDevTools() {
        return current;
      }
      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState,
          overrideHookStateDeletePath,
          overrideHookStateRenamePath,
          overrideProps,
          overridePropsDeletePath,
          overridePropsRenamePath,
          setErrorHandler,
          setSuspenseHandler,
          scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher2,
          findHostInstanceByFiber,
          findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
          findHostInstancesForRefresh,
          scheduleRefresh,
          scheduleRoot,
          setRefreshHandler,
          getCurrentFiber: getCurrentFiberForDevTools,
          reconcilerVersion: ReactVersion
        });
      }
      var defaultOnRecoverableError = typeof reportError === "function" ? reportError : function(error2) {
        console["error"](error2);
      };
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root2 = this._internalRoot;
        if (root2 === null) {
          throw new Error("Cannot update an unmounted root.");
        }
        {
          if (typeof arguments[1] === "function") {
            error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          } else if (isValidContainer(arguments[1])) {
            error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
          } else if (typeof arguments[1] !== "undefined") {
            error("You passed a second argument to root.render(...) but it only accepts one argument.");
          }
          var container = root2.containerInfo;
          if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root2.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
              }
            }
          }
        }
        updateContainer(children, root2, null, null);
      };
      ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        {
          if (typeof arguments[0] === "function") {
            error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
          }
        }
        var root2 = this._internalRoot;
        if (root2 !== null) {
          this._internalRoot = null;
          var container = root2.containerInfo;
          {
            if (isAlreadyRendering()) {
              error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
            }
          }
          flushSync(function() {
            updateContainer(null, root2, null, null);
          });
          unmarkContainerAsRoot(container);
        }
      };
      function createRoot(container, options2) {
        if (!isValidContainer(container)) {
          throw new Error("createRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        var transitionCallbacks = null;
        if (options2 !== null && options2 !== undefined) {
          {
            if (options2.hydrate) {
              warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
            } else {
              if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
              }
            }
          }
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== undefined) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== undefined) {
            onRecoverableError = options2.onRecoverableError;
          }
          if (options2.transitionCallbacks !== undefined) {
            transitionCallbacks = options2.transitionCallbacks;
          }
        }
        var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        return new ReactDOMRoot(root2);
      }
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      function scheduleHydration(target) {
        if (target) {
          queueExplicitHydrationTarget(target);
        }
      }
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
      function hydrateRoot(container, initialChildren, options2) {
        if (!isValidContainer(container)) {
          throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        }
        warnIfReactDOMContainerInDEV(container);
        {
          if (initialChildren === undefined) {
            error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
          }
        }
        var hydrationCallbacks = options2 != null ? options2 : null;
        var mutableSources = options2 != null && options2.hydratedSources || null;
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = "";
        var onRecoverableError = defaultOnRecoverableError;
        if (options2 !== null && options2 !== undefined) {
          if (options2.unstable_strictMode === true) {
            isStrictMode = true;
          }
          if (options2.identifierPrefix !== undefined) {
            identifierPrefix = options2.identifierPrefix;
          }
          if (options2.onRecoverableError !== undefined) {
            onRecoverableError = options2.onRecoverableError;
          }
        }
        var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root2.current, container);
        listenToAllSupportedEvents(container);
        if (mutableSources) {
          for (var i = 0;i < mutableSources.length; i++) {
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root2, mutableSource);
          }
        }
        return new ReactDOMHydrationRoot(root2);
      }
      function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
      }
      function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
      }
      function warnIfReactDOMContainerInDEV(container) {
        {
          if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
            error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
          }
          if (isContainerMarkedAsRoot(container)) {
            if (container._reactRootContainer) {
              error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
            } else {
              error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
            }
          }
        }
      }
      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
      var topLevelUpdateWarnings;
      {
        topLevelUpdateWarnings = function(container) {
          if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
              }
            }
          }
          var isRootRenderedBySomeReact = !!container._reactRootContainer;
          var rootEl = getReactRootElementInContainer(container);
          var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
          if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
            error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
          }
          if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
            error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
          }
        };
      }
      function getReactRootElementInContainer(container) {
        if (!container) {
          return null;
        }
        if (container.nodeType === DOCUMENT_NODE) {
          return container.documentElement;
        } else {
          return container.firstChild;
        }
      }
      function noopOnRecoverableError() {
      }
      function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          var root2 = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
          container._reactRootContainer = root2;
          markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          flushSync();
          return root2;
        } else {
          var rootSibling;
          while (rootSibling = container.lastChild) {
            container.removeChild(rootSibling);
          }
          if (typeof callback === "function") {
            var _originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(_root);
              _originalCallback.call(instance);
            };
          }
          var _root = createContainer(container, LegacyRoot, null, false, false, "", noopOnRecoverableError);
          container._reactRootContainer = _root;
          markContainerAsRoot(_root.current, container);
          var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(_rootContainerElement);
          flushSync(function() {
            updateContainer(initialChildren, _root, parentComponent, callback);
          });
          return _root;
        }
      }
      function warnOnInvalidCallback$1(callback, callerName) {
        {
          if (callback !== null && typeof callback !== "function") {
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
          }
        }
      }
      function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        {
          topLevelUpdateWarnings(container);
          warnOnInvalidCallback$1(callback === undefined ? null : callback, "render");
        }
        var maybeRoot = container._reactRootContainer;
        var root2;
        if (!maybeRoot) {
          root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        } else {
          root2 = maybeRoot;
          if (typeof callback === "function") {
            var originalCallback = callback;
            callback = function() {
              var instance = getPublicRootInstance(root2);
              originalCallback.call(instance);
            };
          }
          updateContainer(children, root2, parentComponent, callback);
        }
        return getPublicRootInstance(root2);
      }
      function findDOMNode(componentOrElement) {
        {
          var owner = ReactCurrentOwner$3.current;
          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) {
              error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
            }
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }
        if (componentOrElement == null) {
          return null;
        }
        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement;
        }
        {
          return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
        }
      }
      function hydrate(element, container, callback) {
        {
          error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
          if (isModernRoot) {
            error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
      }
      function render(element, container, callback) {
        {
          error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
          if (isModernRoot) {
            error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
          }
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
      }
      function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        {
          error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        }
        if (!isValidContainerLegacy(containerNode)) {
          throw new Error("Target container is not a DOM element.");
        }
        if (parentComponent == null || !has(parentComponent)) {
          throw new Error("parentComponent must be a valid React Component");
        }
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      }
      function unmountComponentAtNode(container) {
        if (!isValidContainerLegacy(container)) {
          throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
        }
        {
          var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
          if (isModernRoot) {
            error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
          }
        }
        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) {
              error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            }
          }
          flushSync(function() {
            legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
              container._reactRootContainer = null;
              unmarkContainerAsRoot(container);
            });
          });
          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) {
              error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            }
          }
          return false;
        }
      }
      setAttemptSynchronousHydration(attemptSynchronousHydration$1);
      setAttemptContinuousHydration(attemptContinuousHydration$1);
      setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
      setGetCurrentUpdatePriority(getCurrentUpdatePriority);
      setAttemptHydrationAtPriority(runWithPriority);
      {
        if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
          error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
        }
      }
      setRestoreImplementation(restoreControlledState$3);
      setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
      function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) {
          throw new Error("Target container is not a DOM element.");
        }
        return createPortal(children, container, null, key);
      }
      function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
      }
      var Internals = {
        usingClientEntryPoint: false,
        Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
      };
      function createRoot$1(container, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
          }
        }
        return createRoot(container, options2);
      }
      function hydrateRoot$1(container, initialChildren, options2) {
        {
          if (!Internals.usingClientEntryPoint && true) {
            error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
          }
        }
        return hydrateRoot(container, initialChildren, options2);
      }
      function flushSync$1(fn) {
        {
          if (isAlreadyRendering()) {
            error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
          }
        }
        return flushSync(fn);
      }
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: "react-dom"
      });
      {
        if (!foundDevTools && canUseDOM && window.top === window.self) {
          if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
            var protocol = window.location.protocol;
            if (/^(https?|file):$/.test(protocol)) {
              console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
            }
          }
        }
      }
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
      exports.createPortal = createPortal$1;
      exports.createRoot = createRoot$1;
      exports.findDOMNode = findDOMNode;
      exports.flushSync = flushSync$1;
      exports.hydrate = hydrate;
      exports.hydrateRoot = hydrateRoot$1;
      exports.render = render;
      exports.unmountComponentAtNode = unmountComponentAtNode;
      exports.unstable_batchedUpdates = batchedUpdates$1;
      exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
      exports.version = ReactVersion;
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error);
      }
    })();
  }
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS((exports, module) => {
  var react_dom_development = __toESM(require_react_dom_development(), 1);
  if (false) {
  } else {
    module.exports = react_dom_development;
  }
});

// node_modules/react-dom/client.js
var require_client = __commonJS((exports) => {
  var m = __toESM(require_react_dom(), 1);
  if (false) {
  } else {
    i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    exports.createRoot = function(c, o) {
      i.usingClientEntryPoint = true;
      try {
        return m.createRoot(c, o);
      } finally {
        i.usingClientEntryPoint = false;
      }
    };
    exports.hydrateRoot = function(c, h, o) {
      i.usingClientEntryPoint = true;
      try {
        return m.hydrateRoot(c, h, o);
      } finally {
        i.usingClientEntryPoint = false;
      }
    };
  }
  var i;
});

// node_modules/relay-runtime/lib/util/RelayFeatureFlags.js
var require_RelayFeatureFlags = __commonJS((exports, module) => {
  var RelayFeatureFlags = {
    ENABLE_CLIENT_EDGES: false,
    ENABLE_VARIABLE_CONNECTION_KEY: false,
    ENABLE_RELAY_RESOLVERS: false,
    ENABLE_GETFRAGMENTIDENTIFIER_OPTIMIZATION: false,
    ENABLE_FRIENDLY_QUERY_NAME_GQL_URL: false,
    ENABLE_LOAD_QUERY_REQUEST_DEDUPING: true,
    ENABLE_DO_NOT_WRAP_LIVE_QUERY: false,
    ENABLE_NOTIFY_SUBSCRIPTION: false,
    BATCH_ASYNC_MODULE_UPDATES_FN: null,
    ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT: false,
    MAX_DATA_ID_LENGTH: null,
    STRING_INTERN_LEVEL: 0,
    LOG_MISSING_RECORDS_IN_PROD: false,
    ENABLE_LOOSE_SUBSCRIPTION_ATTRIBUTION: false,
    ENABLE_OPERATION_TRACKER_OPTIMISTIC_UPDATES: false,
    ENABLE_RELAY_OPERATION_TRACKER_SUSPENSE: false,
    ENABLE_FIELD_ERROR_HANDLING: false,
    ENABLE_SHALLOW_FREEZE_RESOLVER_VALUES: true
  };
  module.exports = RelayFeatureFlags;
});

// node_modules/relay-runtime/lib/util/StringInterner.js
var require_StringInterner = __commonJS((exports, module) => {
  var initDigitTable = function() {
    var digits2 = new Set;
    for (var i = 0;i < 10; ++i) {
      digits2.add(i.toString());
    }
    return digits2;
  };
  var escape = function(str) {
    if (str[0] === INTERN_PREFIX && digits.has(str[1]) || str[0] === ESCAPE_PREFIX) {
      return ESCAPE_PREFIX + str;
    }
    return str;
  };
  var intern = function(str, limit) {
    if (limit == null || str.length < limit) {
      return escape(str);
    }
    var internedString = internTable.get(str);
    if (internedString != null) {
      return internedString;
    }
    internedString = INTERN_PREFIX + nextIndex++;
    internTable.set(str, internedString);
    return internedString;
  };
  var internTable = new Map;
  var nextIndex = 1;
  var digits = initDigitTable();
  var INTERN_PREFIX = "\t";
  var ESCAPE_PREFIX = "\v";
  module.exports = {
    intern
  };
});

// node_modules/relay-runtime/lib/store/ClientID.js
var require_ClientID = __commonJS((exports, module) => {
  var generateClientID = function(id, storageKey, index) {
    var internedId = RelayFeatureFlags.STRING_INTERN_LEVEL <= 0 ? id : intern(id, RelayFeatureFlags.MAX_DATA_ID_LENGTH);
    var key = internedId + ":" + storageKey;
    if (index != null) {
      key += ":" + index;
    }
    if (key.indexOf(PREFIX) !== 0) {
      key = PREFIX + key;
    }
    return key;
  };
  var isClientID = function(id) {
    return id.indexOf(PREFIX) === 0;
  };
  var generateUniqueClientID = function() {
    return "".concat(PREFIX, "local:").concat(localID++);
  };
  var generateClientObjectClientID = function(typename, localId, index) {
    var key = "".concat(PREFIX).concat(typename, ":").concat(localId);
    if (index != null) {
      key += ":" + index;
    }
    return key;
  };
  var RelayFeatureFlags = require_RelayFeatureFlags();
  var _require = require_StringInterner();
  var intern = _require.intern;
  var PREFIX = "client:";
  var localID = 0;
  module.exports = {
    generateClientID,
    generateClientObjectClientID,
    generateUniqueClientID,
    isClientID
  };
});

// node_modules/@babel/runtime/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS((exports, module) => {
  var _interopRequireDefault = function(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  };
  module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/@babel/runtime/helpers/arrayLikeToArray.js
var require_arrayLikeToArray = __commonJS((exports, module) => {
  var _arrayLikeToArray = function(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len);i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  };
  module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/@babel/runtime/helpers/arrayWithoutHoles.js
var require_arrayWithoutHoles = __commonJS((exports, module) => {
  var _arrayWithoutHoles = function(arr) {
    if (Array.isArray(arr))
      return arrayLikeToArray(arr);
  };
  var arrayLikeToArray = require_arrayLikeToArray();
  module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/@babel/runtime/helpers/iterableToArray.js
var require_iterableToArray = __commonJS((exports, module) => {
  var _iterableToArray = function(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  };
  module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js
var require_unsupportedIterableToArray = __commonJS((exports, module) => {
  var _unsupportedIterableToArray = function(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return arrayLikeToArray(o, minLen);
  };
  var arrayLikeToArray = require_arrayLikeToArray();
  module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/@babel/runtime/helpers/nonIterableSpread.js
var require_nonIterableSpread = __commonJS((exports, module) => {
  var _nonIterableSpread = function() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  };
  module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/@babel/runtime/helpers/toConsumableArray.js
var require_toConsumableArray = __commonJS((exports, module) => {
  var _toConsumableArray = function(arr) {
    return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
  };
  var arrayWithoutHoles = require_arrayWithoutHoles();
  var iterableToArray = require_iterableToArray();
  var unsupportedIterableToArray = require_unsupportedIterableToArray();
  var nonIterableSpread = require_nonIterableSpread();
  module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/relay-runtime/lib/util/RelayDefaultHandleKey.js
var require_RelayDefaultHandleKey = __commonJS((exports, module) => {
  module.exports = {
    DEFAULT_HANDLE_KEY: ""
  };
});

// node_modules/invariant/browser.js
var require_browser = __commonJS((exports, module) => {
  var invariant = function(condition, format, a, b, c, d, e, f) {
    if (true) {
      if (format === undefined) {
        throw new Error("invariant requires an error message argument");
      }
    }
    if (!condition) {
      var error;
      if (format === undefined) {
        error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
      } else {
        var args = [a, b, c, d, e, f];
        var argIndex = 0;
        error = new Error(format.replace(/%s/g, function() {
          return args[argIndex++];
        }));
        error.name = "Invariant Violation";
      }
      error.framesToPop = 1;
      throw error;
    }
  };
  module.exports = invariant;
});

// node_modules/relay-runtime/lib/util/getRelayHandleKey.js
var require_getRelayHandleKey = __commonJS((exports, module) => {
  var getRelayHandleKey = function(handleName, key, fieldName) {
    if (key && key !== DEFAULT_HANDLE_KEY) {
      return "__".concat(key, "_").concat(handleName);
    }
    !(fieldName != null) && invariant(false, "getRelayHandleKey: Expected either `fieldName` or `key` in `handle` to be provided");
    return "__".concat(fieldName, "_").concat(handleName);
  };
  var _require = require_RelayDefaultHandleKey();
  var DEFAULT_HANDLE_KEY = _require.DEFAULT_HANDLE_KEY;
  var invariant = require_browser();
  module.exports = getRelayHandleKey;
});

// node_modules/relay-runtime/lib/util/RelayConcreteNode.js
var require_RelayConcreteNode = __commonJS((exports, module) => {
  var RelayConcreteNode = {
    ACTOR_CHANGE: "ActorChange",
    CONDITION: "Condition",
    CLIENT_COMPONENT: "ClientComponent",
    CLIENT_EDGE_TO_SERVER_OBJECT: "ClientEdgeToServerObject",
    CLIENT_EDGE_TO_CLIENT_OBJECT: "ClientEdgeToClientObject",
    CLIENT_EXTENSION: "ClientExtension",
    DEFER: "Defer",
    CONNECTION: "Connection",
    FRAGMENT: "Fragment",
    FRAGMENT_SPREAD: "FragmentSpread",
    INLINE_DATA_FRAGMENT_SPREAD: "InlineDataFragmentSpread",
    INLINE_DATA_FRAGMENT: "InlineDataFragment",
    INLINE_FRAGMENT: "InlineFragment",
    LINKED_FIELD: "LinkedField",
    LINKED_HANDLE: "LinkedHandle",
    LITERAL: "Literal",
    LIST_VALUE: "ListValue",
    LOCAL_ARGUMENT: "LocalArgument",
    MODULE_IMPORT: "ModuleImport",
    ALIASED_FRAGMENT_SPREAD: "AliasedFragmentSpread",
    ALIASED_INLINE_FRAGMENT_SPREAD: "AliasedInlineFragmentSpread",
    RELAY_RESOLVER: "RelayResolver",
    RELAY_LIVE_RESOLVER: "RelayLiveResolver",
    REQUIRED_FIELD: "RequiredField",
    OBJECT_VALUE: "ObjectValue",
    OPERATION: "Operation",
    REQUEST: "Request",
    ROOT_ARGUMENT: "RootArgument",
    SCALAR_FIELD: "ScalarField",
    SCALAR_HANDLE: "ScalarHandle",
    SPLIT_OPERATION: "SplitOperation",
    STREAM: "Stream",
    TYPE_DISCRIMINATOR: "TypeDiscriminator",
    UPDATABLE_QUERY: "UpdatableQuery",
    VARIABLE: "Variable"
  };
  module.exports = RelayConcreteNode;
});

// node_modules/relay-runtime/lib/util/stableCopy.js
var require_stableCopy = __commonJS((exports, module) => {
  var stableCopy = function(value) {
    if (!value || typeof value !== "object") {
      return value;
    }
    if (Array.isArray(value)) {
      return value.map(stableCopy);
    }
    var keys = Object.keys(value).sort();
    var stable = {};
    for (var i = 0;i < keys.length; i++) {
      stable[keys[i]] = stableCopy(value[keys[i]]);
    }
    return stable;
  };
  module.exports = stableCopy;
});

// node_modules/relay-runtime/lib/store/RelayStoreUtils.js
var require_RelayStoreUtils = __commonJS((exports, module) => {
  var getArgumentValue = function(arg, variables) {
    if (arg.kind === VARIABLE) {
      return getStableVariableValue(arg.variableName, variables);
    } else if (arg.kind === LITERAL) {
      return arg.value;
    } else if (arg.kind === OBJECT_VALUE) {
      var value = {};
      arg.fields.forEach(function(field) {
        value[field.name] = getArgumentValue(field, variables);
      });
      return value;
    } else if (arg.kind === LIST_VALUE) {
      var _value = [];
      arg.items.forEach(function(item) {
        item != null && _value.push(getArgumentValue(item, variables));
      });
      return _value;
    }
  };
  var getArgumentValues = function(args, variables, isWithinUnmatchedTypeRefinement) {
    var values = {};
    if (isWithinUnmatchedTypeRefinement == true) {
      values[RelayStoreUtils.FRAGMENT_POINTER_IS_WITHIN_UNMATCHED_TYPE_REFINEMENT] = true;
    }
    if (args) {
      args.forEach(function(arg) {
        values[arg.name] = getArgumentValue(arg, variables);
      });
    }
    return values;
  };
  var getHandleStorageKey = function(handleField, variables) {
    var { dynamicKey, handle, key, name, args, filters } = handleField;
    var handleName = getRelayHandleKey(handle, key, name);
    var filterArgs = null;
    if (args && filters && args.length !== 0 && filters.length !== 0) {
      filterArgs = args.filter(function(arg) {
        return filters.indexOf(arg.name) > -1;
      });
    }
    if (dynamicKey) {
      filterArgs = filterArgs != null ? [dynamicKey].concat((0, _toConsumableArray2["default"])(filterArgs)) : [dynamicKey];
    }
    if (filterArgs === null) {
      return handleName;
    } else {
      return formatStorageKey(handleName, getArgumentValues(filterArgs, variables));
    }
  };
  var getStorageKey = function(field, variables) {
    if (field.storageKey) {
      return field.storageKey;
    }
    var args = getArguments(field);
    var name = field.name;
    return args && args.length !== 0 ? formatStorageKey(name, getArgumentValues(args, variables)) : name;
  };
  var getArguments = function(field) {
    if (field.kind === "RelayResolver" || field.kind === "RelayLiveResolver") {
      var _field$fragment2;
      if (field.args == null) {
        var _field$fragment;
        return (_field$fragment = field.fragment) === null || _field$fragment === undefined ? undefined : _field$fragment.args;
      }
      if (((_field$fragment2 = field.fragment) === null || _field$fragment2 === undefined ? undefined : _field$fragment2.args) == null) {
        return field.args;
      }
      return field.args.concat(field.fragment.args);
    }
    var args = typeof field.args === "undefined" ? undefined : field.args;
    return args;
  };
  var getStableStorageKey = function(name, args) {
    return formatStorageKey(name, stableCopy(args));
  };
  var formatStorageKey = function(name, argValues) {
    if (!argValues) {
      return name;
    }
    var values = [];
    for (var argName in argValues) {
      if (argValues.hasOwnProperty(argName)) {
        var value = argValues[argName];
        if (value != null) {
          var _JSON$stringify;
          values.push(argName + ":" + ((_JSON$stringify = JSON.stringify(value)) !== null && _JSON$stringify !== undefined ? _JSON$stringify : "undefined"));
        }
      }
    }
    return values.length === 0 ? name : name + "(".concat(values.join(","), ")");
  };
  var getStableVariableValue = function(name, variables) {
    !variables.hasOwnProperty(name) && invariant(false, "getVariableValue(): Undefined variable `%s`.", name);
    return stableCopy(variables[name]);
  };
  var getModuleComponentKey = function(documentName) {
    return "".concat(MODULE_COMPONENT_KEY_PREFIX).concat(documentName);
  };
  var getModuleOperationKey = function(documentName) {
    return "".concat(MODULE_OPERATION_KEY_PREFIX).concat(documentName);
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
  var getRelayHandleKey = require_getRelayHandleKey();
  var RelayConcreteNode = require_RelayConcreteNode();
  var stableCopy = require_stableCopy();
  var invariant = require_browser();
  var VARIABLE = RelayConcreteNode.VARIABLE;
  var LITERAL = RelayConcreteNode.LITERAL;
  var OBJECT_VALUE = RelayConcreteNode.OBJECT_VALUE;
  var LIST_VALUE = RelayConcreteNode.LIST_VALUE;
  var ERRORS_KEY = "__errors";
  var MODULE_COMPONENT_KEY_PREFIX = "__module_component_";
  var MODULE_OPERATION_KEY_PREFIX = "__module_operation_";
  var RelayStoreUtils = {
    ACTOR_IDENTIFIER_KEY: "__actorIdentifier",
    CLIENT_EDGE_TRAVERSAL_PATH: "__clientEdgeTraversalPath",
    FRAGMENTS_KEY: "__fragments",
    FRAGMENT_OWNER_KEY: "__fragmentOwner",
    FRAGMENT_POINTER_IS_WITHIN_UNMATCHED_TYPE_REFINEMENT: "$isWithinUnmatchedTypeRefinement",
    FRAGMENT_PROP_NAME_KEY: "__fragmentPropName",
    MODULE_COMPONENT_KEY: "__module_component",
    ERRORS_KEY,
    ID_KEY: "__id",
    REF_KEY: "__ref",
    REFS_KEY: "__refs",
    ROOT_ID: "client:root",
    ROOT_TYPE: "__Root",
    TYPENAME_KEY: "__typename",
    INVALIDATED_AT_KEY: "__invalidated_at",
    RELAY_RESOLVER_VALUE_KEY: "__resolverValue",
    RELAY_RESOLVER_INVALIDATION_KEY: "__resolverValueMayBeInvalid",
    RELAY_RESOLVER_SNAPSHOT_KEY: "__resolverSnapshot",
    RELAY_RESOLVER_ERROR_KEY: "__resolverError",
    RELAY_RESOLVER_OUTPUT_TYPE_RECORD_IDS: "__resolverOutputTypeRecordIDs",
    formatStorageKey,
    getArgumentValue,
    getArgumentValues,
    getHandleStorageKey,
    getStorageKey,
    getStableStorageKey,
    getModuleComponentKey,
    getModuleOperationKey
  };
  module.exports = RelayStoreUtils;
});

// node_modules/relay-runtime/lib/handlers/connection/ConnectionInterface.js
var require_ConnectionInterface = __commonJS((exports, module) => {
  var CONNECTION_CALLS = {
    after: true,
    before: true,
    find: true,
    first: true,
    last: true,
    surrounds: true
  };
  var config = {
    CURSOR: "cursor",
    EDGES: "edges",
    END_CURSOR: "endCursor",
    HAS_NEXT_PAGE: "hasNextPage",
    HAS_PREV_PAGE: "hasPreviousPage",
    NODE: "node",
    PAGE_INFO_TYPE: "PageInfo",
    PAGE_INFO: "pageInfo",
    START_CURSOR: "startCursor"
  };
  var ConnectionInterface = {
    inject: function inject(newConfig) {
      config = newConfig;
    },
    get: function get() {
      return config;
    },
    isConnectionCall: function isConnectionCall(call) {
      return CONNECTION_CALLS.hasOwnProperty(call.name);
    }
  };
  module.exports = ConnectionInterface;
});

// node_modules/fbjs/lib/emptyFunction.js
var require_emptyFunction = __commonJS((exports, module) => {
  var makeEmptyFunction = function(arg) {
    return function() {
      return arg;
    };
  };
  var emptyFunction = function emptyFunction() {
  };
  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);
  emptyFunction.thatReturnsThis = function() {
    return this;
  };
  emptyFunction.thatReturnsArgument = function(arg) {
    return arg;
  };
  module.exports = emptyFunction;
});

// node_modules/fbjs/lib/warning.js
var require_warning = __commonJS((exports, module) => {
  var printWarning = function(format) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var argIndex = 0;
    var message = "Warning: " + format.replace(/%s/g, function() {
      return args[argIndex++];
    });
    if (typeof console !== "undefined") {
      console.error(message);
    }
    try {
      throw new Error(message);
    } catch (x) {
    }
  };
  var emptyFunction = require_emptyFunction();
  var warning = function(condition, format) {
    if (format === undefined) {
      throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
    }
    if (!condition) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2;_key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }
      printWarning.apply(undefined, [format].concat(args));
    }
  };
  module.exports = warning;
});

// node_modules/relay-runtime/lib/handlers/connection/ConnectionHandler.js
var require_ConnectionHandler = __commonJS((exports, module) => {
  var update = function(store, payload) {
    var record = store.get(payload.dataID);
    if (!record) {
      return;
    }
    var _ConnectionInterface$ = ConnectionInterface.get(), EDGES = _ConnectionInterface$.EDGES, END_CURSOR = _ConnectionInterface$.END_CURSOR, HAS_NEXT_PAGE = _ConnectionInterface$.HAS_NEXT_PAGE, HAS_PREV_PAGE = _ConnectionInterface$.HAS_PREV_PAGE, PAGE_INFO = _ConnectionInterface$.PAGE_INFO, PAGE_INFO_TYPE = _ConnectionInterface$.PAGE_INFO_TYPE, START_CURSOR = _ConnectionInterface$.START_CURSOR;
    var serverConnection = record.getLinkedRecord(payload.fieldKey);
    var serverPageInfo = serverConnection && serverConnection.getLinkedRecord(PAGE_INFO);
    if (!serverConnection) {
      record.setValue(null, payload.handleKey);
      return;
    }
    var clientConnectionID = generateClientID(record.getDataID(), payload.handleKey);
    var clientConnectionField = record.getLinkedRecord(payload.handleKey);
    var clientConnection = clientConnectionField !== null && clientConnectionField !== undefined ? clientConnectionField : store.get(clientConnectionID);
    var clientPageInfo = clientConnection && clientConnection.getLinkedRecord(PAGE_INFO);
    if (!clientConnection) {
      var connection = store.create(clientConnectionID, serverConnection.getType());
      connection.setValue(0, NEXT_EDGE_INDEX);
      connection.copyFieldsFrom(serverConnection);
      var serverEdges = serverConnection.getLinkedRecords(EDGES);
      if (serverEdges) {
        serverEdges = serverEdges.map(function(edge) {
          return buildConnectionEdge(store, connection, edge);
        });
        connection.setLinkedRecords(serverEdges, EDGES);
      }
      record.setLinkedRecord(connection, payload.handleKey);
      clientPageInfo = store.create(generateClientID(connection.getDataID(), PAGE_INFO), PAGE_INFO_TYPE);
      clientPageInfo.setValue(false, HAS_NEXT_PAGE);
      clientPageInfo.setValue(false, HAS_PREV_PAGE);
      clientPageInfo.setValue(null, END_CURSOR);
      clientPageInfo.setValue(null, START_CURSOR);
      if (serverPageInfo) {
        clientPageInfo.copyFieldsFrom(serverPageInfo);
      }
      connection.setLinkedRecord(clientPageInfo, PAGE_INFO);
    } else {
      if (clientConnectionField == null) {
        record.setLinkedRecord(clientConnection, payload.handleKey);
      }
      var _connection = clientConnection;
      var _serverEdges = serverConnection.getLinkedRecords(EDGES);
      if (_serverEdges) {
        _serverEdges = _serverEdges.map(function(edge) {
          return buildConnectionEdge(store, _connection, edge);
        });
      }
      var prevEdges = _connection.getLinkedRecords(EDGES);
      var prevPageInfo = _connection.getLinkedRecord(PAGE_INFO);
      _connection.copyFieldsFrom(serverConnection);
      if (prevEdges) {
        _connection.setLinkedRecords(prevEdges, EDGES);
      }
      if (prevPageInfo) {
        _connection.setLinkedRecord(prevPageInfo, PAGE_INFO);
      }
      var nextEdges = [];
      var args = payload.args;
      if (prevEdges && _serverEdges) {
        if (args.after != null) {
          var _clientPageInfo;
          var clientEndCursor = (_clientPageInfo = clientPageInfo) === null || _clientPageInfo === undefined ? undefined : _clientPageInfo.getValue(END_CURSOR);
          var serverEndCursor = serverPageInfo === null || serverPageInfo === undefined ? undefined : serverPageInfo.getValue(END_CURSOR);
          var isAddingEdgesAfterCurrentPage = clientPageInfo && args.after === clientEndCursor;
          var isFillingOutCurrentPage = clientPageInfo && clientEndCursor === serverEndCursor;
          if (isAddingEdgesAfterCurrentPage || isFillingOutCurrentPage) {
            var nodeIDs = new Set;
            mergeEdges(prevEdges, nextEdges, nodeIDs);
            mergeEdges(_serverEdges, nextEdges, nodeIDs);
          } else {
            warning(false, "Relay: Unexpected after cursor `%s`, edges must be fetched from the end of the list (`%s`).", args.after, clientPageInfo && clientPageInfo.getValue(END_CURSOR));
            return;
          }
        } else if (args.before != null) {
          if (clientPageInfo && args.before === clientPageInfo.getValue(START_CURSOR)) {
            var _nodeIDs = new Set;
            mergeEdges(_serverEdges, nextEdges, _nodeIDs);
            mergeEdges(prevEdges, nextEdges, _nodeIDs);
          } else {
            warning(false, "Relay: Unexpected before cursor `%s`, edges must be fetched from the beginning of the list (`%s`).", args.before, clientPageInfo && clientPageInfo.getValue(START_CURSOR));
            return;
          }
        } else {
          nextEdges = _serverEdges;
        }
      } else if (_serverEdges) {
        nextEdges = _serverEdges;
      } else {
        nextEdges = prevEdges;
      }
      if (nextEdges != null && nextEdges !== prevEdges) {
        _connection.setLinkedRecords(nextEdges, EDGES);
      }
      if (clientPageInfo && serverPageInfo) {
        if (args.after == null && args.before == null) {
          clientPageInfo.copyFieldsFrom(serverPageInfo);
        } else if (args.before != null || args.after == null && args.last) {
          clientPageInfo.setValue(!!serverPageInfo.getValue(HAS_PREV_PAGE), HAS_PREV_PAGE);
          var startCursor = serverPageInfo.getValue(START_CURSOR);
          if (typeof startCursor === "string") {
            clientPageInfo.setValue(startCursor, START_CURSOR);
          }
        } else if (args.after != null || args.before == null && args.first) {
          clientPageInfo.setValue(!!serverPageInfo.getValue(HAS_NEXT_PAGE), HAS_NEXT_PAGE);
          var endCursor = serverPageInfo.getValue(END_CURSOR);
          if (typeof endCursor === "string") {
            clientPageInfo.setValue(endCursor, END_CURSOR);
          }
        }
      }
    }
  };
  var getConnection = function(record, key, filters) {
    var handleKey = getRelayHandleKey(CONNECTION, key, null);
    return record.getLinkedRecord(handleKey, filters);
  };
  var getConnectionID = function(recordID, key, filters) {
    var handleKey = getRelayHandleKey(CONNECTION, key, null);
    var storageKey = getStableStorageKey(handleKey, filters);
    return generateClientID(recordID, storageKey);
  };
  var insertEdgeAfter = function(record, newEdge, cursor) {
    var _ConnectionInterface$2 = ConnectionInterface.get(), CURSOR = _ConnectionInterface$2.CURSOR, EDGES = _ConnectionInterface$2.EDGES;
    var edges = record.getLinkedRecords(EDGES);
    if (!edges) {
      record.setLinkedRecords([newEdge], EDGES);
      return;
    }
    var nextEdges;
    if (cursor == null) {
      nextEdges = edges.concat(newEdge);
    } else {
      nextEdges = [];
      var foundCursor = false;
      for (var ii = 0;ii < edges.length; ii++) {
        var edge = edges[ii];
        nextEdges.push(edge);
        if (edge == null) {
          continue;
        }
        var edgeCursor = edge.getValue(CURSOR);
        if (cursor === edgeCursor) {
          nextEdges.push(newEdge);
          foundCursor = true;
        }
      }
      if (!foundCursor) {
        nextEdges.push(newEdge);
      }
    }
    record.setLinkedRecords(nextEdges, EDGES);
  };
  var createEdge = function(store, record, node2, edgeType) {
    var _ConnectionInterface$3 = ConnectionInterface.get(), NODE = _ConnectionInterface$3.NODE;
    var edgeID = generateClientID(record.getDataID(), node2.getDataID());
    var edge = store.get(edgeID);
    if (!edge) {
      edge = store.create(edgeID, edgeType);
    }
    edge.setLinkedRecord(node2, NODE);
    if (edge.getValue("cursor") == null) {
      edge.setValue(null, "cursor");
    }
    return edge;
  };
  var insertEdgeBefore = function(record, newEdge, cursor) {
    var _ConnectionInterface$4 = ConnectionInterface.get(), CURSOR = _ConnectionInterface$4.CURSOR, EDGES = _ConnectionInterface$4.EDGES;
    var edges = record.getLinkedRecords(EDGES);
    if (!edges) {
      record.setLinkedRecords([newEdge], EDGES);
      return;
    }
    var nextEdges;
    if (cursor == null) {
      nextEdges = [newEdge].concat(edges);
    } else {
      nextEdges = [];
      var foundCursor = false;
      for (var ii = 0;ii < edges.length; ii++) {
        var edge = edges[ii];
        if (edge != null) {
          var edgeCursor = edge.getValue(CURSOR);
          if (cursor === edgeCursor) {
            nextEdges.push(newEdge);
            foundCursor = true;
          }
        }
        nextEdges.push(edge);
      }
      if (!foundCursor) {
        nextEdges.unshift(newEdge);
      }
    }
    record.setLinkedRecords(nextEdges, EDGES);
  };
  var deleteNode = function(record, nodeID) {
    var _ConnectionInterface$5 = ConnectionInterface.get(), EDGES = _ConnectionInterface$5.EDGES, NODE = _ConnectionInterface$5.NODE;
    var edges = record.getLinkedRecords(EDGES);
    if (!edges) {
      return;
    }
    var nextEdges;
    for (var ii = 0;ii < edges.length; ii++) {
      var edge = edges[ii];
      var node2 = edge && edge.getLinkedRecord(NODE);
      if (node2 != null && node2.getDataID() === nodeID) {
        if (nextEdges === undefined) {
          nextEdges = edges.slice(0, ii);
        }
      } else if (nextEdges !== undefined) {
        nextEdges.push(edge);
      }
    }
    if (nextEdges !== undefined) {
      record.setLinkedRecords(nextEdges, EDGES);
    }
  };
  var buildConnectionEdge = function(store, connection, edge) {
    if (edge == null) {
      return edge;
    }
    var _ConnectionInterface$6 = ConnectionInterface.get(), EDGES = _ConnectionInterface$6.EDGES;
    var edgeIndex = connection.getValue(NEXT_EDGE_INDEX);
    !(typeof edgeIndex === "number") && invariant(false, "ConnectionHandler: Expected %s to be a number, got `%s`.", NEXT_EDGE_INDEX, edgeIndex);
    var edgeID = generateClientID(connection.getDataID(), EDGES, edgeIndex);
    var connectionEdge = store.create(edgeID, edge.getType());
    connectionEdge.copyFieldsFrom(edge);
    if (connectionEdge.getValue("cursor") == null) {
      connectionEdge.setValue(null, "cursor");
    }
    connection.setValue(edgeIndex + 1, NEXT_EDGE_INDEX);
    return connectionEdge;
  };
  var mergeEdges = function(sourceEdges, targetEdges, nodeIDs) {
    var _ConnectionInterface$7 = ConnectionInterface.get(), NODE = _ConnectionInterface$7.NODE;
    for (var ii = 0;ii < sourceEdges.length; ii++) {
      var edge = sourceEdges[ii];
      if (!edge) {
        continue;
      }
      var node2 = edge.getLinkedRecord(NODE);
      var nodeID = node2 && node2.getDataID();
      if (nodeID) {
        if (nodeIDs.has(nodeID)) {
          continue;
        }
        nodeIDs.add(nodeID);
      }
      targetEdges.push(edge);
    }
  };
  var _require = require_ClientID();
  var generateClientID = _require.generateClientID;
  var _require2 = require_RelayStoreUtils();
  var getStableStorageKey = _require2.getStableStorageKey;
  var getRelayHandleKey = require_getRelayHandleKey();
  var ConnectionInterface = require_ConnectionInterface();
  var invariant = require_browser();
  var warning = require_warning();
  var CONNECTION = "connection";
  var NEXT_EDGE_INDEX = "__connection_next_edge_index";
  module.exports = {
    buildConnectionEdge,
    createEdge,
    deleteNode,
    getConnection,
    getConnectionID,
    insertEdgeAfter,
    insertEdgeBefore,
    update
  };
});

// node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js
var require_createForOfIteratorHelper = __commonJS((exports, module) => {
  var _createForOfIteratorHelper = function(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
      if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it)
          o = it;
        var i = 0;
        var F = function F() {
        };
        return {
          s: F,
          n: function n() {
            if (i >= o.length)
              return {
                done: true
              };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function e(_e) {
            throw _e;
          },
          f: F
        };
      }
      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
      s: function s() {
        it = it.call(o);
      },
      n: function n() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function e(_e2) {
        didErr = true;
        err = _e2;
      },
      f: function f() {
        try {
          if (!normalCompletion && it["return"] != null)
            it["return"]();
        } finally {
          if (didErr)
            throw err;
        }
      }
    };
  };
  var unsupportedIterableToArray = require_unsupportedIterableToArray();
  module.exports = _createForOfIteratorHelper, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/relay-runtime/lib/handlers/connection/MutationHandlers.js
var require_MutationHandlers = __commonJS((exports, module) => {
  var edgeUpdater = function(insertFn) {
    return function(store, payload) {
      var _serverEdges;
      var record = store.get(payload.dataID);
      if (record == null) {
        return;
      }
      var connections = payload.handleArgs.connections;
      !(connections != null) && invariant(false, "MutationHandlers: Expected connection IDs to be specified.");
      var singleServerEdge, serverEdges;
      try {
        singleServerEdge = record.getLinkedRecord(payload.fieldKey);
      } catch (_unused) {
      }
      if (!singleServerEdge) {
        try {
          serverEdges = record.getLinkedRecords(payload.fieldKey);
        } catch (_unused2) {
        }
      }
      if (singleServerEdge == null && serverEdges == null) {
        warning(false, "MutationHandlers: Expected the server edge to be non-null.");
        return;
      }
      var _ConnectionInterface$ = ConnectionInterface.get(), NODE = _ConnectionInterface$.NODE, EDGES = _ConnectionInterface$.EDGES;
      var serverEdgeList = (_serverEdges = serverEdges) !== null && _serverEdges !== undefined ? _serverEdges : [singleServerEdge];
      var _iterator2 = (0, _createForOfIteratorHelper2["default"])(serverEdgeList), _step2;
      try {
        var _loop = function _loop() {
          var serverEdge = _step2.value;
          if (serverEdge == null) {
            return "continue";
          }
          var serverNode = serverEdge.getLinkedRecord("node");
          if (!serverNode) {
            return "continue";
          }
          var serverNodeId = serverNode.getDataID();
          var _iterator3 = (0, _createForOfIteratorHelper2["default"])(connections), _step3;
          try {
            for (_iterator3.s();!(_step3 = _iterator3.n()).done; ) {
              var connectionID = _step3.value;
              var connection = store.get(connectionID);
              if (connection == null) {
                warning(false, "[Relay] The connection with id `%s` doesn't exist.", connectionID);
                continue;
              }
              var nodeAlreadyExistsInConnection = (_connection$getLinked = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked === undefined ? undefined : _connection$getLinked.some(function(edge) {
                var _edge$getLinkedRecord;
                return (edge === null || edge === undefined ? undefined : (_edge$getLinkedRecord = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord === undefined ? undefined : _edge$getLinkedRecord.getDataID()) === serverNodeId;
              });
              if (nodeAlreadyExistsInConnection) {
                continue;
              }
              var clientEdge = ConnectionHandler.buildConnectionEdge(store, connection, serverEdge);
              !(clientEdge != null) && invariant(false, "MutationHandlers: Failed to build the edge.");
              insertFn(connection, clientEdge);
            }
          } catch (err) {
            _iterator3.e(err);
          } finally {
            _iterator3.f();
          }
        };
        for (_iterator2.s();!(_step2 = _iterator2.n()).done; ) {
          var _connection$getLinked;
          var _ret = _loop();
          if (_ret === "continue")
            continue;
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    };
  };
  var nodeUpdater = function(insertFn) {
    return function(store, payload) {
      var _serverNodes;
      var record = store.get(payload.dataID);
      if (record == null) {
        return;
      }
      var _payload$handleArgs = payload.handleArgs, connections = _payload$handleArgs.connections, edgeTypeName = _payload$handleArgs.edgeTypeName;
      !(connections != null) && invariant(false, "MutationHandlers: Expected connection IDs to be specified.");
      !(edgeTypeName != null) && invariant(false, "MutationHandlers: Expected edge typename to be specified.");
      var singleServerNode;
      var serverNodes;
      try {
        singleServerNode = record.getLinkedRecord(payload.fieldKey);
      } catch (_unused3) {
      }
      if (!singleServerNode) {
        try {
          serverNodes = record.getLinkedRecords(payload.fieldKey);
        } catch (_unused4) {
        }
      }
      if (singleServerNode == null && serverNodes == null) {
        warning(false, "MutationHandlers: Expected target node to exist.");
        return;
      }
      var _ConnectionInterface$2 = ConnectionInterface.get(), NODE = _ConnectionInterface$2.NODE, EDGES = _ConnectionInterface$2.EDGES;
      var serverNodeList = (_serverNodes = serverNodes) !== null && _serverNodes !== undefined ? _serverNodes : [singleServerNode];
      var _iterator4 = (0, _createForOfIteratorHelper2["default"])(serverNodeList), _step4;
      try {
        var _loop2 = function _loop2() {
          var serverNode = _step4.value;
          if (serverNode == null) {
            return "continue";
          }
          var serverNodeId = serverNode.getDataID();
          var _iterator5 = (0, _createForOfIteratorHelper2["default"])(connections), _step5;
          try {
            for (_iterator5.s();!(_step5 = _iterator5.n()).done; ) {
              var connectionID = _step5.value;
              var connection = store.get(connectionID);
              if (connection == null) {
                warning(false, "[Relay] The connection with id `%s` doesn't exist.", connectionID);
                continue;
              }
              var nodeAlreadyExistsInConnection = (_connection$getLinked2 = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked2 === undefined ? undefined : _connection$getLinked2.some(function(edge) {
                var _edge$getLinkedRecord2;
                return (edge === null || edge === undefined ? undefined : (_edge$getLinkedRecord2 = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord2 === undefined ? undefined : _edge$getLinkedRecord2.getDataID()) === serverNodeId;
              });
              if (nodeAlreadyExistsInConnection) {
                continue;
              }
              var clientEdge = ConnectionHandler.createEdge(store, connection, serverNode, edgeTypeName);
              !(clientEdge != null) && invariant(false, "MutationHandlers: Failed to build the edge.");
              insertFn(connection, clientEdge);
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        };
        for (_iterator4.s();!(_step4 = _iterator4.n()).done; ) {
          var _connection$getLinked2;
          var _ret2 = _loop2();
          if (_ret2 === "continue")
            continue;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    };
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var ConnectionHandler = require_ConnectionHandler();
  var ConnectionInterface = require_ConnectionInterface();
  var invariant = require_browser();
  var warning = require_warning();
  var DeleteRecordHandler = {
    update: function update(store, payload) {
      var record = store.get(payload.dataID);
      if (record != null) {
        var idOrIds = record.getValue(payload.fieldKey);
        if (typeof idOrIds === "string") {
          store["delete"](idOrIds);
        } else if (Array.isArray(idOrIds)) {
          idOrIds.forEach(function(id) {
            if (typeof id === "string") {
              store["delete"](id);
            }
          });
        }
      }
    }
  };
  var DeleteEdgeHandler = {
    update: function update(store, payload) {
      var record = store.get(payload.dataID);
      if (record == null) {
        return;
      }
      var connections = payload.handleArgs.connections;
      !(connections != null) && invariant(false, "MutationHandlers: Expected connection IDs to be specified.");
      var idOrIds = record.getValue(payload.fieldKey);
      var idList = Array.isArray(idOrIds) ? idOrIds : [idOrIds];
      idList.forEach(function(id) {
        if (typeof id === "string") {
          var _iterator = (0, _createForOfIteratorHelper2["default"])(connections), _step;
          try {
            for (_iterator.s();!(_step = _iterator.n()).done; ) {
              var connectionID = _step.value;
              var connection = store.get(connectionID);
              if (connection == null) {
                warning(false, "[Relay] The connection with id `%s` doesn't exist.", connectionID);
                continue;
              }
              ConnectionHandler.deleteNode(connection, id);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      });
    }
  };
  var AppendEdgeHandler = {
    update: edgeUpdater(ConnectionHandler.insertEdgeAfter)
  };
  var PrependEdgeHandler = {
    update: edgeUpdater(ConnectionHandler.insertEdgeBefore)
  };
  var AppendNodeHandler = {
    update: nodeUpdater(ConnectionHandler.insertEdgeAfter)
  };
  var PrependNodeHandler = {
    update: nodeUpdater(ConnectionHandler.insertEdgeBefore)
  };
  module.exports = {
    AppendEdgeHandler,
    DeleteRecordHandler,
    PrependEdgeHandler,
    AppendNodeHandler,
    PrependNodeHandler,
    DeleteEdgeHandler
  };
});

// node_modules/relay-runtime/lib/handlers/RelayDefaultHandlerProvider.js
var require_RelayDefaultHandlerProvider = __commonJS((exports, module) => {
  var RelayDefaultHandlerProvider = function(handle) {
    switch (handle) {
      case "connection":
        return ConnectionHandler;
      case "deleteRecord":
        return MutationHandlers.DeleteRecordHandler;
      case "deleteEdge":
        return MutationHandlers.DeleteEdgeHandler;
      case "appendEdge":
        return MutationHandlers.AppendEdgeHandler;
      case "prependEdge":
        return MutationHandlers.PrependEdgeHandler;
      case "appendNode":
        return MutationHandlers.AppendNodeHandler;
      case "prependNode":
        return MutationHandlers.PrependNodeHandler;
    }
    invariant(false, "RelayDefaultHandlerProvider: No handler provided for `%s`.", handle);
  };
  var ConnectionHandler = require_ConnectionHandler();
  var MutationHandlers = require_MutationHandlers();
  var invariant = require_browser();
  module.exports = RelayDefaultHandlerProvider;
});

// node_modules/relay-runtime/lib/query/GraphQLTag.js
var require_GraphQLTag = __commonJS((exports, module) => {
  var graphql = function(strings) {
    invariant(false, "graphql: Unexpected invocation at runtime. Either the Babel transform was not set up, or it failed to identify this call site. Make sure it is being used verbatim as `graphql`. Note also that there cannot be a space between graphql and the backtick that follows.");
  };
  var getNode = function(taggedNode) {
    var node2 = taggedNode;
    if (typeof node2 === "function") {
      node2 = node2();
      warning(false, "RelayGraphQLTag: node `%s` unexpectedly wrapped in a function.", node2.kind === "Fragment" ? node2.name : node2.operation.name);
    } else if (node2["default"]) {
      node2 = node2["default"];
    }
    return node2;
  };
  var isFragment = function(node2) {
    var fragment = getNode(node2);
    return typeof fragment === "object" && fragment !== null && fragment.kind === RelayConcreteNode.FRAGMENT;
  };
  var isRequest = function(node2) {
    var request = getNode(node2);
    return typeof request === "object" && request !== null && request.kind === RelayConcreteNode.REQUEST;
  };
  var isUpdatableQuery = function(node2) {
    var updatableQuery = getNode(node2);
    return typeof updatableQuery === "object" && updatableQuery !== null && updatableQuery.kind === RelayConcreteNode.UPDATABLE_QUERY;
  };
  var isInlineDataFragment = function(node2) {
    var fragment = getNode(node2);
    return typeof fragment === "object" && fragment !== null && fragment.kind === RelayConcreteNode.INLINE_DATA_FRAGMENT;
  };
  var getFragment = function(taggedNode) {
    var fragment = getNode(taggedNode);
    !isFragment(fragment) && invariant(false, "GraphQLTag: Expected a fragment, got `%s`.", JSON.stringify(fragment));
    return fragment;
  };
  var getPaginationFragment = function(taggedNode) {
    var _fragment$metadata;
    var fragment = getFragment(taggedNode);
    var refetch = (_fragment$metadata = fragment.metadata) === null || _fragment$metadata === undefined ? undefined : _fragment$metadata.refetch;
    var connection = refetch === null || refetch === undefined ? undefined : refetch.connection;
    if (refetch === null || typeof refetch !== "object" || connection === null || typeof connection !== "object") {
      return null;
    }
    return fragment;
  };
  var getRefetchableFragment = function(taggedNode) {
    var _fragment$metadata2;
    var fragment = getFragment(taggedNode);
    var refetch = (_fragment$metadata2 = fragment.metadata) === null || _fragment$metadata2 === undefined ? undefined : _fragment$metadata2.refetch;
    if (refetch === null || typeof refetch !== "object") {
      return null;
    }
    return fragment;
  };
  var getRequest = function(taggedNode) {
    var request = getNode(taggedNode);
    !isRequest(request) && invariant(false, "GraphQLTag: Expected a request, got `%s`.", JSON.stringify(request));
    return request;
  };
  var getUpdatableQuery = function(taggedNode) {
    var updatableQuery = getNode(taggedNode);
    !isUpdatableQuery(updatableQuery) && invariant(false, "GraphQLTag: Expected a request, got `%s`.", JSON.stringify(updatableQuery));
    return updatableQuery;
  };
  var getInlineDataFragment = function(taggedNode) {
    var fragment = getNode(taggedNode);
    !isInlineDataFragment(fragment) && invariant(false, "GraphQLTag: Expected an inline data fragment, got `%s`.", JSON.stringify(fragment));
    return fragment;
  };
  var RelayConcreteNode = require_RelayConcreteNode();
  var invariant = require_browser();
  var warning = require_warning();
  module.exports = {
    getFragment,
    getNode,
    getPaginationFragment,
    getRefetchableFragment,
    getRequest,
    getUpdatableQuery,
    getInlineDataFragment,
    graphql,
    isFragment,
    isRequest,
    isUpdatableQuery,
    isInlineDataFragment
  };
});

// node_modules/relay-runtime/lib/store/isRelayModernEnvironment.js
var require_isRelayModernEnvironment = __commonJS((exports, module) => {
  var isRelayModernEnvironment = function(environment) {
    return Boolean(environment && environment["@@RelayModernEnvironment"]);
  };
  module.exports = isRelayModernEnvironment;
});

// node_modules/relay-runtime/lib/util/deepFreeze.js
var require_deepFreeze = __commonJS((exports, module) => {
  var deepFreeze = function(object) {
    if (!shouldBeFrozen(object)) {
      return object;
    }
    Object.freeze(object);
    Object.getOwnPropertyNames(object).forEach(function(name) {
      var property = object[name];
      if (property && typeof property === "object" && !Object.isFrozen(property)) {
        deepFreeze(property);
      }
    });
    return object;
  };
  var shouldBeFrozen = function(value) {
    return value != null && (Array.isArray(value) || typeof value === "object" && value.constructor === Object);
  };
  module.exports = deepFreeze;
});

// node_modules/relay-runtime/lib/util/getRequestIdentifier.js
var require_getRequestIdentifier = __commonJS((exports, module) => {
  var getRequestIdentifier = function(parameters, variables) {
    var requestID = parameters.cacheID != null ? parameters.cacheID : parameters.id;
    !(requestID != null) && invariant(false, "getRequestIdentifier: Expected request `%s` to have either a valid `id` or `cacheID` property", parameters.name);
    return requestID + JSON.stringify(stableCopy(variables));
  };
  var stableCopy = require_stableCopy();
  var invariant = require_browser();
  module.exports = getRequestIdentifier;
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS((exports, module) => {
  var _typeof = function(o) {
    "@babel/helpers - typeof";
    return module.exports = _typeof = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && typeof Symbol == "function" && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
  };
  module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/@babel/runtime/helpers/toPrimitive.js
var require_toPrimitive = __commonJS((exports, module) => {
  var toPrimitive = function(t, r) {
    if (_typeof(t) != "object" || !t)
      return t;
    var e = t[Symbol.toPrimitive];
    if (e !== undefined) {
      var i = e.call(t, r || "default");
      if (_typeof(i) != "object")
        return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (r === "string" ? String : Number)(t);
  };
  var _typeof = require_typeof()["default"];
  module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/@babel/runtime/helpers/toPropertyKey.js
var require_toPropertyKey = __commonJS((exports, module) => {
  var toPropertyKey = function(t) {
    var i = toPrimitive(t, "string");
    return _typeof(i) == "symbol" ? i : String(i);
  };
  var _typeof = require_typeof()["default"];
  var toPrimitive = require_toPrimitive();
  module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/@babel/runtime/helpers/defineProperty.js
var require_defineProperty = __commonJS((exports, module) => {
  var _defineProperty = function(obj, key, value) {
    key = toPropertyKey(key);
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  };
  var toPropertyKey = require_toPropertyKey();
  module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/@babel/runtime/helpers/objectSpread2.js
var require_objectSpread2 = __commonJS((exports, module) => {
  var ownKeys = function(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r && (o = o.filter(function(r2) {
        return Object.getOwnPropertyDescriptor(e, r2).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  };
  var _objectSpread2 = function(e) {
    for (var r = 1;r < arguments.length; r++) {
      var t = arguments[r] != null ? arguments[r] : {};
      r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
        defineProperty(e, r2, t[r2]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
        Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
      });
    }
    return e;
  };
  var defineProperty = require_defineProperty();
  module.exports = _objectSpread2, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/relay-runtime/lib/store/RelayConcreteVariables.js
var require_RelayConcreteVariables = __commonJS((exports, module) => {
  var getFragmentVariables = function(fragment, rootVariables, argumentVariables) {
    if (fragment.argumentDefinitions == null) {
      return argumentVariables;
    }
    var variables;
    fragment.argumentDefinitions.forEach(function(definition) {
      if (argumentVariables.hasOwnProperty(definition.name)) {
        return;
      }
      variables = variables || (0, _objectSpread2["default"])({}, argumentVariables);
      switch (definition.kind) {
        case "LocalArgument":
          variables[definition.name] = definition.defaultValue;
          break;
        case "RootArgument":
          if (!rootVariables.hasOwnProperty(definition.name)) {
            variables[definition.name] = undefined;
            break;
          }
          variables[definition.name] = rootVariables[definition.name];
          break;
        default:
          invariant(false, "RelayConcreteVariables: Unexpected node kind `%s` in fragment `%s`.", definition.kind, fragment.name);
      }
    });
    return variables || argumentVariables;
  };
  var getOperationVariables = function(operation, providedVariables, variables) {
    var operationVariables = {};
    operation.argumentDefinitions.forEach(function(def) {
      var value = def.defaultValue;
      if (variables[def.name] != null) {
        value = variables[def.name];
      }
      operationVariables[def.name] = value;
    });
    if (providedVariables != null) {
      Object.keys(providedVariables).forEach(function(varName) {
        operationVariables[varName] = providedVariables[varName].get();
      });
    }
    return operationVariables;
  };
  var getLocalVariables = function(currentVariables, argumentDefinitions, args) {
    if (argumentDefinitions == null) {
      return currentVariables;
    }
    var nextVariables = (0, _objectSpread2["default"])({}, currentVariables);
    var nextArgs = args ? getArgumentValues(args, currentVariables) : {};
    argumentDefinitions.forEach(function(def) {
      var _nextArgs$def$name;
      var value = (_nextArgs$def$name = nextArgs[def.name]) !== null && _nextArgs$def$name !== undefined ? _nextArgs$def$name : def.defaultValue;
      nextVariables[def.name] = value;
    });
    return nextVariables;
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var _require = require_RelayStoreUtils();
  var getArgumentValues = _require.getArgumentValues;
  var invariant = require_browser();
  module.exports = {
    getLocalVariables,
    getFragmentVariables,
    getOperationVariables
  };
});

// node_modules/fbjs/lib/areEqual.js
var require_areEqual = __commonJS((exports, module) => {
  var areEqual = function(a, b) {
    var aStack = aStackPool.length ? aStackPool.pop() : [];
    var bStack = bStackPool.length ? bStackPool.pop() : [];
    var result = eq(a, b, aStack, bStack);
    aStack.length = 0;
    bStack.length = 0;
    aStackPool.push(aStack);
    bStackPool.push(bStack);
    return result;
  };
  var eq = function(a, b, aStack, bStack) {
    if (a === b) {
      return a !== 0 || 1 / a == 1 / b;
    }
    if (a == null || b == null) {
      return false;
    }
    if (typeof a != "object" || typeof b != "object") {
      return false;
    }
    var objToStr = Object.prototype.toString;
    var className = objToStr.call(a);
    if (className != objToStr.call(b)) {
      return false;
    }
    switch (className) {
      case "[object String]":
        return a == String(b);
      case "[object Number]":
        return isNaN(a) || isNaN(b) ? false : a == Number(b);
      case "[object Date]":
      case "[object Boolean]":
        return +a == +b;
      case "[object RegExp]":
        return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
    }
    var length = aStack.length;
    while (length--) {
      if (aStack[length] == a) {
        return bStack[length] == b;
      }
    }
    aStack.push(a);
    bStack.push(b);
    var size = 0;
    if (className === "[object Array]") {
      size = a.length;
      if (size !== b.length) {
        return false;
      }
      while (size--) {
        if (!eq(a[size], b[size], aStack, bStack)) {
          return false;
        }
      }
    } else {
      if (a.constructor !== b.constructor) {
        return false;
      }
      if (a.hasOwnProperty("valueOf") && b.hasOwnProperty("valueOf")) {
        return a.valueOf() == b.valueOf();
      }
      var keys = Object.keys(a);
      if (keys.length != Object.keys(b).length) {
        return false;
      }
      for (var i = 0;i < keys.length; i++) {
        if (!eq(a[keys[i]], b[keys[i]], aStack, bStack)) {
          return false;
        }
      }
    }
    aStack.pop();
    bStack.pop();
    return true;
  };
  var aStackPool = [];
  var bStackPool = [];
  module.exports = areEqual;
});

// node_modules/relay-runtime/lib/store/RelayModernSelector.js
var require_RelayModernSelector = __commonJS((exports, module) => {
  var getSingularSelector = function(fragment, item) {
    !(typeof item === "object" && item !== null && !Array.isArray(item)) && invariant(false, "RelayModernSelector: Expected value for fragment `%s` to be an object, got `%s`.", fragment.name, JSON.stringify(item));
    var dataID = item[ID_KEY];
    var fragments = item[FRAGMENTS_KEY];
    var mixedOwner = item[FRAGMENT_OWNER_KEY];
    var mixedClientEdgeTraversalPath = item[CLIENT_EDGE_TRAVERSAL_PATH];
    if (typeof dataID === "string" && typeof fragments === "object" && fragments !== null && typeof fragments[fragment.name] === "object" && fragments[fragment.name] !== null && typeof mixedOwner === "object" && mixedOwner !== null && (mixedClientEdgeTraversalPath == null || Array.isArray(mixedClientEdgeTraversalPath))) {
      var owner = mixedOwner;
      var clientEdgeTraversalPath = mixedClientEdgeTraversalPath;
      var argumentVariables = fragments[fragment.name];
      var fragmentVariables = getFragmentVariables(fragment, owner.variables, argumentVariables);
      var isWithinUnmatchedTypeRefinement = argumentVariables[FRAGMENT_POINTER_IS_WITHIN_UNMATCHED_TYPE_REFINEMENT] === true;
      return createReaderSelector(fragment, dataID, fragmentVariables, owner, isWithinUnmatchedTypeRefinement, clientEdgeTraversalPath);
    }
    if (true) {
      var stringifiedItem = JSON.stringify(item);
      if (stringifiedItem.length > 499) {
        stringifiedItem = stringifiedItem.substr(0, 498) + "\u2026";
      }
      warning(false, "RelayModernSelector: Expected object to contain data for fragment `%s`, got `%s`. Make sure that the parent operation/fragment included fragment `...%s` without `@relay(mask: false)`.", fragment.name, stringifiedItem, fragment.name);
    }
    return null;
  };
  var getPluralSelector = function(fragment, items) {
    var selectors = null;
    items.forEach(function(item, ii) {
      var selector = item != null ? getSingularSelector(fragment, item) : null;
      if (selector != null) {
        selectors = selectors || [];
        selectors.push(selector);
      }
    });
    if (selectors == null) {
      return null;
    } else {
      return {
        kind: "PluralReaderSelector",
        selectors
      };
    }
  };
  var getSelector = function(fragment, item) {
    if (item == null) {
      return item;
    } else if (fragment.metadata && fragment.metadata.plural === true) {
      !Array.isArray(item) && invariant(false, "RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.", fragment.name, JSON.stringify(item), fragment.name);
      return getPluralSelector(fragment, item);
    } else {
      Array.isArray(item) && invariant(false, "RelayModernSelector: Expected value for fragment `%s` to be an object, got `%s`. Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.", fragment.name, JSON.stringify(item), fragment.name);
      return getSingularSelector(fragment, item);
    }
  };
  var getSelectorsFromObject = function(fragments, object) {
    var selectors = {};
    for (var key in fragments) {
      if (fragments.hasOwnProperty(key)) {
        var fragment = fragments[key];
        var item = object[key];
        selectors[key] = getSelector(fragment, item);
      }
    }
    return selectors;
  };
  var getDataIDsFromObject = function(fragments, object) {
    var ids = {};
    for (var key in fragments) {
      if (fragments.hasOwnProperty(key)) {
        var fragment = fragments[key];
        var item = object[key];
        ids[key] = getDataIDsFromFragment(fragment, item);
      }
    }
    return ids;
  };
  var getDataIDsFromFragment = function(fragment, item) {
    if (item == null) {
      return item;
    } else if (fragment.metadata && fragment.metadata.plural === true) {
      !Array.isArray(item) && invariant(false, "RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.", fragment.name, JSON.stringify(item), fragment.name);
      return getDataIDs(fragment, item);
    } else {
      Array.isArray(item) && invariant(false, "RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.", fragment.name, JSON.stringify(item), fragment.name);
      return getDataID(fragment, item);
    }
  };
  var getDataIDs = function(fragment, items) {
    var ids = null;
    items.forEach(function(item) {
      var id = item != null ? getDataID(fragment, item) : null;
      if (id != null) {
        ids = ids || [];
        ids.push(id);
      }
    });
    return ids;
  };
  var getDataID = function(fragment, item) {
    !(typeof item === "object" && item !== null && !Array.isArray(item)) && invariant(false, "RelayModernSelector: Expected value for fragment `%s` to be an object, got `%s`.", fragment.name, JSON.stringify(item));
    var dataID = item[ID_KEY];
    if (typeof dataID === "string") {
      return dataID;
    }
    warning(false, "RelayModernSelector: Expected object to contain data for fragment `%s`, got `%s`. Make sure that the parent operation/fragment included fragment `...%s` without `@relay(mask: false)`, or `null` is passed as the fragment reference for `%s` if it's conditonally included and the condition isn't met.", fragment.name, JSON.stringify(item), fragment.name, fragment.name);
    return null;
  };
  var getVariablesFromObject = function(fragments, object) {
    var variables = {};
    for (var key in fragments) {
      if (fragments.hasOwnProperty(key)) {
        var fragment = fragments[key];
        var item = object[key];
        var itemVariables = getVariablesFromFragment(fragment, item);
        Object.assign(variables, itemVariables);
      }
    }
    return variables;
  };
  var getVariablesFromFragment = function(fragment, item) {
    var _fragment$metadata;
    if (item == null) {
      return {};
    } else if (((_fragment$metadata = fragment.metadata) === null || _fragment$metadata === undefined ? undefined : _fragment$metadata.plural) === true) {
      !Array.isArray(item) && invariant(false, "RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.", fragment.name, JSON.stringify(item), fragment.name);
      return getVariablesFromPluralFragment(fragment, item);
    } else {
      Array.isArray(item) && invariant(false, "RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.", fragment.name, JSON.stringify(item), fragment.name);
      return getVariablesFromSingularFragment(fragment, item) || {};
    }
  };
  var getVariablesFromSingularFragment = function(fragment, item) {
    var selector = getSingularSelector(fragment, item);
    if (!selector) {
      return null;
    }
    return selector.variables;
  };
  var getVariablesFromPluralFragment = function(fragment, items) {
    var variables = {};
    items.forEach(function(value, ii) {
      if (value != null) {
        var itemVariables = getVariablesFromSingularFragment(fragment, value);
        if (itemVariables != null) {
          Object.assign(variables, itemVariables);
        }
      }
    });
    return variables;
  };
  var areEqualSingularSelectors = function(thisSelector, thatSelector) {
    return thisSelector.dataID === thatSelector.dataID && thisSelector.node === thatSelector.node && areEqual(thisSelector.variables, thatSelector.variables) && areEqualOwners(thisSelector.owner, thatSelector.owner);
  };
  var areEqualOwners = function(thisOwner, thatOwner) {
    if (thisOwner === thatOwner) {
      return true;
    } else {
      return thisOwner.identifier === thatOwner.identifier && areEqual(thisOwner.cacheConfig, thatOwner.cacheConfig);
    }
  };
  var areEqualSelectors = function(a, b) {
    if (a === b) {
      return true;
    } else if (a == null) {
      return b == null;
    } else if (b == null) {
      return a == null;
    } else if (a.kind === "SingularReaderSelector" && b.kind === "SingularReaderSelector") {
      return areEqualSingularSelectors(a, b);
    } else if (a.kind === "PluralReaderSelector" && b.kind === "PluralReaderSelector") {
      return a.selectors.length === b.selectors.length && a.selectors.every(function(s, i) {
        return areEqualSingularSelectors(s, b.selectors[i]);
      });
    } else {
      return false;
    }
  };
  var createReaderSelector = function(fragment, dataID, variables, request) {
    var isWithinUnmatchedTypeRefinement = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
    var clientEdgeTraversalPath = arguments.length > 5 ? arguments[5] : undefined;
    return {
      kind: "SingularReaderSelector",
      dataID,
      isWithinUnmatchedTypeRefinement,
      clientEdgeTraversalPath: clientEdgeTraversalPath !== null && clientEdgeTraversalPath !== undefined ? clientEdgeTraversalPath : null,
      node: fragment,
      variables,
      owner: request
    };
  };
  var createNormalizationSelector = function(node2, dataID, variables) {
    return {
      dataID,
      node: node2,
      variables
    };
  };
  var _require = require_RelayConcreteVariables();
  var getFragmentVariables = _require.getFragmentVariables;
  var _require2 = require_RelayStoreUtils();
  var CLIENT_EDGE_TRAVERSAL_PATH = _require2.CLIENT_EDGE_TRAVERSAL_PATH;
  var FRAGMENT_OWNER_KEY = _require2.FRAGMENT_OWNER_KEY;
  var FRAGMENT_POINTER_IS_WITHIN_UNMATCHED_TYPE_REFINEMENT = _require2.FRAGMENT_POINTER_IS_WITHIN_UNMATCHED_TYPE_REFINEMENT;
  var FRAGMENTS_KEY = _require2.FRAGMENTS_KEY;
  var ID_KEY = _require2.ID_KEY;
  var areEqual = require_areEqual();
  var invariant = require_browser();
  var warning = require_warning();
  module.exports = {
    areEqualSelectors,
    createReaderSelector,
    createNormalizationSelector,
    getDataIDsFromFragment,
    getDataIDsFromObject,
    getSingularSelector,
    getPluralSelector,
    getSelector,
    getSelectorsFromObject,
    getVariablesFromSingularFragment,
    getVariablesFromPluralFragment,
    getVariablesFromFragment,
    getVariablesFromObject
  };
});

// node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js
var require_RelayModernOperationDescriptor = __commonJS((exports, module) => {
  var createOperationDescriptor = function(request, variables, cacheConfig) {
    var dataID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ROOT_ID;
    var operation = request.operation;
    var operationVariables = getOperationVariables(operation, request.params.providedVariables, variables);
    var requestDescriptor = createRequestDescriptor(request, operationVariables, cacheConfig);
    var operationDescriptor = {
      fragment: createReaderSelector(request.fragment, dataID, operationVariables, requestDescriptor),
      request: requestDescriptor,
      root: createNormalizationSelector(operation, dataID, operationVariables)
    };
    if (true) {
      Object.freeze(operationDescriptor.fragment);
      Object.freeze(operationDescriptor.root);
      Object.freeze(operationDescriptor);
    }
    return operationDescriptor;
  };
  var createRequestDescriptor = function(request, variables, cacheConfig) {
    var requestDescriptor = {
      identifier: getRequestIdentifier(request.params, variables),
      node: request,
      variables,
      cacheConfig
    };
    if (true) {
      deepFreeze(variables);
      Object.freeze(request);
      Object.freeze(requestDescriptor);
    }
    return requestDescriptor;
  };
  var deepFreeze = require_deepFreeze();
  var getRequestIdentifier = require_getRequestIdentifier();
  var _require = require_RelayConcreteVariables();
  var getOperationVariables = _require.getOperationVariables;
  var _require2 = require_RelayModernSelector();
  var createNormalizationSelector = _require2.createNormalizationSelector;
  var createReaderSelector = _require2.createReaderSelector;
  var _require3 = require_RelayStoreUtils();
  var ROOT_ID = _require3.ROOT_ID;
  module.exports = {
    createOperationDescriptor,
    createRequestDescriptor
  };
});

// node_modules/relay-runtime/lib/mutations/RelayDeclarativeMutationConfig.js
var require_RelayDeclarativeMutationConfig = __commonJS((exports, module) => {
  var convert = function(configs, request, optimisticUpdater, updater) {
    var configOptimisticUpdates = optimisticUpdater ? [optimisticUpdater] : [];
    var configUpdates = updater ? [updater] : [];
    configs.forEach(function(config) {
      switch (config.type) {
        case "NODE_DELETE":
          var nodeDeleteResult = nodeDelete(config, request);
          if (nodeDeleteResult) {
            configOptimisticUpdates.push(nodeDeleteResult);
            configUpdates.push(nodeDeleteResult);
          }
          break;
        case "RANGE_ADD":
          var rangeAddResult = rangeAdd(config, request);
          if (rangeAddResult) {
            configOptimisticUpdates.push(rangeAddResult);
            configUpdates.push(rangeAddResult);
          }
          break;
        case "RANGE_DELETE":
          var rangeDeleteResult = rangeDelete(config, request);
          if (rangeDeleteResult) {
            configOptimisticUpdates.push(rangeDeleteResult);
            configUpdates.push(rangeDeleteResult);
          }
          break;
      }
    });
    return {
      optimisticUpdater: function optimisticUpdater(store, data) {
        configOptimisticUpdates.forEach(function(eachOptimisticUpdater) {
          eachOptimisticUpdater(store, data);
        });
      },
      updater: function updater(store, data) {
        configUpdates.forEach(function(eachUpdater) {
          eachUpdater(store, data);
        });
      }
    };
  };
  var nodeDelete = function(config, request) {
    var deletedIDFieldName = config.deletedIDFieldName;
    var rootField = getRootField(request);
    if (!rootField) {
      return null;
    }
    return function(store, data) {
      var payload = store.getRootField(rootField);
      if (!payload) {
        return;
      }
      var deleteID = payload.getValue(deletedIDFieldName);
      var deleteIDs = Array.isArray(deleteID) ? deleteID : [deleteID];
      deleteIDs.forEach(function(id) {
        if (id && typeof id === "string") {
          store["delete"](id);
        }
      });
    };
  };
  var rangeAdd = function(config, request) {
    var { parentID, connectionInfo, edgeName } = config;
    if (!parentID) {
      warning(false, "RelayDeclarativeMutationConfig: For mutation config RANGE_ADD to work you must include a parentID");
      return null;
    }
    var rootField = getRootField(request);
    if (!connectionInfo || !rootField) {
      return null;
    }
    return function(store, data) {
      var parent = store.get(parentID);
      if (!parent) {
        return;
      }
      var payload = store.getRootField(rootField);
      if (!payload) {
        return;
      }
      var serverEdge = payload.getLinkedRecord(edgeName);
      var _iterator = (0, _createForOfIteratorHelper2["default"])(connectionInfo), _step;
      try {
        for (_iterator.s();!(_step = _iterator.n()).done; ) {
          var info = _step.value;
          if (!serverEdge) {
            continue;
          }
          var connection = ConnectionHandler.getConnection(parent, info.key, info.filters);
          if (!connection) {
            continue;
          }
          var clientEdge = ConnectionHandler.buildConnectionEdge(store, connection, serverEdge);
          if (!clientEdge) {
            continue;
          }
          switch (info.rangeBehavior) {
            case "append":
              ConnectionHandler.insertEdgeAfter(connection, clientEdge);
              break;
            case "prepend":
              ConnectionHandler.insertEdgeBefore(connection, clientEdge);
              break;
            default:
              warning(false, "RelayDeclarativeMutationConfig: RANGE_ADD range behavior `%s` will not work as expected in RelayModern, supported range behaviors are 'append', 'prepend'.", info.rangeBehavior);
              break;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    };
  };
  var rangeDelete = function(config, request) {
    var { parentID, connectionKeys, pathToConnection, deletedIDFieldName } = config;
    if (!parentID) {
      warning(false, "RelayDeclarativeMutationConfig: For mutation config RANGE_DELETE to work you must include a parentID");
      return null;
    }
    var rootField = getRootField(request);
    if (!rootField) {
      return null;
    }
    return function(store, data) {
      if (!data) {
        return;
      }
      var deleteIDs = [];
      var deletedIDField = data[rootField];
      if (deletedIDField && Array.isArray(deletedIDFieldName)) {
        var _iterator2 = (0, _createForOfIteratorHelper2["default"])(deletedIDFieldName), _step2;
        try {
          for (_iterator2.s();!(_step2 = _iterator2.n()).done; ) {
            var eachField = _step2.value;
            if (deletedIDField && typeof deletedIDField === "object") {
              deletedIDField = deletedIDField[eachField];
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        if (Array.isArray(deletedIDField)) {
          deletedIDField.forEach(function(idObject) {
            if (idObject && idObject.id && typeof idObject === "object" && typeof idObject.id === "string") {
              deleteIDs.push(idObject.id);
            }
          });
        } else if (deletedIDField && deletedIDField.id && typeof deletedIDField.id === "string") {
          deleteIDs.push(deletedIDField.id);
        }
      } else if (deletedIDField && typeof deletedIDFieldName === "string" && typeof deletedIDField === "object") {
        deletedIDField = deletedIDField[deletedIDFieldName];
        if (typeof deletedIDField === "string") {
          deleteIDs.push(deletedIDField);
        } else if (Array.isArray(deletedIDField)) {
          deletedIDField.forEach(function(id) {
            if (typeof id === "string") {
              deleteIDs.push(id);
            }
          });
        }
      }
      deleteNode(parentID, connectionKeys, pathToConnection, store, deleteIDs);
    };
  };
  var deleteNode = function(parentID, connectionKeys, pathToConnection, store, deleteIDs) {
    warning(connectionKeys != null, "RelayDeclarativeMutationConfig: RANGE_DELETE must provide a connectionKeys");
    var parent = store.get(parentID);
    if (!parent) {
      return;
    }
    if (pathToConnection.length < 2) {
      warning(false, "RelayDeclarativeMutationConfig: RANGE_DELETE pathToConnection must include at least parent and connection");
      return;
    }
    var recordProxy = parent;
    for (var i = 1;i < pathToConnection.length - 1; i++) {
      if (recordProxy) {
        recordProxy = recordProxy.getLinkedRecord(pathToConnection[i]);
      }
    }
    if (!connectionKeys || !recordProxy) {
      warning(false, "RelayDeclarativeMutationConfig: RANGE_DELETE pathToConnection is incorrect. Unable to find connection with parentID: %s and path: %s", parentID, pathToConnection.toString());
      return;
    }
    var _iterator3 = (0, _createForOfIteratorHelper2["default"])(connectionKeys), _step3;
    try {
      var _loop = function _loop() {
        var key = _step3.value;
        var connection = ConnectionHandler.getConnection(recordProxy, key.key, key.filters);
        if (connection) {
          deleteIDs.forEach(function(deleteID) {
            ConnectionHandler.deleteNode(connection, deleteID);
          });
        }
      };
      for (_iterator3.s();!(_step3 = _iterator3.n()).done; ) {
        _loop();
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  };
  var getRootField = function(request) {
    if (request.fragment.selections && request.fragment.selections.length > 0 && request.fragment.selections[0].kind === "LinkedField") {
      return request.fragment.selections[0].name;
    }
    return null;
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var ConnectionHandler = require_ConnectionHandler();
  var warning = require_warning();
  var MutationTypes = Object.freeze({
    RANGE_ADD: "RANGE_ADD",
    RANGE_DELETE: "RANGE_DELETE",
    NODE_DELETE: "NODE_DELETE"
  });
  var RangeOperations = Object.freeze({
    APPEND: "append",
    PREPEND: "prepend"
  });
  module.exports = {
    MutationTypes,
    RangeOperations,
    convert
  };
});

// node_modules/relay-runtime/lib/mutations/applyOptimisticMutation.js
var require_applyOptimisticMutation = __commonJS((exports, module) => {
  var applyOptimisticMutation = function(environment, config) {
    !isRelayModernEnvironment(environment) && invariant(false, "commitMutation: expected `environment` to be an instance of `RelayModernEnvironment`.");
    var mutation = getRequest(config.mutation);
    if (mutation.params.operationKind !== "mutation") {
      throw new Error("commitMutation: Expected mutation operation");
    }
    var optimisticUpdater = config.optimisticUpdater;
    var { configs, optimisticResponse, variables } = config;
    var operation = createOperationDescriptor(mutation, variables);
    if (configs) {
      var _RelayDeclarativeMuta = RelayDeclarativeMutationConfig.convert(configs, mutation, optimisticUpdater);
      optimisticUpdater = _RelayDeclarativeMuta.optimisticUpdater;
    }
    return environment.applyMutation({
      operation,
      response: optimisticResponse,
      updater: optimisticUpdater
    });
  };
  var _require = require_GraphQLTag();
  var getRequest = _require.getRequest;
  var isRelayModernEnvironment = require_isRelayModernEnvironment();
  var _require2 = require_RelayModernOperationDescriptor();
  var createOperationDescriptor = _require2.createOperationDescriptor;
  var RelayDeclarativeMutationConfig = require_RelayDeclarativeMutationConfig();
  var invariant = require_browser();
  module.exports = applyOptimisticMutation;
});

// node_modules/relay-runtime/lib/mutations/commitLocalUpdate.js
var require_commitLocalUpdate = __commonJS((exports, module) => {
  var commitLocalUpdate = function(environment, updater) {
    environment.commitUpdate(updater);
  };
  module.exports = commitLocalUpdate;
});

// node_modules/relay-runtime/lib/mutations/validateMutation.js
var require_validateMutation = __commonJS((exports, module) => {
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var _require = require_RelayConcreteNode();
  var ACTOR_CHANGE = _require.ACTOR_CHANGE;
  var CLIENT_COMPONENT = _require.CLIENT_COMPONENT;
  var CLIENT_EDGE_TO_CLIENT_OBJECT = _require.CLIENT_EDGE_TO_CLIENT_OBJECT;
  var CLIENT_EXTENSION = _require.CLIENT_EXTENSION;
  var CONDITION = _require.CONDITION;
  var DEFER = _require.DEFER;
  var FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD;
  var INLINE_FRAGMENT = _require.INLINE_FRAGMENT;
  var LINKED_FIELD = _require.LINKED_FIELD;
  var LINKED_HANDLE = _require.LINKED_HANDLE;
  var MODULE_IMPORT = _require.MODULE_IMPORT;
  var RELAY_LIVE_RESOLVER = _require.RELAY_LIVE_RESOLVER;
  var RELAY_RESOLVER = _require.RELAY_RESOLVER;
  var SCALAR_FIELD = _require.SCALAR_FIELD;
  var SCALAR_HANDLE = _require.SCALAR_HANDLE;
  var STREAM = _require.STREAM;
  var TYPE_DISCRIMINATOR = _require.TYPE_DISCRIMINATOR;
  var warning = require_warning();
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var validateMutation = function validateMutation() {
  };
  if (true) {
    addFieldToDiff = function addFieldToDiff(path, diff, isScalar) {
      var deepLoc = diff;
      path.split(".").forEach(function(key, index, arr) {
        if (deepLoc[key] == null) {
          deepLoc[key] = {};
        }
        if (isScalar && index === arr.length - 1) {
          deepLoc[key] = "<scalar>";
        }
        deepLoc = deepLoc[key];
      });
    };
    validateMutation = function validateMutation(optimisticResponse, mutation, variables) {
      var operationName = mutation.operation.name;
      var context = {
        path: "ROOT",
        visitedPaths: new Set,
        variables: variables || {},
        missingDiff: {},
        extraDiff: {},
        moduleImportPaths: new Set
      };
      validateSelections(optimisticResponse, mutation.operation.selections, context);
      validateOptimisticResponse(optimisticResponse, context);
      warning(context.missingDiff.ROOT == null, "Expected `optimisticResponse` to match structure of server response for mutation `%s`, please define fields for all of\n%s", operationName, JSON.stringify(context.missingDiff.ROOT, null, 2));
      warning(context.extraDiff.ROOT == null, "Expected `optimisticResponse` to match structure of server response for mutation `%s`, please remove all fields of\n%s", operationName, JSON.stringify(context.extraDiff.ROOT, null, 2));
    };
    validateSelections = function validateSelections(optimisticResponse, selections, context) {
      selections.forEach(function(selection) {
        return validateSelection(optimisticResponse, selection, context);
      });
    };
    validateSelection = function validateSelection(optimisticResponse, selection, context) {
      switch (selection.kind) {
        case CONDITION:
          validateSelections(optimisticResponse, selection.selections, context);
          return;
        case CLIENT_COMPONENT:
        case FRAGMENT_SPREAD:
          validateSelections(optimisticResponse, selection.fragment.selections, context);
          return;
        case SCALAR_FIELD:
        case LINKED_FIELD:
          return validateField(optimisticResponse, selection, context);
        case ACTOR_CHANGE:
          return validateField(optimisticResponse, selection.linkedField, context);
        case INLINE_FRAGMENT:
          var type = selection.type;
          var isConcreteType = selection.abstractKey == null;
          validateAbstractKey(context, selection.abstractKey);
          selection.selections.forEach(function(subselection) {
            if (isConcreteType && optimisticResponse.__typename !== type) {
              return;
            }
            validateSelection(optimisticResponse, subselection, context);
          });
          return;
        case CLIENT_EXTENSION:
          selection.selections.forEach(function(subselection) {
            validateSelection(optimisticResponse, subselection, context);
          });
          return;
        case MODULE_IMPORT:
          return validateModuleImport(context);
        case TYPE_DISCRIMINATOR:
          return validateAbstractKey(context, selection.abstractKey);
        case RELAY_RESOLVER:
        case RELAY_LIVE_RESOLVER:
        case CLIENT_EDGE_TO_CLIENT_OBJECT:
        case LINKED_HANDLE:
        case SCALAR_HANDLE:
        case DEFER:
        case STREAM: {
          return;
        }
        default:
          return;
      }
    };
    validateModuleImport = function validateModuleImport(context) {
      context.moduleImportPaths.add(context.path);
    };
    validateAbstractKey = function validateAbstractKey(context, abstractKey) {
      if (abstractKey != null) {
        var path = "".concat(context.path, ".").concat(abstractKey);
        context.visitedPaths.add(path);
      }
    };
    validateField = function validateField(optimisticResponse, field, context) {
      var fieldName = field.alias || field.name;
      var path = "".concat(context.path, ".").concat(fieldName);
      context.visitedPaths.add(path);
      switch (field.kind) {
        case SCALAR_FIELD:
          if (hasOwnProperty.call(optimisticResponse, fieldName) === false) {
            addFieldToDiff(path, context.missingDiff, true);
          }
          return;
        case LINKED_FIELD:
          var selections = field.selections;
          if (optimisticResponse[fieldName] === null || hasOwnProperty.call(optimisticResponse, fieldName) && optimisticResponse[fieldName] === undefined) {
            return;
          }
          if (field.plural) {
            if (Array.isArray(optimisticResponse[fieldName])) {
              optimisticResponse[fieldName].forEach(function(r) {
                if (r !== null) {
                  validateSelections(r, selections, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, context), {}, {
                    path
                  }));
                }
              });
              return;
            } else {
              addFieldToDiff(path, context.missingDiff);
              return;
            }
          } else {
            if (optimisticResponse[fieldName] instanceof Object) {
              validateSelections(optimisticResponse[fieldName], selections, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, context), {}, {
                path
              }));
              return;
            } else {
              addFieldToDiff(path, context.missingDiff);
              return;
            }
          }
      }
    };
    validateOptimisticResponse = function validateOptimisticResponse(optimisticResponse, context) {
      if (Array.isArray(optimisticResponse)) {
        optimisticResponse.forEach(function(r) {
          if (r instanceof Object) {
            validateOptimisticResponse(r, context);
          }
        });
        return;
      }
      Object.keys(optimisticResponse).forEach(function(key) {
        var value = optimisticResponse[key];
        var path = "".concat(context.path, ".").concat(key);
        if (context.moduleImportPaths.has(path)) {
          return;
        }
        if (!context.visitedPaths.has(path)) {
          addFieldToDiff(path, context.extraDiff);
          return;
        }
        if (value instanceof Object) {
          validateOptimisticResponse(value, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, context), {}, {
            path
          }));
        }
      });
    };
  }
  var addFieldToDiff;
  var validateSelections;
  var validateSelection;
  var validateModuleImport;
  var validateAbstractKey;
  var validateField;
  var validateOptimisticResponse;
  module.exports = validateMutation;
});

// node_modules/relay-runtime/lib/mutations/commitMutation.js
var require_commitMutation = __commonJS((exports, module) => {
  var commitMutation = function(environment, config) {
    !isRelayModernEnvironment(environment) && invariant(false, "commitMutation: expected `environment` to be an instance of `RelayModernEnvironment`.");
    var mutation = getRequest(config.mutation);
    if (mutation.params.operationKind !== "mutation") {
      throw new Error("commitMutation: Expected mutation operation");
    }
    if (mutation.kind !== "Request") {
      throw new Error("commitMutation: Expected mutation to be of type request");
    }
    var { optimisticResponse, optimisticUpdater, updater } = config;
    var { configs, cacheConfig, onError, onUnsubscribe, variables, uploadables } = config;
    var operation = createOperationDescriptor(mutation, variables, cacheConfig, generateUniqueClientID());
    if (typeof optimisticResponse === "function") {
      optimisticResponse = optimisticResponse();
      warning(false, "commitMutation: Expected `optimisticResponse` to be an object, received a function.");
    }
    if (true) {
      if (optimisticResponse instanceof Object) {
        validateMutation(optimisticResponse, mutation, variables);
      }
    }
    if (configs) {
      var _RelayDeclarativeMuta = RelayDeclarativeMutationConfig.convert(configs, mutation, optimisticUpdater, updater);
      optimisticUpdater = _RelayDeclarativeMuta.optimisticUpdater;
      updater = _RelayDeclarativeMuta.updater;
    }
    var errors = [];
    var subscription = environment.executeMutation({
      operation,
      optimisticResponse,
      optimisticUpdater,
      updater,
      uploadables
    }).subscribe({
      next: function next(payload) {
        var _config$onNext;
        if (Array.isArray(payload)) {
          payload.forEach(function(item) {
            if (item.errors) {
              errors.push.apply(errors, (0, _toConsumableArray2["default"])(item.errors));
            }
          });
        } else {
          if (payload.errors) {
            errors.push.apply(errors, (0, _toConsumableArray2["default"])(payload.errors));
          }
        }
        (_config$onNext = config.onNext) === null || _config$onNext === undefined || _config$onNext.call(config);
      },
      complete: function complete() {
        var onCompleted = config.onCompleted;
        if (onCompleted) {
          var snapshot = environment.lookup(operation.fragment);
          onCompleted(snapshot.data, errors.length !== 0 ? errors : null);
        }
      },
      error: onError,
      unsubscribe: onUnsubscribe
    });
    return {
      dispose: subscription.unsubscribe
    };
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
  var _require = require_GraphQLTag();
  var getRequest = _require.getRequest;
  var _require2 = require_ClientID();
  var generateUniqueClientID = _require2.generateUniqueClientID;
  var isRelayModernEnvironment = require_isRelayModernEnvironment();
  var _require3 = require_RelayModernOperationDescriptor();
  var createOperationDescriptor = _require3.createOperationDescriptor;
  var RelayDeclarativeMutationConfig = require_RelayDeclarativeMutationConfig();
  var validateMutation = require_validateMutation();
  var invariant = require_browser();
  var warning = require_warning();
  module.exports = commitMutation;
});

// node_modules/relay-runtime/lib/util/withProvidedVariables.js
var require_withProvidedVariables = __commonJS((exports, module) => {
  var withProvidedVariables = function(userSuppliedVariables, providedVariables) {
    if (providedVariables != null) {
      var operationVariables = {};
      Object.assign(operationVariables, userSuppliedVariables);
      Object.keys(providedVariables).forEach(function(varName) {
        var providerFunction = providedVariables[varName].get;
        var providerResult = providerFunction();
        if (!debugCache.has(providerFunction)) {
          debugCache.set(providerFunction, providerResult);
          operationVariables[varName] = providerResult;
        } else {
          var cachedResult = debugCache.get(providerFunction);
          if (true) {
            warning(areEqual(providerResult, cachedResult), "Relay: Expected function `%s` for provider `%s` to be a pure function, but got conflicting return values `%s` and `%s`", providerFunction.name, varName, providerResult, cachedResult);
          }
          operationVariables[varName] = cachedResult;
        }
      });
      return operationVariables;
    } else {
      return userSuppliedVariables;
    }
  };
  var areEqual = require_areEqual();
  var warning = require_warning();
  var WEAKMAP_SUPPORTED = typeof WeakMap === "function";
  var debugCache = WEAKMAP_SUPPORTED ? new WeakMap : new Map;
  withProvidedVariables.tests_only_resetDebugCache = function() {
    debugCache = WEAKMAP_SUPPORTED ? new WeakMap : new Map;
  };
  module.exports = withProvidedVariables;
});

// node_modules/relay-runtime/lib/util/isPromise.js
var require_isPromise = __commonJS((exports, module) => {
  var isPromise = function(p) {
    return !!p && typeof p.then === "function";
  };
  module.exports = isPromise;
});

// node_modules/relay-runtime/lib/network/RelayObservable.js
var require_RelayObservable = __commonJS((exports, module) => {
  var isObservable = function(obj) {
    return typeof obj === "object" && obj !== null && typeof obj.subscribe === "function";
  };
  var fromObservable = function(obj) {
    return obj instanceof RelayObservable ? obj : RelayObservable.create(function(sink) {
      return obj.subscribe(sink);
    });
  };
  var fromPromise = function(promise) {
    return RelayObservable.create(function(sink) {
      promise.then(function(value) {
        sink.next(value);
        sink.complete();
      }, sink.error);
    });
  };
  var fromValue = function(value) {
    return RelayObservable.create(function(sink) {
      sink.next(value);
      sink.complete();
    });
  };
  var _subscribe = function(source, observer) {
    var closed = false;
    var cleanup;
    var withClosed = function withClosed(obj) {
      return Object.defineProperty(obj, "closed", {
        get: function get() {
          return closed;
        }
      });
    };
    function doCleanup() {
      if (cleanup) {
        if (cleanup.unsubscribe) {
          cleanup.unsubscribe();
        } else {
          try {
            cleanup();
          } catch (error) {
            hostReportError(error, true);
          }
        }
        cleanup = undefined;
      }
    }
    var subscription = withClosed({
      unsubscribe: function unsubscribe() {
        if (!closed) {
          closed = true;
          try {
            observer.unsubscribe && observer.unsubscribe(subscription);
          } catch (error) {
            hostReportError(error, true);
          } finally {
            doCleanup();
          }
        }
      }
    });
    try {
      observer.start && observer.start(subscription);
    } catch (error) {
      hostReportError(error, true);
    }
    if (closed) {
      return subscription;
    }
    var sink = withClosed({
      next: function next(value) {
        if (!closed && observer.next) {
          try {
            observer.next(value);
          } catch (error) {
            hostReportError(error, true);
          }
        }
      },
      error: function error(_error3, isUncaughtThrownError) {
        if (closed || !observer.error) {
          closed = true;
          hostReportError(_error3, isUncaughtThrownError || false);
          doCleanup();
        } else {
          closed = true;
          try {
            observer.error(_error3);
          } catch (error2) {
            hostReportError(error2, true);
          } finally {
            doCleanup();
          }
        }
      },
      complete: function complete() {
        if (!closed) {
          closed = true;
          try {
            observer.complete && observer.complete();
          } catch (error) {
            hostReportError(error, true);
          } finally {
            doCleanup();
          }
        }
      }
    });
    try {
      cleanup = source(sink);
    } catch (error) {
      sink.error(error, true);
    }
    if (true) {
      if (cleanup !== undefined && typeof cleanup !== "function" && (!cleanup || typeof cleanup.unsubscribe !== "function")) {
        throw new Error("Returned cleanup function which cannot be called: " + String(cleanup));
      }
    }
    if (closed) {
      doCleanup();
    }
    return subscription;
  };
  var swallowError = function(_error, _isUncaughtThrownError) {
  };
  var isPromise = require_isPromise();
  var hostReportError = swallowError;
  var RelayObservable = function() {
    RelayObservable2.create = function create(source) {
      return new RelayObservable2(source);
    };
    function RelayObservable2(source) {
      if (true) {
        if (!source || typeof source !== "function") {
          throw new Error("Source must be a Function: " + String(source));
        }
      }
      this._source = source;
    }
    RelayObservable2.onUnhandledError = function onUnhandledError(callback) {
      hostReportError = callback;
    };
    RelayObservable2.from = function from(obj) {
      return isObservable(obj) ? fromObservable(obj) : isPromise(obj) ? fromPromise(obj) : fromValue(obj);
    };
    var _proto = RelayObservable2.prototype;
    _proto["catch"] = function _catch(fn) {
      var _this = this;
      return RelayObservable2.create(function(sink) {
        var subscription;
        _this.subscribe({
          start: function start(sub) {
            subscription = sub;
          },
          next: sink.next,
          complete: sink.complete,
          error: function error(_error2) {
            try {
              fn(_error2).subscribe({
                start: function start(sub) {
                  subscription = sub;
                },
                next: sink.next,
                complete: sink.complete,
                error: sink.error
              });
            } catch (error2) {
              sink.error(error2, true);
            }
          }
        });
        return function() {
          return subscription.unsubscribe();
        };
      });
    };
    _proto.concat = function concat(next) {
      var _this2 = this;
      return RelayObservable2.create(function(sink) {
        var current;
        _this2.subscribe({
          start: function start(subscription) {
            current = subscription;
          },
          next: sink.next,
          error: sink.error,
          complete: function complete() {
            current = next.subscribe(sink);
          }
        });
        return function() {
          current && current.unsubscribe();
        };
      });
    };
    _proto["do"] = function _do(observer) {
      var _this3 = this;
      return RelayObservable2.create(function(sink) {
        var both = function both(action) {
          return function() {
            try {
              observer[action] && observer[action].apply(observer, arguments);
            } catch (error) {
              hostReportError(error, true);
            }
            sink[action] && sink[action].apply(sink, arguments);
          };
        };
        return _this3.subscribe({
          start: both("start"),
          next: both("next"),
          error: both("error"),
          complete: both("complete"),
          unsubscribe: both("unsubscribe")
        });
      });
    };
    _proto["finally"] = function _finally(fn) {
      var _this4 = this;
      return RelayObservable2.create(function(sink) {
        var subscription = _this4.subscribe(sink);
        return function() {
          subscription.unsubscribe();
          fn();
        };
      });
    };
    _proto.ifEmpty = function ifEmpty(alternate) {
      var _this5 = this;
      return RelayObservable2.create(function(sink) {
        var hasValue = false;
        var current;
        current = _this5.subscribe({
          next: function next(value) {
            hasValue = true;
            sink.next(value);
          },
          error: sink.error,
          complete: function complete() {
            if (hasValue) {
              sink.complete();
            } else {
              current = alternate.subscribe(sink);
            }
          }
        });
        return function() {
          current && current.unsubscribe();
        };
      });
    };
    _proto.subscribe = function subscribe(observer) {
      if (true) {
        if (!observer || typeof observer !== "object") {
          throw new Error("Observer must be an Object with callbacks: " + String(observer));
        }
      }
      return _subscribe(this._source, observer);
    };
    _proto.map = function map(fn) {
      var _this6 = this;
      return RelayObservable2.create(function(sink) {
        var subscription = _this6.subscribe({
          complete: sink.complete,
          error: sink.error,
          next: function next(value) {
            try {
              var mapValue = fn(value);
              sink.next(mapValue);
            } catch (error) {
              sink.error(error, true);
            }
          }
        });
        return function() {
          subscription.unsubscribe();
        };
      });
    };
    _proto.mergeMap = function mergeMap(fn) {
      var _this7 = this;
      return RelayObservable2.create(function(sink) {
        var subscriptions = [];
        function start(subscription) {
          this._sub = subscription;
          subscriptions.push(subscription);
        }
        function complete() {
          subscriptions.splice(subscriptions.indexOf(this._sub), 1);
          if (subscriptions.length === 0) {
            sink.complete();
          }
        }
        _this7.subscribe({
          start,
          next: function next(value) {
            try {
              if (!sink.closed) {
                RelayObservable2.from(fn(value)).subscribe({
                  start,
                  next: sink.next,
                  error: sink.error,
                  complete
                });
              }
            } catch (error) {
              sink.error(error, true);
            }
          },
          error: sink.error,
          complete
        });
        return function() {
          subscriptions.forEach(function(sub) {
            return sub.unsubscribe();
          });
          subscriptions.length = 0;
        };
      });
    };
    _proto.poll = function poll(pollInterval) {
      var _this8 = this;
      if (true) {
        if (typeof pollInterval !== "number" || pollInterval <= 0) {
          throw new Error("RelayObservable: Expected pollInterval to be positive, got: " + pollInterval);
        }
      }
      return RelayObservable2.create(function(sink) {
        var subscription;
        var timeout;
        var poll = function poll() {
          subscription = _this8.subscribe({
            next: sink.next,
            error: sink.error,
            complete: function complete() {
              timeout = setTimeout(poll, pollInterval);
            }
          });
        };
        poll();
        return function() {
          clearTimeout(timeout);
          subscription.unsubscribe();
        };
      });
    };
    _proto.toPromise = function toPromise() {
      var _this9 = this;
      return new Promise(function(resolve, reject) {
        var resolved = false;
        _this9.subscribe({
          next: function next(val) {
            if (!resolved) {
              resolved = true;
              resolve(val);
            }
          },
          error: reject,
          complete: resolve
        });
      });
    };
    return RelayObservable2;
  }();
  if (true) {
    RelayObservable.onUnhandledError(function(error, isUncaughtThrownError) {
      if (typeof fail === "function") {
        fail(String(error));
      } else if (isUncaughtThrownError) {
        setTimeout(function() {
          throw error;
        });
      } else if (typeof console !== "undefined") {
        console.error("RelayObservable: Unhandled Error", error);
      }
    });
  }
  module.exports = RelayObservable;
});

// node_modules/relay-runtime/lib/network/ConvertToExecuteFunction.js
var require_ConvertToExecuteFunction = __commonJS((exports, module) => {
  var convertFetch = function(fn) {
    return function fetch(request, variables, cacheConfig, uploadables, logRequestInfo) {
      var result = fn(request, variables, cacheConfig, uploadables, logRequestInfo);
      if (result instanceof Error) {
        return RelayObservable.create(function(sink) {
          return sink.error(result);
        });
      }
      return RelayObservable.from(result);
    };
  };
  var RelayObservable = require_RelayObservable();
  module.exports = {
    convertFetch
  };
});

// node_modules/relay-runtime/lib/network/RelayNetwork.js
var require_RelayNetwork = __commonJS((exports, module) => {
  var create = function(fetchFn, subscribe) {
    var observeFetch = convertFetch(fetchFn);
    function execute(request, variables, cacheConfig, uploadables, logRequestInfo) {
      var operationVariables = withProvidedVariables(variables, request.providedVariables);
      if (request.operationKind === "subscription") {
        !subscribe && invariant(false, "RelayNetwork: This network layer does not support Subscriptions. To use Subscriptions, provide a custom network layer.");
        uploadables && invariant(false, "RelayNetwork: Cannot provide uploadables while subscribing.");
        return subscribe(request, operationVariables, cacheConfig);
      }
      var pollInterval = cacheConfig.poll;
      if (pollInterval != null) {
        uploadables && invariant(false, "RelayNetwork: Cannot provide uploadables while polling.");
        return observeFetch(request, operationVariables, {
          force: true
        }).poll(pollInterval);
      }
      return observeFetch(request, operationVariables, cacheConfig, uploadables, logRequestInfo);
    }
    return {
      execute
    };
  };
  var withProvidedVariables = require_withProvidedVariables();
  var _require = require_ConvertToExecuteFunction();
  var convertFetch = _require.convertFetch;
  var invariant = require_browser();
  module.exports = {
    create
  };
});

// node_modules/relay-runtime/lib/network/RelayQueryResponseCache.js
var require_RelayQueryResponseCache = __commonJS((exports, module) => {
  var getCacheKey = function(queryID, variables) {
    return JSON.stringify(stableCopy({
      queryID,
      variables
    }));
  };
  var isCurrent = function(fetchTime, ttl) {
    return fetchTime + ttl >= Date.now();
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var stableCopy = require_stableCopy();
  var invariant = require_browser();
  var RelayQueryResponseCache = function() {
    function RelayQueryResponseCache2(_ref) {
      var { size, ttl } = _ref;
      !(size > 0) && invariant(false, "RelayQueryResponseCache: Expected the max cache size to be > 0, got `%s`.", size);
      !(ttl > 0) && invariant(false, "RelayQueryResponseCache: Expected the max ttl to be > 0, got `%s`.", ttl);
      this._responses = new Map;
      this._size = size;
      this._ttl = ttl;
    }
    var _proto = RelayQueryResponseCache2.prototype;
    _proto.clear = function clear() {
      this._responses.clear();
    };
    _proto.get = function get(queryID, variables) {
      var _this = this;
      var cacheKey = getCacheKey(queryID, variables);
      this._responses.forEach(function(response2, key) {
        if (!isCurrent(response2.fetchTime, _this._ttl)) {
          _this._responses["delete"](key);
        }
      });
      var response = this._responses.get(cacheKey);
      if (response == null) {
        return null;
      }
      if (Array.isArray(response.payload)) {
        return response.payload.map(function(payload) {
          return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, payload), {}, {
            extensions: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, payload.extensions), {}, {
              cacheTimestamp: response.fetchTime
            })
          });
        });
      }
      return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, response.payload), {}, {
        extensions: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, response.payload.extensions), {}, {
          cacheTimestamp: response.fetchTime
        })
      });
    };
    _proto.set = function set(queryID, variables, payload) {
      var fetchTime = Date.now();
      var cacheKey = getCacheKey(queryID, variables);
      this._responses["delete"](cacheKey);
      this._responses.set(cacheKey, {
        fetchTime,
        payload
      });
      if (this._responses.size > this._size) {
        var firstKey = this._responses.keys().next();
        if (!firstKey.done) {
          this._responses["delete"](firstKey.value);
        }
      }
    };
    return RelayQueryResponseCache2;
  }();
  module.exports = RelayQueryResponseCache;
});

// node_modules/relay-runtime/lib/util/handlePotentialSnapshotErrors.js
var require_handlePotentialSnapshotErrors = __commonJS((exports, module) => {
  var handlePotentialSnapshotErrors = function(environment, missingRequiredFields, relayResolverErrors) {
    var _iterator = (0, _createForOfIteratorHelper2["default"])(relayResolverErrors), _step;
    try {
      for (_iterator.s();!(_step = _iterator.n()).done; ) {
        var resolverError = _step.value;
        environment.requiredFieldLogger({
          kind: "relay_resolver.error",
          owner: resolverError.field.owner,
          fieldPath: resolverError.field.path,
          error: resolverError.error
        });
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (missingRequiredFields != null) {
      switch (missingRequiredFields.action) {
        case "THROW": {
          var _missingRequiredField = missingRequiredFields.field, path = _missingRequiredField.path, owner = _missingRequiredField.owner;
          environment.requiredFieldLogger({
            kind: "missing_field.throw",
            owner,
            fieldPath: path
          });
          throw new Error("Relay: Missing @required value at path '".concat(path, "' in '").concat(owner, "'."));
        }
        case "LOG":
          missingRequiredFields.fields.forEach(function(_ref) {
            var { path: path2, owner: owner2 } = _ref;
            environment.requiredFieldLogger({
              kind: "missing_field.log",
              owner: owner2,
              fieldPath: path2
            });
          });
          break;
        default: {
          missingRequiredFields.action;
        }
      }
    }
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  module.exports = handlePotentialSnapshotErrors;
});

// node_modules/relay-runtime/lib/util/RelayReplaySubject.js
var require_RelayReplaySubject = __commonJS((exports, module) => {
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var _defineProperty2 = _interopRequireDefault(require_defineProperty());
  var RelayObservable = require_RelayObservable();
  var invariant = require_browser();
  var RelayReplaySubject = function() {
    function RelayReplaySubject2() {
      var _this = this;
      (0, _defineProperty2["default"])(this, "_complete", false);
      (0, _defineProperty2["default"])(this, "_events", []);
      (0, _defineProperty2["default"])(this, "_sinks", new Set);
      (0, _defineProperty2["default"])(this, "_subscription", []);
      this._observable = RelayObservable.create(function(sink) {
        _this._sinks.add(sink);
        var events = _this._events;
        for (var i = 0;i < events.length; i++) {
          if (sink.closed) {
            break;
          }
          var event = events[i];
          switch (event.kind) {
            case "complete":
              sink.complete();
              break;
            case "error":
              sink.error(event.error);
              break;
            case "next":
              sink.next(event.data);
              break;
            default:
              event.kind;
              invariant(false, "RelayReplaySubject: Unknown event kind `%s`.", event.kind);
          }
        }
        return function() {
          _this._sinks["delete"](sink);
        };
      });
    }
    var _proto = RelayReplaySubject2.prototype;
    _proto.complete = function complete() {
      if (this._complete === true) {
        return;
      }
      this._complete = true;
      this._events.push({
        kind: "complete"
      });
      this._sinks.forEach(function(sink) {
        return sink.complete();
      });
    };
    _proto.error = function error(_error) {
      if (this._complete === true) {
        return;
      }
      this._complete = true;
      this._events.push({
        kind: "error",
        error: _error
      });
      this._sinks.forEach(function(sink) {
        return sink.error(_error);
      });
    };
    _proto.next = function next(data) {
      if (this._complete === true) {
        return;
      }
      this._events.push({
        kind: "next",
        data
      });
      this._sinks.forEach(function(sink) {
        return sink.next(data);
      });
    };
    _proto.subscribe = function subscribe(observer) {
      var subscription = this._observable.subscribe(observer);
      this._subscription.push(subscription);
      return subscription;
    };
    _proto.unsubscribe = function unsubscribe() {
      var _iterator = (0, _createForOfIteratorHelper2["default"])(this._subscription), _step;
      try {
        for (_iterator.s();!(_step = _iterator.n()).done; ) {
          var subscription = _step.value;
          subscription.unsubscribe();
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      this._subscription = [];
    };
    _proto.getObserverCount = function getObserverCount() {
      return this._sinks.size;
    };
    return RelayReplaySubject2;
  }();
  module.exports = RelayReplaySubject;
});

// node_modules/relay-runtime/lib/query/fetchQueryInternal.js
var require_fetchQueryInternal = __commonJS((exports, module) => {
  var fetchQuery = function(environment, operation) {
    return fetchQueryDeduped(environment, operation.request.identifier, function() {
      return environment.execute({
        operation
      });
    });
  };
  var fetchQueryDeduped = function(environment, identifier, fetchFn) {
    return Observable.create(function(sink) {
      var requestCache = getRequestCache(environment);
      var cachedRequest = requestCache.get(identifier);
      if (!cachedRequest) {
        fetchFn()["finally"](function() {
          return requestCache["delete"](identifier);
        }).subscribe({
          start: function start(subscription) {
            cachedRequest = {
              identifier,
              subject: new RelayReplaySubject,
              subjectForInFlightStatus: new RelayReplaySubject,
              subscription,
              promise: null
            };
            requestCache.set(identifier, cachedRequest);
          },
          next: function next(response) {
            var cachedReq = getCachedRequest(requestCache, identifier);
            cachedReq.subject.next(response);
            cachedReq.subjectForInFlightStatus.next(response);
          },
          error: function error(_error) {
            var cachedReq = getCachedRequest(requestCache, identifier);
            cachedReq.subject.error(_error);
            cachedReq.subjectForInFlightStatus.error(_error);
          },
          complete: function complete() {
            var cachedReq = getCachedRequest(requestCache, identifier);
            cachedReq.subject.complete();
            cachedReq.subjectForInFlightStatus.complete();
          },
          unsubscribe: function unsubscribe(subscription) {
            var cachedReq = getCachedRequest(requestCache, identifier);
            cachedReq.subject.unsubscribe();
            cachedReq.subjectForInFlightStatus.unsubscribe();
          }
        });
      }
      !(cachedRequest != null) && invariant(false, "[fetchQueryInternal] fetchQueryDeduped: Expected `start` to be called synchronously");
      return getObservableForCachedRequest(requestCache, cachedRequest).subscribe(sink);
    });
  };
  var getObservableForCachedRequest = function(requestCache, cachedRequest) {
    return Observable.create(function(sink) {
      var subscription = cachedRequest.subject.subscribe(sink);
      return function() {
        subscription.unsubscribe();
        var cachedRequestInstance = requestCache.get(cachedRequest.identifier);
        if (cachedRequestInstance) {
          var requestSubscription = cachedRequestInstance.subscription;
          if (requestSubscription != null && cachedRequestInstance.subject.getObserverCount() === 0) {
            requestSubscription.unsubscribe();
            requestCache["delete"](cachedRequest.identifier);
          }
        }
      };
    });
  };
  var getActiveStatusObservableForCachedRequest = function(environment, requestCache, cachedRequest) {
    return Observable.create(function(sink) {
      var subscription = cachedRequest.subjectForInFlightStatus.subscribe({
        error: sink.error,
        next: function next(response) {
          if (!environment.isRequestActive(cachedRequest.identifier)) {
            sink.complete();
            return;
          }
          sink.next();
        },
        complete: sink.complete,
        unsubscribe: sink.complete
      });
      return function() {
        subscription.unsubscribe();
      };
    });
  };
  var getPromiseForActiveRequest = function(environment, request) {
    var requestCache = getRequestCache(environment);
    var cachedRequest = requestCache.get(request.identifier);
    if (!cachedRequest) {
      return null;
    }
    if (!environment.isRequestActive(cachedRequest.identifier)) {
      return null;
    }
    var promise = new Promise(function(resolve, reject) {
      var resolveOnNext = false;
      getActiveStatusObservableForCachedRequest(environment, requestCache, cachedRequest).subscribe({
        complete: resolve,
        error: reject,
        next: function next(response) {
          if (resolveOnNext) {
            resolve(response);
          }
        }
      });
      resolveOnNext = true;
    });
    return promise;
  };
  var getObservableForActiveRequest = function(environment, request) {
    var requestCache = getRequestCache(environment);
    var cachedRequest = requestCache.get(request.identifier);
    if (!cachedRequest) {
      return null;
    }
    if (!environment.isRequestActive(cachedRequest.identifier)) {
      return null;
    }
    return getActiveStatusObservableForCachedRequest(environment, requestCache, cachedRequest);
  };
  var getRequestCache = function(environment) {
    var cached = requestCachesByEnvironment.get(environment);
    if (cached != null) {
      return cached;
    }
    var requestCache = new Map;
    requestCachesByEnvironment.set(environment, requestCache);
    return requestCache;
  };
  var getCachedRequest = function(requestCache, identifier) {
    var cached = requestCache.get(identifier);
    !(cached != null) && invariant(false, "[fetchQueryInternal] getCachedRequest: Expected request to be cached");
    return cached;
  };
  var Observable = require_RelayObservable();
  var RelayReplaySubject = require_RelayReplaySubject();
  var invariant = require_browser();
  var WEAKMAP_SUPPORTED = typeof WeakMap === "function";
  var requestCachesByEnvironment = WEAKMAP_SUPPORTED ? new WeakMap : new Map;
  module.exports = {
    fetchQuery,
    fetchQueryDeduped,
    getPromiseForActiveRequest,
    getObservableForActiveRequest
  };
});

// node_modules/relay-runtime/lib/query/fetchQuery.js
var require_fetchQuery = __commonJS((exports, module) => {
  var fetchQuery = function(environment, query, variables, options) {
    var _options$fetchPolicy;
    var queryNode = getRequest(query);
    !(queryNode.params.operationKind === "query") && invariant(false, "fetchQuery: Expected query operation");
    var networkCacheConfig = (0, _objectSpread2["default"])({
      force: true
    }, options === null || options === undefined ? undefined : options.networkCacheConfig);
    var operation = createOperationDescriptor(queryNode, variables, networkCacheConfig);
    var fetchPolicy = (_options$fetchPolicy = options === null || options === undefined ? undefined : options.fetchPolicy) !== null && _options$fetchPolicy !== undefined ? _options$fetchPolicy : "network-only";
    function readData(snapshot) {
      handlePotentialSnapshotErrors(environment, snapshot.missingRequiredFields, snapshot.relayResolverErrors);
      return snapshot.data;
    }
    switch (fetchPolicy) {
      case "network-only": {
        return getNetworkObservable(environment, operation).map(readData);
      }
      case "store-or-network": {
        if (environment.check(operation).status === "available") {
          return RelayObservable.from(environment.lookup(operation.fragment)).map(readData);
        }
        return getNetworkObservable(environment, operation).map(readData);
      }
      default:
        throw new Error("fetchQuery: Invalid fetchPolicy " + fetchPolicy);
    }
  };
  var getNetworkObservable = function(environment, operation) {
    return fetchQueryInternal.fetchQuery(environment, operation).map(function() {
      return environment.lookup(operation.fragment);
    });
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var RelayObservable = require_RelayObservable();
  var _require = require_RelayModernOperationDescriptor();
  var createOperationDescriptor = _require.createOperationDescriptor;
  var handlePotentialSnapshotErrors = require_handlePotentialSnapshotErrors();
  var fetchQueryInternal = require_fetchQueryInternal();
  var _require2 = require_GraphQLTag();
  var getRequest = _require2.getRequest;
  var invariant = require_browser();
  module.exports = fetchQuery;
});

// node_modules/relay-runtime/lib/query/fetchQuery_DEPRECATED.js
var require_fetchQuery_DEPRECATED = __commonJS((exports, module) => {
  var fetchQuery_DEPRECATED = function(environment, taggedNode, variables, cacheConfig) {
    var query = getRequest(taggedNode);
    if (query.params.operationKind !== "query") {
      throw new Error("fetchQuery: Expected query operation");
    }
    var operation = createOperationDescriptor(query, variables, cacheConfig);
    return environment.execute({
      operation
    }).map(function() {
      return environment.lookup(operation.fragment).data;
    }).toPromise();
  };
  var _require = require_RelayModernOperationDescriptor();
  var createOperationDescriptor = _require.createOperationDescriptor;
  var _require2 = require_GraphQLTag();
  var getRequest = _require2.getRequest;
  module.exports = fetchQuery_DEPRECATED;
});

// node_modules/relay-runtime/lib/query/PreloadableQueryRegistry.js
var require_PreloadableQueryRegistry = __commonJS((exports, module) => {
  var PreloadableQueryRegistry = function() {
    function PreloadableQueryRegistry2() {
      this._preloadableQueries = new Map;
      this._callbacks = new Map;
    }
    var _proto = PreloadableQueryRegistry2.prototype;
    _proto.set = function set(key, value) {
      this._preloadableQueries.set(key, value);
      var callbacks = this._callbacks.get(key);
      if (callbacks != null) {
        callbacks.forEach(function(cb) {
          try {
            cb(value);
          } catch (e) {
            setTimeout(function() {
              throw e;
            }, 0);
          }
        });
      }
    };
    _proto.get = function get(key) {
      return this._preloadableQueries.get(key);
    };
    _proto.onLoad = function onLoad(key, callback) {
      var _this$_callbacks$get;
      var callbacks = (_this$_callbacks$get = this._callbacks.get(key)) !== null && _this$_callbacks$get !== undefined ? _this$_callbacks$get : new Set;
      callbacks.add(callback);
      var dispose = function dispose() {
        callbacks["delete"](callback);
      };
      this._callbacks.set(key, callbacks);
      return {
        dispose
      };
    };
    _proto.clear = function clear() {
      this._preloadableQueries.clear();
    };
    return PreloadableQueryRegistry2;
  }();
  var preloadableQueryRegistry = new PreloadableQueryRegistry;
  module.exports = preloadableQueryRegistry;
});

// node_modules/relay-runtime/lib/util/getPendingOperationsForFragment.js
var require_getPendingOperationsForFragment = __commonJS((exports, module) => {
  var getPendingOperationsForFragment = function(environment, fragmentNode, fragmentOwner) {
    var _pendingOperations$ma, _pendingOperations;
    var pendingOperations = [];
    var promise = getPromiseForActiveRequest(environment, fragmentOwner);
    if (promise != null) {
      pendingOperations = [fragmentOwner];
    } else {
      var _result$pendingOperat, _result$promise;
      var result = environment.getOperationTracker().getPendingOperationsAffectingOwner(fragmentOwner);
      pendingOperations = (_result$pendingOperat = result === null || result === undefined ? undefined : result.pendingOperations) !== null && _result$pendingOperat !== undefined ? _result$pendingOperat : [];
      promise = (_result$promise = result === null || result === undefined ? undefined : result.promise) !== null && _result$promise !== undefined ? _result$promise : null;
    }
    if (!promise) {
      return null;
    }
    var pendingOperationName = (_pendingOperations$ma = (_pendingOperations = pendingOperations) === null || _pendingOperations === undefined ? undefined : _pendingOperations.map(function(op) {
      return op.node.params.name;
    }).join(",")) !== null && _pendingOperations$ma !== undefined ? _pendingOperations$ma : null;
    if (pendingOperationName == null || pendingOperationName.length === 0) {
      pendingOperationName = "Unknown pending operation";
    }
    var fragmentName = fragmentNode.name;
    var promiseDisplayName = pendingOperationName === fragmentName ? "Relay(".concat(pendingOperationName, ")") : "Relay(".concat(pendingOperationName, ":").concat(fragmentName, ")");
    promise.displayName = promiseDisplayName;
    environment.__log({
      name: "pendingoperation.found",
      fragment: fragmentNode,
      fragmentOwner,
      pendingOperations
    });
    return {
      promise,
      pendingOperations
    };
  };
  var _require = require_fetchQueryInternal();
  var getPromiseForActiveRequest = _require.getPromiseForActiveRequest;
  module.exports = getPendingOperationsForFragment;
});

// node_modules/relay-runtime/lib/util/isScalarAndEqual.js
var require_isScalarAndEqual = __commonJS((exports, module) => {
  var isScalarAndEqual = function(valueA, valueB) {
    return valueA === valueB && (valueA === null || typeof valueA !== "object");
  };
  module.exports = isScalarAndEqual;
});

// node_modules/relay-runtime/lib/util/recycleNodesInto.js
var require_recycleNodesInto = __commonJS((exports, module) => {
  var recycleNodesInto = function(prevData, nextData) {
    return recycleNodesIntoImpl(prevData, nextData, true);
  };
  var recycleNodesIntoImpl = function(prevData, nextData, canMutate) {
    if (prevData === nextData || typeof prevData !== "object" || !prevData || prevData.constructor !== Object && !Array.isArray(prevData) || typeof nextData !== "object" || !nextData || nextData.constructor !== Object && !Array.isArray(nextData)) {
      return nextData;
    }
    var canRecycle = false;
    var prevArray = Array.isArray(prevData) ? prevData : null;
    var nextArray = Array.isArray(nextData) ? nextData : null;
    if (prevArray && nextArray) {
      var canMutateNext = canMutate && !Object.isFrozen(nextArray);
      canRecycle = nextArray.reduce(function(wasEqual, nextItem, ii) {
        var prevValue = prevArray[ii];
        var nextValue = recycleNodesIntoImpl(prevValue, nextItem, canMutateNext);
        if (nextValue !== nextArray[ii] && canMutateNext) {
          nextArray[ii] = nextValue;
        }
        return wasEqual && nextValue === prevArray[ii];
      }, true) && prevArray.length === nextArray.length;
    } else if (!prevArray && !nextArray) {
      var prevObject = prevData;
      var nextObject = nextData;
      var prevKeys = Object.keys(prevObject);
      var nextKeys = Object.keys(nextObject);
      var _canMutateNext = canMutate && !Object.isFrozen(nextObject);
      canRecycle = nextKeys.reduce(function(wasEqual, key) {
        var prevValue = prevObject[key];
        var nextValue = recycleNodesIntoImpl(prevValue, nextObject[key], _canMutateNext);
        if (nextValue !== nextObject[key] && _canMutateNext) {
          nextObject[key] = nextValue;
        }
        return wasEqual && nextValue === prevObject[key];
      }, true) && prevKeys.length === nextKeys.length;
    }
    return canRecycle ? prevData : nextData;
  };
  module.exports = recycleNodesInto;
});

// node_modules/relay-runtime/lib/store/RelayModernFragmentSpecResolver.js
var require_RelayModernFragmentSpecResolver = __commonJS((exports, module) => {
  var disposeCallback = function(disposable) {
    disposable && disposable.dispose();
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var _defineProperty2 = _interopRequireDefault(require_defineProperty());
  var getPendingOperationsForFragment = require_getPendingOperationsForFragment();
  var handlePotentialSnapshotErrors = require_handlePotentialSnapshotErrors();
  var isScalarAndEqual = require_isScalarAndEqual();
  var recycleNodesInto = require_recycleNodesInto();
  var RelayFeatureFlags = require_RelayFeatureFlags();
  var _require = require_RelayModernOperationDescriptor();
  var createRequestDescriptor = _require.createRequestDescriptor;
  var _require2 = require_RelayModernSelector();
  var areEqualSelectors = _require2.areEqualSelectors;
  var createReaderSelector = _require2.createReaderSelector;
  var getSelectorsFromObject = _require2.getSelectorsFromObject;
  var areEqual = require_areEqual();
  var invariant = require_browser();
  var warning = require_warning();
  var RelayModernFragmentSpecResolver = function() {
    function RelayModernFragmentSpecResolver2(context, fragments, props, callback, rootIsQueryRenderer) {
      var _this = this;
      (0, _defineProperty2["default"])(this, "_onChange", function() {
        _this._stale = true;
        if (typeof _this._callback === "function") {
          _this._callback();
        }
      });
      this._callback = callback;
      this._context = context;
      this._data = {};
      this._fragments = fragments;
      this._props = {};
      this._resolvers = {};
      this._stale = false;
      this._rootIsQueryRenderer = rootIsQueryRenderer;
      this.setProps(props);
    }
    var _proto = RelayModernFragmentSpecResolver2.prototype;
    _proto.dispose = function dispose() {
      for (var key in this._resolvers) {
        if (this._resolvers.hasOwnProperty(key)) {
          disposeCallback(this._resolvers[key]);
        }
      }
    };
    _proto.resolve = function resolve() {
      if (this._stale) {
        var prevData = this._data;
        var nextData;
        for (var key in this._resolvers) {
          if (this._resolvers.hasOwnProperty(key)) {
            var resolver = this._resolvers[key];
            var prevItem = prevData[key];
            if (resolver) {
              var nextItem = resolver.resolve();
              if (nextData || nextItem !== prevItem) {
                nextData = nextData || (0, _objectSpread2["default"])({}, prevData);
                nextData[key] = nextItem;
              }
            } else {
              var prop = this._props[key];
              var _nextItem = prop !== undefined ? prop : null;
              if (nextData || !isScalarAndEqual(_nextItem, prevItem)) {
                nextData = nextData || (0, _objectSpread2["default"])({}, prevData);
                nextData[key] = _nextItem;
              }
            }
          }
        }
        this._data = nextData || prevData;
        this._stale = false;
      }
      return this._data;
    };
    _proto.setCallback = function setCallback(props, callback) {
      this._callback = callback;
      if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
        this.setProps(props);
      }
    };
    _proto.setProps = function setProps(props) {
      this._props = {};
      var ownedSelectors = getSelectorsFromObject(this._fragments, props);
      for (var key in ownedSelectors) {
        if (ownedSelectors.hasOwnProperty(key)) {
          var ownedSelector = ownedSelectors[key];
          var resolver = this._resolvers[key];
          if (ownedSelector == null) {
            if (resolver != null) {
              resolver.dispose();
            }
            resolver = null;
          } else if (ownedSelector.kind === "PluralReaderSelector") {
            if (resolver == null) {
              resolver = new SelectorListResolver(this._context.environment, this._rootIsQueryRenderer, ownedSelector, this._callback != null, this._onChange);
            } else {
              !(resolver instanceof SelectorListResolver) && invariant(false, "RelayModernFragmentSpecResolver: Expected prop `%s` to always be an array.", key);
              resolver.setSelector(ownedSelector);
            }
          } else {
            if (resolver == null) {
              resolver = new SelectorResolver(this._context.environment, this._rootIsQueryRenderer, ownedSelector, this._callback != null, this._onChange);
            } else {
              !(resolver instanceof SelectorResolver) && invariant(false, "RelayModernFragmentSpecResolver: Expected prop `%s` to always be an object.", key);
              resolver.setSelector(ownedSelector);
            }
          }
          this._props[key] = props[key];
          this._resolvers[key] = resolver;
        }
      }
      this._stale = true;
    };
    _proto.setVariables = function setVariables(variables, request) {
      for (var key in this._resolvers) {
        if (this._resolvers.hasOwnProperty(key)) {
          var resolver = this._resolvers[key];
          if (resolver) {
            resolver.setVariables(variables, request);
          }
        }
      }
      this._stale = true;
    };
    return RelayModernFragmentSpecResolver2;
  }();
  var SelectorResolver = function() {
    function SelectorResolver2(environment, rootIsQueryRenderer, selector, subscribeOnConstruction, callback) {
      var _this2 = this;
      (0, _defineProperty2["default"])(this, "_onChange", function(snapshot) {
        _this2._data = snapshot.data;
        _this2._isMissingData = snapshot.isMissingData;
        _this2._missingRequiredFields = snapshot.missingRequiredFields;
        _this2._relayResolverErrors = snapshot.relayResolverErrors;
        _this2._callback();
      });
      var _snapshot = environment.lookup(selector);
      this._callback = callback;
      this._data = _snapshot.data;
      this._isMissingData = _snapshot.isMissingData;
      this._missingRequiredFields = _snapshot.missingRequiredFields;
      this._relayResolverErrors = _snapshot.relayResolverErrors;
      this._environment = environment;
      this._rootIsQueryRenderer = rootIsQueryRenderer;
      this._selector = selector;
      if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
        if (subscribeOnConstruction) {
          this._subscription = environment.subscribe(_snapshot, this._onChange);
        }
      } else {
        this._subscription = environment.subscribe(_snapshot, this._onChange);
      }
    }
    var _proto2 = SelectorResolver2.prototype;
    _proto2.dispose = function dispose() {
      if (this._subscription) {
        this._subscription.dispose();
        this._subscription = null;
      }
    };
    _proto2.resolve = function resolve() {
      if (this._isMissingData === true) {
        var pendingOperationsResult = getPendingOperationsForFragment(this._environment, this._selector.node, this._selector.owner);
        var promise = pendingOperationsResult === null || pendingOperationsResult === undefined ? undefined : pendingOperationsResult.promise;
        if (promise != null) {
          if (this._rootIsQueryRenderer) {
            warning(false, "Relay: Relay Container for fragment `%s` has missing data and would suspend. When using features such as @defer or @module, use `useFragment` instead of a Relay Container.", this._selector.node.name);
          } else {
            var _pendingOperationsRes;
            var pendingOperations = (_pendingOperationsRes = pendingOperationsResult === null || pendingOperationsResult === undefined ? undefined : pendingOperationsResult.pendingOperations) !== null && _pendingOperationsRes !== undefined ? _pendingOperationsRes : [];
            warning(false, "Relay: Relay Container for fragment `%s` suspended. When using features such as @defer or @module, use `useFragment` instead of a Relay Container.", this._selector.node.name);
            this._environment.__log({
              name: "suspense.fragment",
              data: this._data,
              fragment: this._selector.node,
              isRelayHooks: false,
              isMissingData: this._isMissingData,
              isPromiseCached: false,
              pendingOperations
            });
            throw promise;
          }
        }
      }
      handlePotentialSnapshotErrors(this._environment, this._missingRequiredFields, this._relayResolverErrors);
      return this._data;
    };
    _proto2.setSelector = function setSelector(selector) {
      if (this._subscription != null && areEqualSelectors(selector, this._selector)) {
        return;
      }
      this.dispose();
      var snapshot = this._environment.lookup(selector);
      this._data = recycleNodesInto(this._data, snapshot.data);
      this._isMissingData = snapshot.isMissingData;
      this._missingRequiredFields = snapshot.missingRequiredFields;
      this._relayResolverErrors = snapshot.relayResolverErrors;
      this._selector = selector;
      this._subscription = this._environment.subscribe(snapshot, this._onChange);
    };
    _proto2.setVariables = function setVariables(variables, request) {
      if (areEqual(variables, this._selector.variables)) {
        return;
      }
      var requestDescriptor = createRequestDescriptor(request, variables);
      var selector = createReaderSelector(this._selector.node, this._selector.dataID, variables, requestDescriptor);
      this.setSelector(selector);
    };
    return SelectorResolver2;
  }();
  var SelectorListResolver = function() {
    function SelectorListResolver2(environment, rootIsQueryRenderer, selector, subscribeOnConstruction, callback) {
      var _this3 = this;
      (0, _defineProperty2["default"])(this, "_onChange", function(data) {
        _this3._stale = true;
        _this3._callback();
      });
      this._callback = callback;
      this._data = [];
      this._environment = environment;
      this._resolvers = [];
      this._stale = true;
      this._rootIsQueryRenderer = rootIsQueryRenderer;
      this._subscribeOnConstruction = subscribeOnConstruction;
      this.setSelector(selector);
    }
    var _proto3 = SelectorListResolver2.prototype;
    _proto3.dispose = function dispose() {
      this._resolvers.forEach(disposeCallback);
    };
    _proto3.resolve = function resolve() {
      if (this._stale) {
        var prevData = this._data;
        var nextData;
        for (var ii = 0;ii < this._resolvers.length; ii++) {
          var prevItem = prevData[ii];
          var nextItem = this._resolvers[ii].resolve();
          if (nextData || nextItem !== prevItem) {
            nextData = nextData || prevData.slice(0, ii);
            nextData.push(nextItem);
          }
        }
        if (!nextData && this._resolvers.length !== prevData.length) {
          nextData = prevData.slice(0, this._resolvers.length);
        }
        this._data = nextData || prevData;
        this._stale = false;
      }
      return this._data;
    };
    _proto3.setSelector = function setSelector(selector) {
      var selectors = selector.selectors;
      while (this._resolvers.length > selectors.length) {
        var resolver = this._resolvers.pop();
        resolver.dispose();
      }
      for (var ii = 0;ii < selectors.length; ii++) {
        if (ii < this._resolvers.length) {
          this._resolvers[ii].setSelector(selectors[ii]);
        } else {
          this._resolvers[ii] = new SelectorResolver(this._environment, this._rootIsQueryRenderer, selectors[ii], this._subscribeOnConstruction, this._onChange);
        }
      }
      this._stale = true;
    };
    _proto3.setVariables = function setVariables(variables, request) {
      this._resolvers.forEach(function(resolver) {
        return resolver.setVariables(variables, request);
      });
      this._stale = true;
    };
    return SelectorListResolver2;
  }();
  module.exports = RelayModernFragmentSpecResolver;
});

// node_modules/relay-runtime/lib/store/createFragmentSpecResolver.js
var require_createFragmentSpecResolver = __commonJS((exports, module) => {
  var createFragmentSpecResolver = function(context, containerName, fragments, props, rootIsQueryRenderer, callback) {
    if (true) {
      var fragmentNames = Object.keys(fragments);
      fragmentNames.forEach(function(fragmentName) {
        var propValue = props[fragmentName];
        warning(propValue !== undefined, "createFragmentSpecResolver: Expected prop `%s` to be supplied to `%s`, but got `undefined`. Pass an explicit `null` if this is intentional.", fragmentName, containerName);
      });
    }
    return new RelayModernFragmentSpecResolver(context, fragments, props, callback, rootIsQueryRenderer);
  };
  var RelayModernFragmentSpecResolver = require_RelayModernFragmentSpecResolver();
  var warning = require_warning();
  module.exports = createFragmentSpecResolver;
});

// node_modules/relay-runtime/lib/store/createRelayContext.js
var require_createRelayContext = __commonJS((exports, module) => {
  var createRelayContext = function(react) {
    if (!relayContext) {
      relayContext = react.createContext(null);
      if (true) {
        relayContext.displayName = "RelayContext";
      }
      firstReact = react;
    }
    !(react === firstReact) && invariant(false, "[createRelayContext]: You are passing a different instance of React", react.version);
    return relayContext;
  };
  var invariant = require_browser();
  var relayContext;
  var firstReact;
  module.exports = createRelayContext;
});

// node_modules/relay-runtime/lib/store/experimental-live-resolvers/LiveResolverSuspenseSentinel.js
var require_LiveResolverSuspenseSentinel = __commonJS((exports, module) => {
  var suspenseSentinel = function() {
    return LIVE_RESOLVER_SUSPENSE_SENTINEL;
  };
  var isSuspenseSentinel = function(value) {
    return value === LIVE_RESOLVER_SUSPENSE_SENTINEL;
  };
  var LIVE_RESOLVER_SUSPENSE_SENTINEL = Object.freeze({
    __LIVE_RESOLVER_SUSPENSE_SENTINEL: true
  });
  module.exports = {
    isSuspenseSentinel,
    suspenseSentinel
  };
});

// node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js
var require_objectWithoutPropertiesLoose = __commonJS((exports, module) => {
  var _objectWithoutPropertiesLoose = function(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0;i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  };
  module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/relay-runtime/lib/store/RelayModernRecord.js
var require_RelayModernRecord = __commonJS((exports, module) => {
  var clone = function(record) {
    return (0, _objectSpread2["default"])({}, record);
  };
  var copyFields = function(source, sink) {
    for (var key in source) {
      if (source.hasOwnProperty(key)) {
        if (key !== ID_KEY && key !== TYPENAME_KEY) {
          sink[key] = source[key];
        }
      }
    }
  };
  var create = function(dataID, typeName) {
    var record = {};
    record[ID_KEY] = dataID;
    record[TYPENAME_KEY] = typeName;
    return record;
  };
  var fromObject = function(json) {
    return json;
  };
  var getDataID = function(record) {
    return record[ID_KEY];
  };
  var getFields = function(record) {
    if (ERRORS_KEY in record) {
      return Object.keys(record).filter(function(field) {
        return field !== ERRORS_KEY;
      });
    }
    return Object.keys(record);
  };
  var getType = function(record) {
    return record[TYPENAME_KEY];
  };
  var getErrors = function(record, storageKey) {
    var _record$ERRORS_KEY;
    return (_record$ERRORS_KEY = record[ERRORS_KEY]) === null || _record$ERRORS_KEY === undefined ? undefined : _record$ERRORS_KEY[storageKey];
  };
  var getValue = function(record, storageKey) {
    var value = record[storageKey];
    if (value && typeof value === "object") {
      !(!value.hasOwnProperty(REF_KEY) && !value.hasOwnProperty(REFS_KEY)) && invariant(false, "RelayModernRecord.getValue(): Expected a scalar (non-link) value for `%s.%s` but found %s.", record[ID_KEY], storageKey, value.hasOwnProperty(REF_KEY) ? "a linked record" : "plural linked records");
    }
    return value;
  };
  var hasValue = function(record, storageKey) {
    return storageKey in record;
  };
  var getLinkedRecordID = function(record, storageKey) {
    var maybeLink = record[storageKey];
    if (maybeLink == null) {
      return maybeLink;
    }
    var link = maybeLink;
    !(typeof link === "object" && link && typeof link[REF_KEY] === "string") && invariant(false, "RelayModernRecord.getLinkedRecordID(): Expected `%s.%s` to be a linked ID, was `%s`.%s", record[ID_KEY], storageKey, JSON.stringify(link), typeof link === "object" && link[REFS_KEY] !== undefined ? " It appears to be a plural linked record: did you mean to call getLinkedRecords() instead of getLinkedRecord()?" : "");
    return link[REF_KEY];
  };
  var getLinkedRecordIDs = function(record, storageKey) {
    var links = record[storageKey];
    if (links == null) {
      return links;
    }
    !(typeof links === "object" && Array.isArray(links[REFS_KEY])) && invariant(false, "RelayModernRecord.getLinkedRecordIDs(): Expected `%s.%s` to contain an array of linked IDs, got `%s`.%s", record[ID_KEY], storageKey, JSON.stringify(links), typeof links === "object" && links[REF_KEY] !== undefined ? " It appears to be a singular linked record: did you mean to call getLinkedRecord() instead of getLinkedRecords()?" : "");
    return links[REFS_KEY];
  };
  var getInvalidationEpoch = function(record) {
    if (record == null) {
      return null;
    }
    var invalidatedAt = record[INVALIDATED_AT_KEY];
    if (typeof invalidatedAt !== "number") {
      return null;
    }
    return invalidatedAt;
  };
  var update = function(prevRecord, nextRecord) {
    var _updated2;
    if (true) {
      var _getType, _getType2;
      var prevID = getDataID(prevRecord);
      var nextID = getDataID(nextRecord);
      warning(prevID === nextID, "RelayModernRecord: Invalid record update, expected both versions of the record to have the same id, got `%s` and `%s`.", prevID, nextID);
      var prevType = (_getType = getType(prevRecord)) !== null && _getType !== undefined ? _getType : null;
      var nextType = (_getType2 = getType(nextRecord)) !== null && _getType2 !== undefined ? _getType2 : null;
      warning(isClientID(nextID) && nextID !== ROOT_ID || prevType === nextType, "RelayModernRecord: Invalid record update, expected both versions of record `%s` to have the same `%s` but got conflicting types `%s` and `%s`. The GraphQL server likely violated the globally unique id requirement by returning the same id for different objects.", prevID, TYPENAME_KEY, prevType, nextType);
    }
    var prevErrorsByKey = prevRecord[ERRORS_KEY];
    var nextErrorsByKey = nextRecord[ERRORS_KEY];
    var updated = null;
    if (prevErrorsByKey == null && nextErrorsByKey == null) {
      var _updated;
      for (var storageKey in nextRecord) {
        if (updated || !areEqual(prevRecord[storageKey], nextRecord[storageKey])) {
          updated = updated !== null ? updated : (0, _objectSpread2["default"])({}, prevRecord);
          updated[storageKey] = nextRecord[storageKey];
        }
      }
      return (_updated = updated) !== null && _updated !== undefined ? _updated : prevRecord;
    }
    for (var _storageKey2 in nextRecord) {
      if (_storageKey2 === ERRORS_KEY) {
        continue;
      }
      var nextValue = nextRecord[_storageKey2];
      var nextErrors = nextErrorsByKey === null || nextErrorsByKey === undefined ? undefined : nextErrorsByKey[_storageKey2];
      if (updated == null) {
        var prevValue = prevRecord[_storageKey2];
        var prevErrors = prevErrorsByKey === null || prevErrorsByKey === undefined ? undefined : prevErrorsByKey[_storageKey2];
        if (areEqual(prevValue, nextValue) && areEqual(prevErrors, nextErrors)) {
          continue;
        }
        updated = (0, _objectSpread2["default"])({}, prevRecord);
        if (prevErrorsByKey != null) {
          updated[ERRORS_KEY] = (0, _objectSpread2["default"])({}, prevErrorsByKey);
        }
      }
      setValue(updated, _storageKey2, nextValue);
      setErrors(updated, _storageKey2, nextErrors);
    }
    return (_updated2 = updated) !== null && _updated2 !== undefined ? _updated2 : prevRecord;
  };
  var merge = function(record1, record2) {
    if (true) {
      var _getType3, _getType4;
      var prevID = getDataID(record1);
      var nextID = getDataID(record2);
      warning(prevID === nextID, "RelayModernRecord: Invalid record merge, expected both versions of the record to have the same id, got `%s` and `%s`.", prevID, nextID);
      var prevType = (_getType3 = getType(record1)) !== null && _getType3 !== undefined ? _getType3 : null;
      var nextType = (_getType4 = getType(record2)) !== null && _getType4 !== undefined ? _getType4 : null;
      warning(isClientID(nextID) && nextID !== ROOT_ID || prevType === nextType, "RelayModernRecord: Invalid record merge, expected both versions of record `%s` to have the same `%s` but got conflicting types `%s` and `%s`. The GraphQL server likely violated the globally unique id requirement by returning the same id for different objects.", prevID, TYPENAME_KEY, prevType, nextType);
    }
    if (ERRORS_KEY in record1 || ERRORS_KEY in record2) {
      var errors1 = record1[ERRORS_KEY], fields1 = (0, _objectWithoutPropertiesLoose2["default"])(record1, [ERRORS_KEY].map(_toPropertyKey2["default"]));
      var errors2 = record2[ERRORS_KEY], fields2 = (0, _objectWithoutPropertiesLoose2["default"])(record2, [ERRORS_KEY].map(_toPropertyKey2["default"]));
      var updated = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, fields1), fields2);
      if (errors1 == null && errors2 == null) {
        return updated;
      }
      var updatedErrors = {};
      for (var storageKey in errors1) {
        if (fields2.hasOwnProperty(storageKey)) {
          continue;
        }
        updatedErrors[storageKey] = errors1[storageKey];
      }
      for (var _storageKey3 in errors2) {
        updatedErrors[_storageKey3] = errors2[_storageKey3];
      }
      for (var _storageKey in updatedErrors) {
        updated[ERRORS_KEY] = updatedErrors;
        break;
      }
      return updated;
    } else {
      return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, record1), record2);
    }
  };
  var freeze = function(record) {
    deepFreeze(record);
  };
  var setErrors = function(record, storageKey, errors) {
    if (true) {
      warning(storageKey in record, "RelayModernRecord: Invalid error update, `%s` should not be undefined.", storageKey);
    }
    var errorsByStorageKey = record[ERRORS_KEY];
    if (errors != null && errors.length > 0) {
      if (errorsByStorageKey == null) {
        record[ERRORS_KEY] = (0, _defineProperty2["default"])({}, storageKey, errors);
      } else {
        errorsByStorageKey[storageKey] = errors;
      }
    } else if (errorsByStorageKey != null) {
      if (delete errorsByStorageKey[storageKey]) {
        for (var otherStorageKey in errorsByStorageKey) {
          if (errorsByStorageKey.hasOwnProperty(otherStorageKey)) {
            return;
          }
        }
        delete record[ERRORS_KEY];
      }
    }
  };
  var setValue = function(record, storageKey, value) {
    if (true) {
      var prevID = getDataID(record);
      if (storageKey === ID_KEY) {
        warning(prevID === value, "RelayModernRecord: Invalid field update, expected both versions of the record to have the same id, got `%s` and `%s`.", prevID, value);
      } else if (storageKey === TYPENAME_KEY) {
        var _getType5;
        var prevType = (_getType5 = getType(record)) !== null && _getType5 !== undefined ? _getType5 : null;
        var nextType = value !== null && value !== undefined ? value : null;
        warning(isClientID(getDataID(record)) && getDataID(record) !== ROOT_ID || prevType === nextType, "RelayModernRecord: Invalid field update, expected both versions of record `%s` to have the same `%s` but got conflicting types `%s` and `%s`. The GraphQL server likely violated the globally unique id requirement by returning the same id for different objects.", prevID, TYPENAME_KEY, prevType, nextType);
      }
    }
    record[storageKey] = value;
  };
  var setLinkedRecordID = function(record, storageKey, linkedID) {
    var link = {};
    link[REF_KEY] = linkedID;
    record[storageKey] = link;
  };
  var setLinkedRecordIDs = function(record, storageKey, linkedIDs) {
    var links = {};
    links[REFS_KEY] = linkedIDs;
    record[storageKey] = links;
  };
  var setActorLinkedRecordID = function(record, storageKey, actorIdentifier, linkedID) {
    var link = {};
    link[REF_KEY] = linkedID;
    link[ACTOR_IDENTIFIER_KEY] = actorIdentifier;
    record[storageKey] = link;
  };
  var getActorLinkedRecordID = function(record, storageKey) {
    var link = record[storageKey];
    if (link == null) {
      return link;
    }
    !(typeof link === "object" && typeof link[REF_KEY] === "string" && link[ACTOR_IDENTIFIER_KEY] != null) && invariant(false, "RelayModernRecord.getActorLinkedRecordID(): Expected `%s.%s` to be an actor specific linked ID, was `%s`.", record[ID_KEY], storageKey, JSON.stringify(link));
    return [link[ACTOR_IDENTIFIER_KEY], link[REF_KEY]];
  };
  var getResolverLinkedRecordID = function(record, typeName) {
    var id = getValue(record, RELAY_RESOLVER_VALUE_KEY);
    if (id == null || isSuspenseSentinel(id)) {
      return null;
    }
    if (typeof id === "object") {
      id = id.id;
    }
    !(typeof id === "string") && invariant(false, "RelayModernRecord.getResolverLinkedRecordID(): Expected value to be a linked ID, was `%s`.", JSON.stringify(id));
    return generateClientObjectClientID(typeName, id);
  };
  var getResolverLinkedRecordIDs = function(record, typeName) {
    var resolverValue = getValue(record, RELAY_RESOLVER_VALUE_KEY);
    if (resolverValue == null || isSuspenseSentinel(resolverValue)) {
      return null;
    }
    !Array.isArray(resolverValue) && invariant(false, "RelayModernRecord.getResolverLinkedRecordIDs(): Expected value to be an array of linked IDs, was `%s`.", JSON.stringify(resolverValue));
    return resolverValue.map(function(id) {
      if (id == null) {
        return null;
      }
      if (typeof id === "object") {
        id = id.id;
      }
      !(typeof id === "string") && invariant(false, "RelayModernRecord.getResolverLinkedRecordIDs(): Expected item within resolver linked field to be a DataID, was `%s`.", JSON.stringify(id));
      return generateClientObjectClientID(typeName, id);
    });
  };
  var toJSON = function(record) {
    return record;
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _defineProperty2 = _interopRequireDefault(require_defineProperty());
  var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
  var _toPropertyKey2 = _interopRequireDefault(require_toPropertyKey());
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var deepFreeze = require_deepFreeze();
  var _require = require_ClientID();
  var generateClientObjectClientID = _require.generateClientObjectClientID;
  var isClientID = _require.isClientID;
  var _require2 = require_LiveResolverSuspenseSentinel();
  var isSuspenseSentinel = _require2.isSuspenseSentinel;
  var _require3 = require_RelayStoreUtils();
  var ACTOR_IDENTIFIER_KEY = _require3.ACTOR_IDENTIFIER_KEY;
  var ERRORS_KEY = _require3.ERRORS_KEY;
  var ID_KEY = _require3.ID_KEY;
  var INVALIDATED_AT_KEY = _require3.INVALIDATED_AT_KEY;
  var REF_KEY = _require3.REF_KEY;
  var REFS_KEY = _require3.REFS_KEY;
  var RELAY_RESOLVER_VALUE_KEY = _require3.RELAY_RESOLVER_VALUE_KEY;
  var ROOT_ID = _require3.ROOT_ID;
  var TYPENAME_KEY = _require3.TYPENAME_KEY;
  var areEqual = require_areEqual();
  var invariant = require_browser();
  var warning = require_warning();
  module.exports = {
    clone,
    copyFields,
    create,
    freeze,
    fromObject,
    getDataID,
    getErrors,
    getFields,
    getInvalidationEpoch,
    getLinkedRecordID,
    getLinkedRecordIDs,
    getType,
    getValue,
    hasValue,
    merge,
    setErrors,
    setValue,
    setLinkedRecordID,
    setLinkedRecordIDs,
    update,
    getActorLinkedRecordID,
    setActorLinkedRecordID,
    getResolverLinkedRecordID,
    getResolverLinkedRecordIDs,
    toJSON
  };
});

// node_modules/relay-runtime/lib/store/RelayRecordState.js
var require_RelayRecordState = __commonJS((exports, module) => {
  var RelayRecordState = {
    EXISTENT: "EXISTENT",
    NONEXISTENT: "NONEXISTENT",
    UNKNOWN: "UNKNOWN"
  };
  module.exports = RelayRecordState;
});

// node_modules/relay-runtime/lib/store/RelayRecordSource.js
var require_RelayRecordSource = __commonJS((exports, module) => {
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var RelayModernRecord = require_RelayModernRecord();
  var RelayRecordState = require_RelayRecordState();
  var EXISTENT = RelayRecordState.EXISTENT;
  var NONEXISTENT = RelayRecordState.NONEXISTENT;
  var UNKNOWN = RelayRecordState.UNKNOWN;
  var RelayRecordSource = function() {
    function RelayRecordSource2(records) {
      var _this = this;
      this._records = new Map;
      if (records != null) {
        Object.keys(records).forEach(function(key) {
          var object = records[key];
          var record = RelayModernRecord.fromObject(object);
          _this._records.set(key, record);
        });
      }
    }
    RelayRecordSource2.create = function create(records) {
      return new RelayRecordSource2(records);
    };
    var _proto = RelayRecordSource2.prototype;
    _proto.clear = function clear() {
      this._records = new Map;
    };
    _proto["delete"] = function _delete(dataID) {
      this._records.set(dataID, null);
    };
    _proto.get = function get(dataID) {
      return this._records.get(dataID);
    };
    _proto.getRecordIDs = function getRecordIDs() {
      return Array.from(this._records.keys());
    };
    _proto.getStatus = function getStatus(dataID) {
      if (!this._records.has(dataID)) {
        return UNKNOWN;
      }
      return this._records.get(dataID) == null ? NONEXISTENT : EXISTENT;
    };
    _proto.has = function has(dataID) {
      return this._records.has(dataID);
    };
    _proto.remove = function remove(dataID) {
      this._records["delete"](dataID);
    };
    _proto.set = function set(dataID, record) {
      this._records.set(dataID, record);
    };
    _proto.size = function size() {
      return this._records.size;
    };
    _proto.toJSON = function toJSON() {
      var obj = {};
      var _iterator = (0, _createForOfIteratorHelper2["default"])(this._records), _step;
      try {
        for (_iterator.s();!(_step = _iterator.n()).done; ) {
          var _step$value = _step.value, key = _step$value[0], record = _step$value[1];
          obj[key] = RelayModernRecord.toJSON(record);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return obj;
    };
    return RelayRecordSource2;
  }();
  module.exports = RelayRecordSource;
});

// node_modules/relay-runtime/lib/multi-actor-environment/ActorIdentifier.js
var require_ActorIdentifier = __commonJS((exports, module) => {
  var assertInternalActorIdentifier = function(actorIdentifier) {
    !(actorIdentifier === INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE) && invariant(false, 'Expected to use only internal version of the `actorIdentifier`. "%s" was provided.', actorIdentifier);
  };
  var invariant = require_browser();
  var INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = "INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE";
  module.exports = {
    assertInternalActorIdentifier,
    getActorIdentifier: function getActorIdentifier(actorID) {
      return actorID;
    },
    getDefaultActorIdentifier: function getDefaultActorIdentifier() {
      throw new Error("Not Implemented");
    },
    INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE
  };
});

// node_modules/relay-runtime/lib/multi-actor-environment/ActorUtils.js
var require_ActorUtils = __commonJS((exports, module) => {
  var getActorIdentifierFromPayload = function(payload) {
    if (payload != null && typeof payload === "object" && typeof payload[ACTOR_IDENTIFIER_FIELD_NAME] === "string") {
      return getActorIdentifier(payload[ACTOR_IDENTIFIER_FIELD_NAME]);
    }
  };
  var ACTOR_IDENTIFIER_FIELD_NAME = "actor_key";
  var _require = require_ActorIdentifier();
  var getActorIdentifier = _require.getActorIdentifier;
  module.exports = {
    ACTOR_IDENTIFIER_FIELD_NAME,
    getActorIdentifierFromPayload
  };
});

// node_modules/relay-runtime/lib/store/RelayErrorTrie.js
var require_RelayErrorTrie = __commonJS((exports, module) => {
  var buildErrorTrie = function(errors) {
    if (errors == null) {
      return null;
    }
    if (!RelayFeatureFlags.ENABLE_FIELD_ERROR_HANDLING) {
      return null;
    }
    var trie = new Map;
    var _iterator = (0, _createForOfIteratorHelper2["default"])(errors), _step;
    try {
      ERRORS:
        for (_iterator.s();!(_step = _iterator.n()).done; ) {
          var _step$value = _step.value, path = _step$value.path, _ = _step$value.locations, error = (0, _objectWithoutPropertiesLoose2["default"])(_step$value, _excluded);
          if (path == null) {
            continue;
          }
          var length = path.length;
          if (length === 0) {
            continue;
          }
          var lastIndex = length - 1;
          var currentTrie = trie;
          for (var index = 0;index < lastIndex; index++) {
            var key = path[index];
            var existingValue = currentTrie.get(key);
            if (existingValue instanceof Map) {
              currentTrie = existingValue;
              continue;
            }
            var newValue = new Map;
            if (Array.isArray(existingValue)) {
              newValue.set(SELF, existingValue);
            }
            currentTrie.set(key, newValue);
            currentTrie = newValue;
          }
          var lastKey = path[lastIndex];
          var container = currentTrie.get(lastKey);
          if (container instanceof Map) {
            currentTrie = container;
            container = currentTrie.get(lastKey);
            lastKey = SELF;
          }
          if (Array.isArray(container)) {
            container.push(error);
          } else {
            currentTrie.set(lastKey, [error]);
          }
        }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return trie;
  };
  var getErrorsByKey = function(trie, key) {
    var value = trie.get(key);
    if (value == null) {
      return null;
    }
    if (Array.isArray(value)) {
      return value;
    }
    var errors = [];
    recursivelyCopyErrorsIntoArray(value, errors);
    return errors;
  };
  var recursivelyCopyErrorsIntoArray = function(trieOrSet, errors) {
    var _iterator2 = (0, _createForOfIteratorHelper2["default"])(trieOrSet), _step2;
    try {
      for (_iterator2.s();!(_step2 = _iterator2.n()).done; ) {
        var _step2$value = _step2.value, childKey = _step2$value[0], value = _step2$value[1];
        var oldLength = errors.length;
        if (Array.isArray(value)) {
          errors.push.apply(errors, (0, _toConsumableArray2["default"])(value));
        } else {
          recursivelyCopyErrorsIntoArray(value, errors);
        }
        if (childKey === SELF) {
          continue;
        }
        var newLength = errors.length;
        for (var index = oldLength;index < newLength; index++) {
          var error = errors[index];
          if (error.path == null) {
            errors[index] = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, error), {}, {
              path: [childKey]
            });
          } else {
            error.path.unshift(childKey);
          }
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  };
  var getNestedErrorTrieByKey = function(trie, key) {
    var value = trie.get(key);
    if (value instanceof Map) {
      return value;
    }
    return null;
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
  var _excluded = ["path", "locations"];
  var RelayFeatureFlags = require_RelayFeatureFlags();
  var SELF = Symbol("$SELF");
  module.exports = {
    SELF,
    buildErrorTrie,
    getNestedErrorTrieByKey,
    getErrorsByKey
  };
});

// node_modules/relay-runtime/lib/store/TypeID.js
var require_TypeID = __commonJS((exports, module) => {
  var generateTypeID = function(typeName) {
    return PREFIX + typeName;
  };
  var isTypeID = function(id) {
    return id.indexOf(PREFIX) === 0;
  };
  var PREFIX = "client:__type:";
  var TYPE_SCHEMA_TYPE = "__TypeSchema";
  module.exports = {
    generateTypeID,
    isTypeID,
    TYPE_SCHEMA_TYPE
  };
});

// node_modules/relay-runtime/lib/store/RelayResponseNormalizer.js
var require_RelayResponseNormalizer = __commonJS((exports, module) => {
  var normalize = function(recordSource, selector, response, options, errors) {
    var { dataID, node: node2, variables } = selector;
    var normalizer = new RelayResponseNormalizer(recordSource, variables, options);
    return normalizer.normalizeResponse(node2, dataID, response, errors);
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
  var _require = require_ActorUtils();
  var ACTOR_IDENTIFIER_FIELD_NAME = _require.ACTOR_IDENTIFIER_FIELD_NAME;
  var getActorIdentifierFromPayload = _require.getActorIdentifierFromPayload;
  var _require2 = require_RelayConcreteNode();
  var ACTOR_CHANGE = _require2.ACTOR_CHANGE;
  var CLIENT_COMPONENT = _require2.CLIENT_COMPONENT;
  var CLIENT_EDGE_TO_CLIENT_OBJECT = _require2.CLIENT_EDGE_TO_CLIENT_OBJECT;
  var CLIENT_EXTENSION = _require2.CLIENT_EXTENSION;
  var CONDITION = _require2.CONDITION;
  var DEFER = _require2.DEFER;
  var FRAGMENT_SPREAD = _require2.FRAGMENT_SPREAD;
  var INLINE_FRAGMENT = _require2.INLINE_FRAGMENT;
  var LINKED_FIELD = _require2.LINKED_FIELD;
  var LINKED_HANDLE = _require2.LINKED_HANDLE;
  var MODULE_IMPORT = _require2.MODULE_IMPORT;
  var RELAY_LIVE_RESOLVER = _require2.RELAY_LIVE_RESOLVER;
  var RELAY_RESOLVER = _require2.RELAY_RESOLVER;
  var SCALAR_FIELD = _require2.SCALAR_FIELD;
  var SCALAR_HANDLE = _require2.SCALAR_HANDLE;
  var STREAM = _require2.STREAM;
  var TYPE_DISCRIMINATOR = _require2.TYPE_DISCRIMINATOR;
  var _require3 = require_ClientID();
  var generateClientID = _require3.generateClientID;
  var isClientID = _require3.isClientID;
  var _require4 = require_RelayConcreteVariables();
  var getLocalVariables = _require4.getLocalVariables;
  var _require5 = require_RelayErrorTrie();
  var buildErrorTrie = _require5.buildErrorTrie;
  var getErrorsByKey = _require5.getErrorsByKey;
  var getNestedErrorTrieByKey = _require5.getNestedErrorTrieByKey;
  var RelayModernRecord = require_RelayModernRecord();
  var _require6 = require_RelayModernSelector();
  var createNormalizationSelector = _require6.createNormalizationSelector;
  var _require7 = require_RelayStoreUtils();
  var ROOT_ID = _require7.ROOT_ID;
  var TYPENAME_KEY = _require7.TYPENAME_KEY;
  var getArgumentValues = _require7.getArgumentValues;
  var getHandleStorageKey = _require7.getHandleStorageKey;
  var getModuleComponentKey = _require7.getModuleComponentKey;
  var getModuleOperationKey = _require7.getModuleOperationKey;
  var getStorageKey = _require7.getStorageKey;
  var _require8 = require_TypeID();
  var TYPE_SCHEMA_TYPE = _require8.TYPE_SCHEMA_TYPE;
  var generateTypeID = _require8.generateTypeID;
  var areEqual = require_areEqual();
  var invariant = require_browser();
  var warning = require_warning();
  var RelayResponseNormalizer = function() {
    function RelayResponseNormalizer2(recordSource, variables, options) {
      this._actorIdentifier = options.actorIdentifier;
      this._getDataId = options.getDataID;
      this._handleFieldPayloads = [];
      this._treatMissingFieldsAsNull = options.treatMissingFieldsAsNull;
      this._incrementalPlaceholders = [];
      this._isClientExtension = false;
      this._isUnmatchedAbstractType = false;
      this._followupPayloads = [];
      this._path = options.path ? (0, _toConsumableArray2["default"])(options.path) : [];
      this._recordSource = recordSource;
      this._variables = variables;
      this._shouldProcessClientComponents = options.shouldProcessClientComponents;
    }
    var _proto = RelayResponseNormalizer2.prototype;
    _proto.normalizeResponse = function normalizeResponse(node2, dataID, data, errors) {
      var record = this._recordSource.get(dataID);
      !record && invariant(false, "RelayResponseNormalizer(): Expected root record `%s` to exist.", dataID);
      this._assignClientAbstractTypes(node2);
      this._errorTrie = buildErrorTrie(errors);
      this._traverseSelections(node2, record, data);
      return {
        errors,
        fieldPayloads: this._handleFieldPayloads,
        incrementalPlaceholders: this._incrementalPlaceholders,
        followupPayloads: this._followupPayloads,
        source: this._recordSource,
        isFinal: false
      };
    };
    _proto._assignClientAbstractTypes = function _assignClientAbstractTypes(node2) {
      var clientAbstractTypes = node2.clientAbstractTypes;
      if (clientAbstractTypes != null) {
        for (var _i = 0, _Object$keys = Object.keys(clientAbstractTypes);_i < _Object$keys.length; _i++) {
          var abstractType = _Object$keys[_i];
          var _iterator = (0, _createForOfIteratorHelper2["default"])(clientAbstractTypes[abstractType]), _step;
          try {
            for (_iterator.s();!(_step = _iterator.n()).done; ) {
              var concreteType = _step.value;
              var typeID = generateTypeID(concreteType);
              var typeRecord = this._recordSource.get(typeID);
              if (typeRecord == null) {
                typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);
                this._recordSource.set(typeID, typeRecord);
              }
              RelayModernRecord.setValue(typeRecord, abstractType, true);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }
    };
    _proto._getVariableValue = function _getVariableValue(name) {
      !this._variables.hasOwnProperty(name) && invariant(false, "RelayResponseNormalizer(): Undefined variable `%s`.", name);
      return this._variables[name];
    };
    _proto._getRecordType = function _getRecordType(data) {
      var typeName = data[TYPENAME_KEY];
      !(typeName != null) && invariant(false, "RelayResponseNormalizer(): Expected a typename for record `%s`.", JSON.stringify(data, null, 2));
      return typeName;
    };
    _proto._traverseSelections = function _traverseSelections(node2, record, data) {
      for (var i = 0;i < node2.selections.length; i++) {
        var selection = node2.selections[i];
        switch (selection.kind) {
          case SCALAR_FIELD:
          case LINKED_FIELD:
            this._normalizeField(selection, record, data);
            break;
          case CONDITION:
            var conditionValue = Boolean(this._getVariableValue(selection.condition));
            if (conditionValue === selection.passingValue) {
              this._traverseSelections(selection, record, data);
            }
            break;
          case FRAGMENT_SPREAD: {
            var prevVariables = this._variables;
            this._variables = getLocalVariables(this._variables, selection.fragment.argumentDefinitions, selection.args);
            this._traverseSelections(selection.fragment, record, data);
            this._variables = prevVariables;
            break;
          }
          case INLINE_FRAGMENT: {
            var abstractKey = selection.abstractKey;
            if (abstractKey == null) {
              var typeName = RelayModernRecord.getType(record);
              if (typeName === selection.type) {
                this._traverseSelections(selection, record, data);
              }
            } else {
              var implementsInterface = data.hasOwnProperty(abstractKey);
              var _typeName = RelayModernRecord.getType(record);
              var typeID = generateTypeID(_typeName);
              var typeRecord = this._recordSource.get(typeID);
              if (typeRecord == null) {
                typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);
                this._recordSource.set(typeID, typeRecord);
              }
              RelayModernRecord.setValue(typeRecord, abstractKey, implementsInterface);
              if (implementsInterface) {
                this._traverseSelections(selection, record, data);
              }
            }
            break;
          }
          case TYPE_DISCRIMINATOR: {
            var _abstractKey = selection.abstractKey;
            var _implementsInterface = data.hasOwnProperty(_abstractKey);
            var _typeName2 = RelayModernRecord.getType(record);
            var _typeID = generateTypeID(_typeName2);
            var _typeRecord = this._recordSource.get(_typeID);
            if (_typeRecord == null) {
              _typeRecord = RelayModernRecord.create(_typeID, TYPE_SCHEMA_TYPE);
              this._recordSource.set(_typeID, _typeRecord);
            }
            RelayModernRecord.setValue(_typeRecord, _abstractKey, _implementsInterface);
            break;
          }
          case LINKED_HANDLE:
          case SCALAR_HANDLE:
            var args = selection.args ? getArgumentValues(selection.args, this._variables) : {};
            var fieldKey = getStorageKey(selection, this._variables);
            var handleKey = getHandleStorageKey(selection, this._variables);
            this._handleFieldPayloads.push({
              args,
              dataID: RelayModernRecord.getDataID(record),
              fieldKey,
              handle: selection.handle,
              handleKey,
              handleArgs: selection.handleArgs ? getArgumentValues(selection.handleArgs, this._variables) : {}
            });
            break;
          case MODULE_IMPORT:
            this._normalizeModuleImport(selection, record, data);
            break;
          case DEFER:
            this._normalizeDefer(selection, record, data);
            break;
          case STREAM:
            this._normalizeStream(selection, record, data);
            break;
          case CLIENT_EXTENSION:
            var isClientExtension = this._isClientExtension;
            this._isClientExtension = true;
            this._traverseSelections(selection, record, data);
            this._isClientExtension = isClientExtension;
            break;
          case CLIENT_COMPONENT:
            if (this._shouldProcessClientComponents === false) {
              break;
            }
            this._traverseSelections(selection.fragment, record, data);
            break;
          case ACTOR_CHANGE:
            this._normalizeActorChange(selection, record, data);
            break;
          case RELAY_RESOLVER:
            this._normalizeResolver(selection, record, data);
            break;
          case RELAY_LIVE_RESOLVER:
            this._normalizeResolver(selection, record, data);
            break;
          case CLIENT_EDGE_TO_CLIENT_OBJECT:
            this._normalizeResolver(selection.backingField, record, data);
            break;
          default:
            invariant(false, "RelayResponseNormalizer(): Unexpected ast kind `%s`.", selection.kind);
        }
      }
    };
    _proto._normalizeResolver = function _normalizeResolver(resolver, record, data) {
      if (resolver.fragment != null) {
        this._traverseSelections(resolver.fragment, record, data);
      }
    };
    _proto._normalizeDefer = function _normalizeDefer(defer, record, data) {
      var isDeferred = defer["if"] === null || this._getVariableValue(defer["if"]);
      if (true) {
        warning(typeof isDeferred === "boolean", "RelayResponseNormalizer: Expected value for @defer `if` argument to be a boolean, got `%s`.", isDeferred);
      }
      if (isDeferred === false) {
        this._traverseSelections(defer, record, data);
      } else {
        this._incrementalPlaceholders.push({
          kind: "defer",
          data,
          label: defer.label,
          path: (0, _toConsumableArray2["default"])(this._path),
          selector: createNormalizationSelector(defer, RelayModernRecord.getDataID(record), this._variables),
          typeName: RelayModernRecord.getType(record),
          actorIdentifier: this._actorIdentifier
        });
      }
    };
    _proto._normalizeStream = function _normalizeStream(stream, record, data) {
      this._traverseSelections(stream, record, data);
      var isStreamed = stream["if"] === null || this._getVariableValue(stream["if"]);
      if (true) {
        warning(typeof isStreamed === "boolean", "RelayResponseNormalizer: Expected value for @stream `if` argument to be a boolean, got `%s`.", isStreamed);
      }
      if (isStreamed === true) {
        this._incrementalPlaceholders.push({
          kind: "stream",
          label: stream.label,
          path: (0, _toConsumableArray2["default"])(this._path),
          parentID: RelayModernRecord.getDataID(record),
          node: stream,
          variables: this._variables,
          actorIdentifier: this._actorIdentifier
        });
      }
    };
    _proto._normalizeModuleImport = function _normalizeModuleImport(moduleImport, record, data) {
      !(typeof data === "object" && data) && invariant(false, "RelayResponseNormalizer: Expected data for @module to be an object.");
      var typeName = RelayModernRecord.getType(record);
      var componentKey = getModuleComponentKey(moduleImport.documentName);
      var componentReference = moduleImport.componentModuleProvider || data[componentKey];
      RelayModernRecord.setValue(record, componentKey, componentReference !== null && componentReference !== undefined ? componentReference : null);
      var operationKey = getModuleOperationKey(moduleImport.documentName);
      var operationReference = moduleImport.operationModuleProvider || data[operationKey];
      RelayModernRecord.setValue(record, operationKey, operationReference !== null && operationReference !== undefined ? operationReference : null);
      if (operationReference != null) {
        this._followupPayloads.push({
          kind: "ModuleImportPayload",
          args: moduleImport.args,
          data,
          dataID: RelayModernRecord.getDataID(record),
          operationReference,
          path: (0, _toConsumableArray2["default"])(this._path),
          typeName,
          variables: this._variables,
          actorIdentifier: this._actorIdentifier
        });
      }
    };
    _proto._normalizeField = function _normalizeField(selection, record, data) {
      !(typeof data === "object" && data) && invariant(false, "writeField(): Expected data for field `%s` to be an object.", selection.name);
      var responseKey = selection.alias || selection.name;
      var storageKey = getStorageKey(selection, this._variables);
      var fieldValue = data[responseKey];
      if (fieldValue == null) {
        if (fieldValue === undefined) {
          var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;
          if (isOptionalField) {
            return;
          } else if (!this._treatMissingFieldsAsNull) {
            if (true) {
              warning(false, "RelayResponseNormalizer: Payload did not contain a value for field `%s: %s`. Check that you are parsing with the same query that was used to fetch the payload.", responseKey, storageKey);
            }
            return;
          }
        }
        if (true) {
          if (selection.kind === SCALAR_FIELD) {
            this._validateConflictingFieldsWithIdenticalId(record, storageKey, null);
          }
        }
        RelayModernRecord.setValue(record, storageKey, null);
        var errorTrie = this._errorTrie;
        if (errorTrie != null) {
          var errors = getErrorsByKey(errorTrie, responseKey);
          if (errors != null) {
            RelayModernRecord.setErrors(record, storageKey, errors);
          }
        }
        return;
      }
      if (selection.kind === SCALAR_FIELD) {
        if (true) {
          this._validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue);
        }
        RelayModernRecord.setValue(record, storageKey, fieldValue);
      } else if (selection.kind === LINKED_FIELD) {
        this._path.push(responseKey);
        var oldErrorTrie = this._errorTrie;
        this._errorTrie = oldErrorTrie == null ? null : getNestedErrorTrieByKey(oldErrorTrie, responseKey);
        if (selection.plural) {
          this._normalizePluralLink(selection, record, storageKey, fieldValue);
        } else {
          this._normalizeLink(selection, record, storageKey, fieldValue);
        }
        this._errorTrie = oldErrorTrie;
        this._path.pop();
      } else {
        invariant(false, "RelayResponseNormalizer(): Unexpected ast kind `%s` during normalization.", selection.kind);
      }
    };
    _proto._normalizeActorChange = function _normalizeActorChange(selection, record, data) {
      var _field$concreteType;
      var field = selection.linkedField;
      !(typeof data === "object" && data) && invariant(false, "_normalizeActorChange(): Expected data for field `%s` to be an object.", field.name);
      var responseKey = field.alias || field.name;
      var storageKey = getStorageKey(field, this._variables);
      var fieldValue = data[responseKey];
      if (fieldValue == null) {
        if (fieldValue === undefined) {
          var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;
          if (isOptionalField) {
            return;
          } else if (!this._treatMissingFieldsAsNull) {
            if (true) {
              warning(false, "RelayResponseNormalizer: Payload did not contain a value for field `%s: %s`. Check that you are parsing with the same query that was used to fetch the payload.", responseKey, storageKey);
            }
            return;
          }
        }
        RelayModernRecord.setValue(record, storageKey, null);
        return;
      }
      var actorIdentifier = getActorIdentifierFromPayload(fieldValue);
      if (actorIdentifier == null) {
        if (true) {
          warning(false, "RelayResponseNormalizer: Payload did not contain a value for field `%s`. Check that you are parsing with the same query that was used to fetch the payload. Payload is `%s`.", ACTOR_IDENTIFIER_FIELD_NAME, JSON.stringify(fieldValue, null, 2));
        }
        RelayModernRecord.setValue(record, storageKey, null);
        return;
      }
      var typeName = (_field$concreteType = field.concreteType) !== null && _field$concreteType !== undefined ? _field$concreteType : this._getRecordType(fieldValue);
      var nextID = this._getDataId(fieldValue, typeName) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);
      !(typeof nextID === "string") && invariant(false, "RelayResponseNormalizer: Expected id on field `%s` to be a string.", storageKey);
      RelayModernRecord.setActorLinkedRecordID(record, storageKey, actorIdentifier, nextID);
      this._followupPayloads.push({
        kind: "ActorPayload",
        data: fieldValue,
        dataID: nextID,
        path: [].concat((0, _toConsumableArray2["default"])(this._path), [responseKey]),
        typeName,
        variables: this._variables,
        node: field,
        actorIdentifier
      });
    };
    _proto._normalizeLink = function _normalizeLink(field, record, storageKey, fieldValue) {
      var _field$concreteType2;
      !(typeof fieldValue === "object" && fieldValue) && invariant(false, "RelayResponseNormalizer: Expected data for field `%s` to be an object.", storageKey);
      var nextID = this._getDataId(fieldValue, (_field$concreteType2 = field.concreteType) !== null && _field$concreteType2 !== undefined ? _field$concreteType2 : this._getRecordType(fieldValue)) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);
      !(typeof nextID === "string") && invariant(false, "RelayResponseNormalizer: Expected id on field `%s` to be a string.", storageKey);
      if (true) {
        this._validateConflictingLinkedFieldsWithIdenticalId(RelayModernRecord.getLinkedRecordID(record, storageKey), nextID, storageKey);
      }
      RelayModernRecord.setLinkedRecordID(record, storageKey, nextID);
      var nextRecord = this._recordSource.get(nextID);
      if (!nextRecord) {
        var typeName = field.concreteType || this._getRecordType(fieldValue);
        nextRecord = RelayModernRecord.create(nextID, typeName);
        this._recordSource.set(nextID, nextRecord);
      } else if (true) {
        this._validateRecordType(nextRecord, field, fieldValue);
      }
      this._traverseSelections(field, nextRecord, fieldValue);
    };
    _proto._normalizePluralLink = function _normalizePluralLink(field, record, storageKey, fieldValue) {
      var _this = this;
      !Array.isArray(fieldValue) && invariant(false, "RelayResponseNormalizer: Expected data for field `%s` to be an array of objects.", storageKey);
      var prevIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
      var nextIDs = [];
      fieldValue.forEach(function(item, nextIndex) {
        var _field$concreteType3;
        if (item == null) {
          nextIDs.push(item);
          return;
        }
        _this._path.push(String(nextIndex));
        var oldErrorTrie = _this._errorTrie;
        _this._errorTrie = oldErrorTrie == null ? null : getNestedErrorTrieByKey(oldErrorTrie, nextIndex);
        !(typeof item === "object") && invariant(false, "RelayResponseNormalizer: Expected elements for field `%s` to be objects.", storageKey);
        var nextID = _this._getDataId(item, (_field$concreteType3 = field.concreteType) !== null && _field$concreteType3 !== undefined ? _field$concreteType3 : _this._getRecordType(item)) || prevIDs && prevIDs[nextIndex] || generateClientID(RelayModernRecord.getDataID(record), storageKey, nextIndex);
        !(typeof nextID === "string") && invariant(false, "RelayResponseNormalizer: Expected id of elements of field `%s` to be strings.", storageKey);
        nextIDs.push(nextID);
        var nextRecord = _this._recordSource.get(nextID);
        if (!nextRecord) {
          var typeName = field.concreteType || _this._getRecordType(item);
          nextRecord = RelayModernRecord.create(nextID, typeName);
          _this._recordSource.set(nextID, nextRecord);
        } else if (true) {
          _this._validateRecordType(nextRecord, field, item);
        }
        if (true) {
          if (prevIDs) {
            _this._validateConflictingLinkedFieldsWithIdenticalId(prevIDs[nextIndex], nextID, storageKey);
          }
        }
        _this._traverseSelections(field, nextRecord, item);
        _this._errorTrie = oldErrorTrie;
        _this._path.pop();
      });
      RelayModernRecord.setLinkedRecordIDs(record, storageKey, nextIDs);
    };
    _proto._validateRecordType = function _validateRecordType(record, field, payload) {
      var _field$concreteType4;
      var typeName = (_field$concreteType4 = field.concreteType) !== null && _field$concreteType4 !== undefined ? _field$concreteType4 : this._getRecordType(payload);
      var dataID = RelayModernRecord.getDataID(record);
      warning(isClientID(dataID) && dataID !== ROOT_ID || RelayModernRecord.getType(record) === typeName, "RelayResponseNormalizer: Invalid record `%s`. Expected %s to be consistent, but the record was assigned conflicting types `%s` and `%s`. The GraphQL server likely violated the globally unique id requirement by returning the same id for different objects.", dataID, TYPENAME_KEY, RelayModernRecord.getType(record), typeName);
    };
    _proto._validateConflictingFieldsWithIdenticalId = function _validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue) {
      if (true) {
        var dataID = RelayModernRecord.getDataID(record);
        var previousValue = RelayModernRecord.getValue(record, storageKey);
        warning(storageKey === TYPENAME_KEY || previousValue === undefined || areEqual(previousValue, fieldValue), "RelayResponseNormalizer: Invalid record. The record contains two instances of the same id: `%s` with conflicting field, %s and its values: %s and %s. If two fields are different but share the same id, one field will overwrite the other.", dataID, storageKey, previousValue, fieldValue);
      }
    };
    _proto._validateConflictingLinkedFieldsWithIdenticalId = function _validateConflictingLinkedFieldsWithIdenticalId(prevID, nextID, storageKey) {
      if (true) {
        warning(prevID === undefined || prevID === nextID, "RelayResponseNormalizer: Invalid record. The record contains references to the conflicting field, %s and its id values: %s and %s. We need to make sure that the record the field points to remains consistent or one field will overwrite the other.", storageKey, prevID, nextID);
      }
    };
    return RelayResponseNormalizer2;
  }();
  module.exports = {
    normalize
  };
});

// node_modules/relay-runtime/lib/store/normalizeResponse.js
var require_normalizeResponse = __commonJS((exports, module) => {
  var normalizeResponse = function(response, selector, typeName, options) {
    var _response$extensions;
    var { data, errors } = response;
    var source = _RelayRecordSource["default"].create();
    var record = _RelayModernRecord["default"].create(selector.dataID, typeName);
    source.set(selector.dataID, record);
    var relayPayload = _RelayResponseNormalizer["default"].normalize(source, selector, data, options, errors);
    return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, relayPayload), {}, {
      isFinal: ((_response$extensions = response.extensions) === null || _response$extensions === undefined ? undefined : _response$extensions.is_final) === true
    });
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var _RelayModernRecord = _interopRequireDefault(require_RelayModernRecord());
  var _RelayRecordSource = _interopRequireDefault(require_RelayRecordSource());
  var _RelayResponseNormalizer = _interopRequireDefault(require_RelayResponseNormalizer());
  module.exports = normalizeResponse;
});

// node_modules/relay-runtime/lib/store/readInlineData.js
var require_readInlineData = __commonJS((exports, module) => {
  var readInlineData = function(fragment, fragmentRef) {
    var _fragmentRef$FRAGMENT;
    var inlineDataFragment = getInlineDataFragment(fragment);
    if (fragmentRef == null) {
      return fragmentRef;
    }
    !(typeof fragmentRef === "object") && invariant(false, "readInlineData(): Expected an object, got `%s`.", typeof fragmentRef);
    var inlineData = (_fragmentRef$FRAGMENT = fragmentRef[FRAGMENTS_KEY]) === null || _fragmentRef$FRAGMENT === undefined ? undefined : _fragmentRef$FRAGMENT[inlineDataFragment.name];
    !(inlineData != null) && invariant(false, "readInlineData(): Expected fragment `%s` to be spread in the parent fragment.", inlineDataFragment.name);
    return inlineData;
  };
  var _require = require_GraphQLTag();
  var getInlineDataFragment = _require.getInlineDataFragment;
  var _require2 = require_RelayStoreUtils();
  var FRAGMENTS_KEY = _require2.FRAGMENTS_KEY;
  var invariant = require_browser();
  module.exports = readInlineData;
});

// node_modules/relay-runtime/lib/util/generateID.js
var require_generateID = __commonJS((exports, module) => {
  var generateID = function() {
    return id++;
  };
  var id = 1e5;
  module.exports = generateID;
});

// node_modules/relay-runtime/lib/network/wrapNetworkWithLogObserver.js
var require_wrapNetworkWithLogObserver = __commonJS((exports, module) => {
  var wrapNetworkWithLogObserver = function(env, network) {
    return {
      execute: function execute(params, variables, cacheConfig, uploadables) {
        var networkRequestId = generateID();
        var logObserver = {
          start: function start(subscription) {
            env.__log({
              name: "network.start",
              networkRequestId,
              params,
              variables,
              cacheConfig
            });
          },
          next: function next(response) {
            env.__log({
              name: "network.next",
              networkRequestId,
              response
            });
          },
          error: function error(_error) {
            env.__log({
              name: "network.error",
              networkRequestId,
              error: _error
            });
          },
          complete: function complete() {
            env.__log({
              name: "network.complete",
              networkRequestId
            });
          },
          unsubscribe: function unsubscribe() {
            env.__log({
              name: "network.unsubscribe",
              networkRequestId
            });
          }
        };
        var logRequestInfo = function logRequestInfo(info) {
          env.__log({
            name: "network.info",
            networkRequestId,
            info
          });
        };
        return network.execute(params, variables, cacheConfig, uploadables, logRequestInfo)["do"](logObserver);
      }
    };
  };
  var generateID = require_generateID();
  module.exports = wrapNetworkWithLogObserver;
});

// node_modules/relay-runtime/lib/store/RelayOperationTracker.js
var require_RelayOperationTracker = __commonJS((exports, module) => {
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var invariant = require_browser();
  var RelayOperationTracker = function() {
    function RelayOperationTracker2() {
      this._ownersToPendingOperations = new Map;
      this._pendingOperationsToOwners = new Map;
      this._ownersToPendingPromise = new Map;
    }
    var _proto = RelayOperationTracker2.prototype;
    _proto.update = function update(pendingOperation, affectedOwners) {
      if (affectedOwners.size === 0) {
        return;
      }
      var pendingOperationIdentifier = pendingOperation.identifier;
      var newlyAffectedOwnersIdentifier = new Set;
      var _iterator = (0, _createForOfIteratorHelper2["default"])(affectedOwners), _step;
      try {
        for (_iterator.s();!(_step = _iterator.n()).done; ) {
          var owner = _step.value;
          var ownerIdentifier = owner.identifier;
          var pendingOperationsAffectingOwner = this._ownersToPendingOperations.get(ownerIdentifier);
          if (pendingOperationsAffectingOwner != null) {
            if (!pendingOperationsAffectingOwner.has(pendingOperationIdentifier)) {
              pendingOperationsAffectingOwner.set(pendingOperationIdentifier, pendingOperation);
              newlyAffectedOwnersIdentifier.add(ownerIdentifier);
            }
          } else {
            this._ownersToPendingOperations.set(ownerIdentifier, new Map([[pendingOperationIdentifier, pendingOperation]]));
            newlyAffectedOwnersIdentifier.add(ownerIdentifier);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (newlyAffectedOwnersIdentifier.size === 0) {
        return;
      }
      var ownersAffectedByPendingOperation = this._pendingOperationsToOwners.get(pendingOperationIdentifier) || new Set;
      var _iterator2 = (0, _createForOfIteratorHelper2["default"])(newlyAffectedOwnersIdentifier), _step2;
      try {
        for (_iterator2.s();!(_step2 = _iterator2.n()).done; ) {
          var _ownerIdentifier = _step2.value;
          this._resolveOwnerResolvers(_ownerIdentifier);
          ownersAffectedByPendingOperation.add(_ownerIdentifier);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      this._pendingOperationsToOwners.set(pendingOperationIdentifier, ownersAffectedByPendingOperation);
    };
    _proto.complete = function complete(pendingOperation) {
      var pendingOperationIdentifier = pendingOperation.identifier;
      var affectedOwnersIdentifier = this._pendingOperationsToOwners.get(pendingOperationIdentifier);
      if (affectedOwnersIdentifier == null) {
        return;
      }
      var completedOwnersIdentifier = new Set;
      var updatedOwnersIdentifier = new Set;
      var _iterator3 = (0, _createForOfIteratorHelper2["default"])(affectedOwnersIdentifier), _step3;
      try {
        for (_iterator3.s();!(_step3 = _iterator3.n()).done; ) {
          var ownerIdentifier = _step3.value;
          var pendingOperationsAffectingOwner = this._ownersToPendingOperations.get(ownerIdentifier);
          if (!pendingOperationsAffectingOwner) {
            continue;
          }
          pendingOperationsAffectingOwner["delete"](pendingOperationIdentifier);
          if (pendingOperationsAffectingOwner.size > 0) {
            updatedOwnersIdentifier.add(ownerIdentifier);
          } else {
            completedOwnersIdentifier.add(ownerIdentifier);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      var _iterator4 = (0, _createForOfIteratorHelper2["default"])(completedOwnersIdentifier), _step4;
      try {
        for (_iterator4.s();!(_step4 = _iterator4.n()).done; ) {
          var _ownerIdentifier2 = _step4.value;
          this._resolveOwnerResolvers(_ownerIdentifier2);
          this._ownersToPendingOperations["delete"](_ownerIdentifier2);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      var _iterator5 = (0, _createForOfIteratorHelper2["default"])(updatedOwnersIdentifier), _step5;
      try {
        for (_iterator5.s();!(_step5 = _iterator5.n()).done; ) {
          var _ownerIdentifier3 = _step5.value;
          this._resolveOwnerResolvers(_ownerIdentifier3);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      this._pendingOperationsToOwners["delete"](pendingOperationIdentifier);
    };
    _proto._resolveOwnerResolvers = function _resolveOwnerResolvers(ownerIdentifier) {
      var promiseEntry = this._ownersToPendingPromise.get(ownerIdentifier);
      if (promiseEntry != null) {
        promiseEntry.resolve();
      }
      this._ownersToPendingPromise["delete"](ownerIdentifier);
    };
    _proto.getPendingOperationsAffectingOwner = function getPendingOperationsAffectingOwner(owner) {
      var ownerIdentifier = owner.identifier;
      var pendingOperationsForOwner = this._ownersToPendingOperations.get(ownerIdentifier);
      if (pendingOperationsForOwner == null || pendingOperationsForOwner.size === 0) {
        return null;
      }
      var cachedPromiseEntry = this._ownersToPendingPromise.get(ownerIdentifier);
      if (cachedPromiseEntry != null) {
        return {
          promise: cachedPromiseEntry.promise,
          pendingOperations: cachedPromiseEntry.pendingOperations
        };
      }
      var resolve;
      var promise = new Promise(function(r) {
        resolve = r;
      });
      !(resolve != null) && invariant(false, "RelayOperationTracker: Expected resolver to be defined. If youare seeing this, it is likely a bug in Relay.");
      var pendingOperations = Array.from(pendingOperationsForOwner.values());
      this._ownersToPendingPromise.set(ownerIdentifier, {
        promise,
        resolve,
        pendingOperations
      });
      return {
        promise,
        pendingOperations
      };
    };
    return RelayOperationTracker2;
  }();
  module.exports = RelayOperationTracker;
});

// node_modules/relay-runtime/lib/util/registerEnvironmentWithDevTools.js
var require_registerEnvironmentWithDevTools = __commonJS((exports, module) => {
  var registerEnvironmentWithDevTools = function(environment) {
    var _global = typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : undefined;
    var devToolsHook = _global && _global.__RELAY_DEVTOOLS_HOOK__;
    if (devToolsHook) {
      devToolsHook.registerEnvironment(environment);
    }
  };
  module.exports = registerEnvironmentWithDevTools;
});

// node_modules/relay-runtime/lib/store/ViewerPattern.js
var require_ViewerPattern = __commonJS((exports, module) => {
  var _require = require_ClientID();
  var generateClientID = _require.generateClientID;
  var _require2 = require_RelayStoreUtils();
  var ROOT_ID = _require2.ROOT_ID;
  var VIEWER_ID = generateClientID(ROOT_ID, "viewer");
  var VIEWER_TYPE = "Viewer";
  module.exports = {
    VIEWER_ID,
    VIEWER_TYPE
  };
});

// node_modules/relay-runtime/lib/store/defaultGetDataID.js
var require_defaultGetDataID = __commonJS((exports, module) => {
  var defaultGetDataID = function(fieldValue, typeName) {
    if (typeName === VIEWER_TYPE) {
      return fieldValue.id == null ? VIEWER_ID : fieldValue.id;
    }
    return fieldValue.id;
  };
  var _require = require_ViewerPattern();
  var VIEWER_ID = _require.VIEWER_ID;
  var VIEWER_TYPE = _require.VIEWER_TYPE;
  module.exports = defaultGetDataID;
});

// node_modules/relay-runtime/lib/store/defaultRequiredFieldLogger.js
var require_defaultRequiredFieldLogger = __commonJS((exports, module) => {
  var defaultRequiredFieldLogger = function defaultRequiredFieldLogger(event) {
    if (event.kind === "missing_field.log") {
      throw new Error("Relay Environment Configuration Error (dev only): `@required(action: LOG)` requires that the Relay Environment be configured with a `requiredFieldLogger`.");
    }
  };
  module.exports = defaultRequiredFieldLogger;
});

// node_modules/relay-runtime/lib/util/getOperation.js
var require_getOperation = __commonJS((exports, module) => {
  var getOperation = function(node2) {
    switch (node2.kind) {
      case REQUEST:
        return node2.operation;
      case SPLIT_OPERATION:
      default:
        return node2;
    }
  };
  var _require = require_RelayConcreteNode();
  var REQUEST = _require.REQUEST;
  var SPLIT_OPERATION = _require.SPLIT_OPERATION;
  module.exports = getOperation;
});

// node_modules/relay-runtime/lib/util/RelayError.js
var require_RelayError = __commonJS((exports, module) => {
  var createError = function(type, name, messageFormat) {
    for (var _len = arguments.length, messageParams = new Array(_len > 3 ? _len - 3 : 0), _key = 3;_key < _len; _key++) {
      messageParams[_key - 3] = arguments[_key];
    }
    var index = 0;
    var message = messageFormat.replace(/%s/g, function() {
      return String(messageParams[index++]);
    });
    var err = new Error(message);
    var error = Object.assign(err, {
      name,
      messageFormat,
      messageParams,
      type,
      taalOpcodes: [2, 2]
    });
    if (error.stack === undefined) {
      try {
        throw error;
      } catch (_unused) {
      }
    }
    return error;
  };
  module.exports = {
    create: function create(name, messageFormat) {
      for (var _len2 = arguments.length, messageParams = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2;_key2 < _len2; _key2++) {
        messageParams[_key2 - 2] = arguments[_key2];
      }
      return createError.apply(undefined, ["error", name, messageFormat].concat(messageParams));
    },
    createWarning: function createWarning(name, messageFormat) {
      for (var _len3 = arguments.length, messageParams = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2;_key3 < _len3; _key3++) {
        messageParams[_key3 - 2] = arguments[_key3];
      }
      return createError.apply(undefined, ["warn", name, messageFormat].concat(messageParams));
    }
  };
});

// node_modules/relay-runtime/lib/util/withDuration.js
var require_withDuration = __commonJS((exports, module) => {
  var currentTimestamp = function() {
    if (isPerformanceNowAvailable) {
      return window.performance.now();
    }
    return Date.now();
  };
  var withDuration = function(cb) {
    var startTime = currentTimestamp();
    var result = cb();
    return [currentTimestamp() - startTime, result];
  };
  var _window;
  var _window$performance;
  var isPerformanceNowAvailable = typeof window !== "undefined" && typeof ((_window = window) === null || _window === undefined ? undefined : (_window$performance = _window.performance) === null || _window$performance === undefined ? undefined : _window$performance.now) === "function";
  module.exports = withDuration;
});

// node_modules/relay-runtime/lib/store/OperationExecutor.js
var require_OperationExecutor = __commonJS((exports, module) => {
  var execute = function(config) {
    return new Executor(config);
  };
  var partitionGraphQLResponses = function(responses) {
    var nonIncrementalResponses = [];
    var incrementalResponses = [];
    responses.forEach(function(response) {
      if (response.path != null || response.label != null) {
        var { label, path } = response;
        if (label == null || path == null) {
          invariant(false, "OperationExecutor: invalid incremental payload, expected `path` and `label` to either both be null/undefined, or `path` to be an `Array<string | number>` and `label` to be a `string`.");
        }
        incrementalResponses.push({
          label,
          path,
          response
        });
      } else {
        nonIncrementalResponses.push(response);
      }
    });
    return [nonIncrementalResponses, incrementalResponses];
  };
  var stableStringify = function(value) {
    var _JSON$stringify;
    return (_JSON$stringify = JSON.stringify(stableCopy(value))) !== null && _JSON$stringify !== undefined ? _JSON$stringify : "";
  };
  var validateOptimisticResponsePayload = function(payload) {
    var incrementalPlaceholders = payload.incrementalPlaceholders;
    if (incrementalPlaceholders != null && incrementalPlaceholders.length !== 0) {
      invariant(false, "OperationExecutor: optimistic responses cannot be returned for operations that use incremental data delivery (@defer, @stream, and @stream_connection).");
    }
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
  var RelayObservable = require_RelayObservable();
  var generateID = require_generateID();
  var getOperation = require_getOperation();
  var RelayError = require_RelayError();
  var RelayFeatureFlags = require_RelayFeatureFlags();
  var stableCopy = require_stableCopy();
  var withDuration = require_withDuration();
  var _require = require_ClientID();
  var generateClientID = _require.generateClientID;
  var generateUniqueClientID = _require.generateUniqueClientID;
  var _require2 = require_RelayConcreteVariables();
  var getLocalVariables = _require2.getLocalVariables;
  var RelayModernRecord = require_RelayModernRecord();
  var _require3 = require_RelayModernSelector();
  var createNormalizationSelector = _require3.createNormalizationSelector;
  var createReaderSelector = _require3.createReaderSelector;
  var RelayRecordSource = require_RelayRecordSource();
  var _require4 = require_RelayStoreUtils();
  var ROOT_TYPE = _require4.ROOT_TYPE;
  var TYPENAME_KEY = _require4.TYPENAME_KEY;
  var getStorageKey = _require4.getStorageKey;
  var invariant = require_browser();
  var warning = require_warning();
  var Executor = function() {
    function Executor2(_ref2) {
      var _this = this;
      var { actorIdentifier, getDataID, getPublishQueue, getStore, isClientPayload, operation, operationExecutions, operationLoader, operationTracker, optimisticConfig, scheduler, shouldProcessClientComponents, sink, source, treatMissingFieldsAsNull, updater, log, normalizeResponse } = _ref2;
      this._actorIdentifier = actorIdentifier;
      this._getDataID = getDataID;
      this._treatMissingFieldsAsNull = treatMissingFieldsAsNull;
      this._incrementalPayloadsPending = false;
      this._incrementalResults = new Map;
      this._log = log;
      this._executeId = generateID();
      this._nextSubscriptionId = 0;
      this._operation = operation;
      this._operationExecutions = operationExecutions;
      this._operationLoader = operationLoader;
      this._operationTracker = operationTracker;
      this._operationUpdateEpochs = new Map;
      this._optimisticUpdates = null;
      this._pendingModulePayloadsCount = 0;
      this._getPublishQueue = getPublishQueue;
      this._scheduler = scheduler;
      this._sink = sink;
      this._source = new Map;
      this._state = "started";
      this._getStore = getStore;
      this._subscriptions = new Map;
      this._updater = updater;
      this._isClientPayload = isClientPayload === true;
      this._isSubscriptionOperation = this._operation.request.node.params.operationKind === "subscription";
      this._shouldProcessClientComponents = shouldProcessClientComponents;
      this._retainDisposables = new Map;
      this._seenActors = new Set;
      this._completeFns = [];
      this._normalizeResponse = normalizeResponse;
      var id = this._nextSubscriptionId++;
      source.subscribe({
        complete: function complete() {
          return _this._complete(id);
        },
        error: function error(_error2) {
          return _this._error(_error2);
        },
        next: function next(response) {
          try {
            _this._next(id, response);
          } catch (error) {
            sink.error(error);
          }
        },
        start: function start(subscription) {
          var _this$_operation$requ;
          _this._start(id, subscription);
          _this._log({
            name: "execute.start",
            executeId: _this._executeId,
            params: _this._operation.request.node.params,
            variables: _this._operation.request.variables,
            cacheConfig: (_this$_operation$requ = _this._operation.request.cacheConfig) !== null && _this$_operation$requ !== undefined ? _this$_operation$requ : {}
          });
        }
      });
      if (optimisticConfig != null) {
        this._processOptimisticResponse(optimisticConfig.response != null ? {
          data: optimisticConfig.response
        } : null, optimisticConfig.updater, false);
      }
    }
    var _proto = Executor2.prototype;
    _proto.cancel = function cancel() {
      var _this2 = this;
      if (this._state === "completed") {
        return;
      }
      this._state = "completed";
      this._operationExecutions["delete"](this._operation.request.identifier);
      if (this._subscriptions.size !== 0) {
        this._subscriptions.forEach(function(sub) {
          return sub.unsubscribe();
        });
        this._subscriptions.clear();
      }
      var optimisticUpdates = this._optimisticUpdates;
      if (optimisticUpdates !== null) {
        this._optimisticUpdates = null;
        optimisticUpdates.forEach(function(update) {
          return _this2._getPublishQueueAndSaveActor().revertUpdate(update);
        });
        this._runPublishQueue();
      }
      this._incrementalResults.clear();
      if (this._asyncStoreUpdateDisposable != null) {
        this._asyncStoreUpdateDisposable.dispose();
        this._asyncStoreUpdateDisposable = null;
      }
      this._completeFns = [];
      this._completeOperationTracker();
      this._disposeRetainedData();
    };
    _proto._updateActiveState = function _updateActiveState() {
      var activeState;
      switch (this._state) {
        case "started": {
          activeState = "active";
          break;
        }
        case "loading_incremental": {
          activeState = "active";
          break;
        }
        case "completed": {
          activeState = "inactive";
          break;
        }
        case "loading_final": {
          activeState = this._pendingModulePayloadsCount > 0 ? "active" : "inactive";
          break;
        }
        default:
          this._state;
          invariant(false, "OperationExecutor: invalid executor state.");
      }
      this._operationExecutions.set(this._operation.request.identifier, activeState);
    };
    _proto._schedule = function _schedule(task) {
      var _this3 = this;
      var scheduler = this._scheduler;
      if (scheduler != null) {
        var id = this._nextSubscriptionId++;
        RelayObservable.create(function(sink) {
          var cancellationToken = scheduler.schedule(function() {
            try {
              task();
              sink.complete();
            } catch (error) {
              sink.error(error);
            }
          });
          return function() {
            return scheduler.cancel(cancellationToken);
          };
        }).subscribe({
          complete: function complete() {
            return _this3._complete(id);
          },
          error: function error(_error3) {
            return _this3._error(_error3);
          },
          start: function start(subscription) {
            return _this3._start(id, subscription);
          }
        });
      } else {
        task();
      }
    };
    _proto._complete = function _complete(id) {
      this._subscriptions["delete"](id);
      if (this._subscriptions.size === 0) {
        this.cancel();
        this._sink.complete();
        this._log({
          name: "execute.complete",
          executeId: this._executeId
        });
      }
    };
    _proto._error = function _error(error) {
      this.cancel();
      this._sink.error(error);
      this._log({
        name: "execute.error",
        executeId: this._executeId,
        error
      });
    };
    _proto._start = function _start(id, subscription) {
      this._subscriptions.set(id, subscription);
      this._updateActiveState();
    };
    _proto._next = function _next(_id, response) {
      var _this4 = this;
      this._schedule(function() {
        var _withDuration = withDuration(function() {
          _this4._handleNext(response);
          _this4._maybeCompleteSubscriptionOperationTracking();
        }), duration = _withDuration[0];
        _this4._log({
          name: "execute.next",
          executeId: _this4._executeId,
          response,
          duration
        });
      });
    };
    _proto._handleErrorResponse = function _handleErrorResponse(responses) {
      var _this5 = this;
      var results = [];
      responses.forEach(function(response) {
        if (response.data === null && response.extensions != null && !response.hasOwnProperty("errors")) {
          return;
        } else if (response.data == null) {
          var errors = response.hasOwnProperty("errors") && response.errors != null ? response.errors : null;
          var messages = errors ? errors.map(function(_ref3) {
            var message = _ref3.message;
            return message;
          }).join("\n") : "(No errors)";
          var error = RelayError.create("RelayNetwork", "No data returned for operation `" + _this5._operation.request.node.params.name + "`, got error(s):\n" + messages + "\n\nSee the error `source` property for more information.");
          error.source = {
            errors,
            operation: _this5._operation.request.node,
            variables: _this5._operation.request.variables
          };
          error.stack;
          throw error;
        } else {
          var responseWithData = response;
          results.push(responseWithData);
        }
      });
      return results;
    };
    _proto._handleOptimisticResponses = function _handleOptimisticResponses(responses) {
      var _response$extensions;
      if (responses.length > 1) {
        if (responses.some(function(responsePart) {
          var _responsePart$extensi;
          return ((_responsePart$extensi = responsePart.extensions) === null || _responsePart$extensi === undefined ? undefined : _responsePart$extensi.isOptimistic) === true;
        })) {
          invariant(false, "OperationExecutor: Optimistic responses cannot be batched.");
        }
        return false;
      }
      var response = responses[0];
      var isOptimistic = ((_response$extensions = response.extensions) === null || _response$extensions === undefined ? undefined : _response$extensions.isOptimistic) === true;
      if (isOptimistic && this._state !== "started") {
        invariant(false, "OperationExecutor: optimistic payload received after server payload.");
      }
      if (isOptimistic) {
        this._processOptimisticResponse(response, null, this._treatMissingFieldsAsNull);
        this._sink.next(response);
        return true;
      }
      return false;
    };
    _proto._handleNext = function _handleNext(response) {
      if (this._state === "completed") {
        return;
      }
      this._seenActors.clear();
      var responses = Array.isArray(response) ? response : [response];
      var responsesWithData = this._handleErrorResponse(responses);
      if (responsesWithData.length === 0) {
        var isFinal = responses.some(function(x) {
          var _x$extensions;
          return ((_x$extensions = x.extensions) === null || _x$extensions === undefined ? undefined : _x$extensions.is_final) === true;
        });
        if (isFinal) {
          this._state = "loading_final";
          this._updateActiveState();
          this._incrementalPayloadsPending = false;
        }
        this._sink.next(response);
        return;
      }
      var isOptimistic = this._handleOptimisticResponses(responsesWithData);
      if (isOptimistic) {
        return;
      }
      var _partitionGraphQLResp = partitionGraphQLResponses(responsesWithData), nonIncrementalResponses = _partitionGraphQLResp[0], incrementalResponses = _partitionGraphQLResp[1];
      var hasNonIncrementalResponses = nonIncrementalResponses.length > 0;
      if (hasNonIncrementalResponses) {
        if (this._isSubscriptionOperation) {
          var nextID = generateUniqueClientID();
          this._operation = {
            request: this._operation.request,
            fragment: createReaderSelector(this._operation.fragment.node, nextID, this._operation.fragment.variables, this._operation.fragment.owner),
            root: createNormalizationSelector(this._operation.root.node, nextID, this._operation.root.variables)
          };
        }
        var payloadFollowups = this._processResponses(nonIncrementalResponses);
        this._processPayloadFollowups(payloadFollowups);
      }
      if (incrementalResponses.length > 0) {
        var _payloadFollowups = this._processIncrementalResponses(incrementalResponses);
        this._processPayloadFollowups(_payloadFollowups);
      }
      if (this._isSubscriptionOperation) {
        if (responsesWithData[0].extensions == null) {
          responsesWithData[0].extensions = {
            __relay_subscription_root_id: this._operation.fragment.dataID
          };
        } else {
          responsesWithData[0].extensions.__relay_subscription_root_id = this._operation.fragment.dataID;
        }
      }
      var updatedOwners = this._runPublishQueue(hasNonIncrementalResponses ? this._operation : undefined);
      if (hasNonIncrementalResponses) {
        if (this._incrementalPayloadsPending) {
          this._retainData();
        }
      }
      this._updateOperationTracker(updatedOwners);
      this._sink.next(response);
    };
    _proto._processOptimisticResponse = function _processOptimisticResponse(response, updater, treatMissingFieldsAsNull) {
      var _this6 = this;
      !(this._optimisticUpdates === null) && invariant(false, "OperationExecutor: environment.execute: only support one optimistic response per execute.");
      if (response == null && updater == null) {
        return;
      }
      var optimisticUpdates = [];
      if (response) {
        var payload = this._normalizeResponse(response, this._operation.root, ROOT_TYPE, {
          actorIdentifier: this._actorIdentifier,
          getDataID: this._getDataID,
          path: [],
          shouldProcessClientComponents: this._shouldProcessClientComponents,
          treatMissingFieldsAsNull
        });
        validateOptimisticResponsePayload(payload);
        optimisticUpdates.push({
          operation: this._operation,
          payload,
          updater
        });
        this._processOptimisticFollowups(payload, optimisticUpdates);
      } else if (updater) {
        optimisticUpdates.push({
          operation: this._operation,
          payload: {
            errors: null,
            fieldPayloads: null,
            incrementalPlaceholders: null,
            followupPayloads: null,
            source: RelayRecordSource.create(),
            isFinal: false
          },
          updater
        });
      }
      this._optimisticUpdates = optimisticUpdates;
      optimisticUpdates.forEach(function(update) {
        return _this6._getPublishQueueAndSaveActor().applyUpdate(update);
      });
      var updatedOwners = this._runPublishQueue();
      if (RelayFeatureFlags.ENABLE_OPERATION_TRACKER_OPTIMISTIC_UPDATES) {
        this._updateOperationTracker(updatedOwners);
      }
    };
    _proto._processOptimisticFollowups = function _processOptimisticFollowups(payload, optimisticUpdates) {
      if (payload.followupPayloads && payload.followupPayloads.length) {
        var followupPayloads = payload.followupPayloads;
        var _iterator = (0, _createForOfIteratorHelper2["default"])(followupPayloads), _step;
        try {
          for (_iterator.s();!(_step = _iterator.n()).done; ) {
            var followupPayload = _step.value;
            switch (followupPayload.kind) {
              case "ModuleImportPayload":
                var operationLoader = this._expectOperationLoader();
                var operation = operationLoader.get(followupPayload.operationReference);
                if (operation == null) {
                  this._processAsyncOptimisticModuleImport(followupPayload);
                } else {
                  var moduleImportOptimisticUpdates = this._processOptimisticModuleImport(operation, followupPayload);
                  optimisticUpdates.push.apply(optimisticUpdates, (0, _toConsumableArray2["default"])(moduleImportOptimisticUpdates));
                }
                break;
              case "ActorPayload":
                warning(false, "OperationExecutor: Unexpected optimistic ActorPayload. These updates are not supported.");
                break;
              default:
                invariant(false, "OperationExecutor: Unexpected followup kind `%s`. when processing optimistic updates.", followupPayload.kind);
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    };
    _proto._normalizeFollowupPayload = function _normalizeFollowupPayload(followupPayload, normalizationNode) {
      var variables;
      if (normalizationNode.kind === "SplitOperation" && followupPayload.kind === "ModuleImportPayload") {
        variables = getLocalVariables(followupPayload.variables, normalizationNode.argumentDefinitions, followupPayload.args);
      } else {
        variables = followupPayload.variables;
      }
      var selector = createNormalizationSelector(normalizationNode, followupPayload.dataID, variables);
      return this._normalizeResponse({
        data: followupPayload.data
      }, selector, followupPayload.typeName, {
        actorIdentifier: this._actorIdentifier,
        getDataID: this._getDataID,
        path: followupPayload.path,
        treatMissingFieldsAsNull: this._treatMissingFieldsAsNull,
        shouldProcessClientComponents: this._shouldProcessClientComponents
      });
    };
    _proto._processOptimisticModuleImport = function _processOptimisticModuleImport(normalizationRootNode, moduleImportPayload) {
      var operation = getOperation(normalizationRootNode);
      var optimisticUpdates = [];
      var modulePayload = this._normalizeFollowupPayload(moduleImportPayload, operation);
      validateOptimisticResponsePayload(modulePayload);
      optimisticUpdates.push({
        operation: this._operation,
        payload: modulePayload,
        updater: null
      });
      this._processOptimisticFollowups(modulePayload, optimisticUpdates);
      return optimisticUpdates;
    };
    _proto._processAsyncOptimisticModuleImport = function _processAsyncOptimisticModuleImport(moduleImportPayload) {
      var _this7 = this;
      this._expectOperationLoader().load(moduleImportPayload.operationReference).then(function(operation) {
        if (operation == null || _this7._state !== "started") {
          return;
        }
        var moduleImportOptimisticUpdates = _this7._processOptimisticModuleImport(operation, moduleImportPayload);
        moduleImportOptimisticUpdates.forEach(function(update) {
          return _this7._getPublishQueueAndSaveActor().applyUpdate(update);
        });
        if (_this7._optimisticUpdates == null) {
          warning(false, "OperationExecutor: Unexpected ModuleImport optimistic update in operation %s." + _this7._operation.request.node.params.name);
        } else {
          var _this$_optimisticUpda;
          (_this$_optimisticUpda = _this7._optimisticUpdates).push.apply(_this$_optimisticUpda, (0, _toConsumableArray2["default"])(moduleImportOptimisticUpdates));
          _this7._runPublishQueue();
        }
      });
    };
    _proto._processResponses = function _processResponses(responses) {
      var _this8 = this;
      if (this._optimisticUpdates !== null) {
        this._optimisticUpdates.forEach(function(update) {
          _this8._getPublishQueueAndSaveActor().revertUpdate(update);
        });
        this._optimisticUpdates = null;
      }
      this._incrementalPayloadsPending = false;
      this._incrementalResults.clear();
      this._source.clear();
      return responses.map(function(payloadPart) {
        var relayPayload = _this8._normalizeResponse(payloadPart, _this8._operation.root, ROOT_TYPE, {
          actorIdentifier: _this8._actorIdentifier,
          getDataID: _this8._getDataID,
          path: [],
          treatMissingFieldsAsNull: _this8._treatMissingFieldsAsNull,
          shouldProcessClientComponents: _this8._shouldProcessClientComponents
        });
        _this8._getPublishQueueAndSaveActor().commitPayload(_this8._operation, relayPayload, _this8._updater);
        return relayPayload;
      });
    };
    _proto._processPayloadFollowups = function _processPayloadFollowups(payloads) {
      var _this9 = this;
      if (this._state === "completed") {
        return;
      }
      payloads.forEach(function(payload) {
        var { incrementalPlaceholders, followupPayloads, isFinal } = payload;
        _this9._state = isFinal ? "loading_final" : "loading_incremental";
        _this9._updateActiveState();
        if (isFinal) {
          _this9._incrementalPayloadsPending = false;
        }
        if (followupPayloads && followupPayloads.length !== 0) {
          followupPayloads.forEach(function(followupPayload) {
            var _followupPayload$acto;
            var prevActorIdentifier = _this9._actorIdentifier;
            _this9._actorIdentifier = (_followupPayload$acto = followupPayload.actorIdentifier) !== null && _followupPayload$acto !== undefined ? _followupPayload$acto : _this9._actorIdentifier;
            _this9._processFollowupPayload(followupPayload);
            _this9._actorIdentifier = prevActorIdentifier;
          });
        }
        if (incrementalPlaceholders && incrementalPlaceholders.length !== 0) {
          _this9._incrementalPayloadsPending = _this9._state !== "loading_final";
          incrementalPlaceholders.forEach(function(incrementalPlaceholder) {
            var _incrementalPlacehold;
            var prevActorIdentifier = _this9._actorIdentifier;
            _this9._actorIdentifier = (_incrementalPlacehold = incrementalPlaceholder.actorIdentifier) !== null && _incrementalPlacehold !== undefined ? _incrementalPlacehold : _this9._actorIdentifier;
            _this9._processIncrementalPlaceholder(payload, incrementalPlaceholder);
            _this9._actorIdentifier = prevActorIdentifier;
          });
          if (_this9._isClientPayload || _this9._state === "loading_final") {
            warning(_this9._isClientPayload, "RelayModernEnvironment: Operation `%s` contains @defer/@stream directives but was executed in non-streaming mode. See https://fburl.com/relay-incremental-delivery-non-streaming-warning.", _this9._operation.request.node.params.name);
            var relayPayloads = [];
            incrementalPlaceholders.forEach(function(placeholder) {
              if (placeholder.kind === "defer") {
                relayPayloads.push(_this9._processDeferResponse(placeholder.label, placeholder.path, placeholder, {
                  data: placeholder.data
                }));
              }
            });
            if (relayPayloads.length > 0) {
              _this9._processPayloadFollowups(relayPayloads);
            }
          }
        }
      });
    };
    _proto._maybeCompleteSubscriptionOperationTracking = function _maybeCompleteSubscriptionOperationTracking() {
      if (!this._isSubscriptionOperation) {
        return;
      }
      if (this._pendingModulePayloadsCount === 0 && this._incrementalPayloadsPending === false) {
        this._completeOperationTracker();
      }
    };
    _proto._processFollowupPayload = function _processFollowupPayload(followupPayload) {
      var _this10 = this;
      switch (followupPayload.kind) {
        case "ModuleImportPayload":
          var operationLoader = this._expectOperationLoader();
          var node2 = operationLoader.get(followupPayload.operationReference);
          if (node2 != null) {
            this._processFollowupPayloadWithNormalizationNode(followupPayload, getOperation(node2));
          } else {
            var id = this._nextSubscriptionId++;
            this._pendingModulePayloadsCount++;
            var decrementPendingCount = function decrementPendingCount() {
              _this10._pendingModulePayloadsCount--;
              _this10._maybeCompleteSubscriptionOperationTracking();
            };
            var networkObservable = RelayObservable.from(new Promise(function(resolve, reject) {
              operationLoader.load(followupPayload.operationReference).then(resolve, reject);
            }));
            RelayObservable.create(function(sink) {
              var cancellationToken;
              var subscription = networkObservable.subscribe({
                next: function next(loadedNode) {
                  if (loadedNode != null) {
                    var publishModuleImportPayload = function publishModuleImportPayload() {
                      try {
                        var operation = getOperation(loadedNode);
                        var batchAsyncModuleUpdatesFN = RelayFeatureFlags.BATCH_ASYNC_MODULE_UPDATES_FN;
                        var shouldScheduleAsyncStoreUpdate = batchAsyncModuleUpdatesFN != null && _this10._pendingModulePayloadsCount > 1;
                        var _withDuration2 = withDuration(function() {
                          _this10._handleFollowupPayload(followupPayload, operation);
                          if (shouldScheduleAsyncStoreUpdate) {
                            _this10._scheduleAsyncStoreUpdate(batchAsyncModuleUpdatesFN, sink.complete);
                          } else {
                            var updatedOwners = _this10._runPublishQueue();
                            _this10._updateOperationTracker(updatedOwners);
                          }
                        }), duration = _withDuration2[0];
                        _this10._log({
                          name: "execute.async.module",
                          executeId: _this10._executeId,
                          operationName: operation.name,
                          duration
                        });
                        if (!shouldScheduleAsyncStoreUpdate) {
                          sink.complete();
                        }
                      } catch (error) {
                        sink.error(error);
                      }
                    };
                    var scheduler = _this10._scheduler;
                    if (scheduler == null) {
                      publishModuleImportPayload();
                    } else {
                      cancellationToken = scheduler.schedule(publishModuleImportPayload);
                    }
                  } else {
                    sink.complete();
                  }
                },
                error: sink.error
              });
              return function() {
                subscription.unsubscribe();
                if (_this10._scheduler != null && cancellationToken != null) {
                  _this10._scheduler.cancel(cancellationToken);
                }
              };
            }).subscribe({
              complete: function complete() {
                _this10._complete(id);
                decrementPendingCount();
              },
              error: function error(_error4) {
                _this10._error(_error4);
                decrementPendingCount();
              },
              start: function start(subscription) {
                return _this10._start(id, subscription);
              }
            });
          }
          break;
        case "ActorPayload":
          this._processFollowupPayloadWithNormalizationNode(followupPayload, followupPayload.node);
          break;
        default:
          invariant(false, "OperationExecutor: Unexpected followup kind `%s`.", followupPayload.kind);
      }
    };
    _proto._processFollowupPayloadWithNormalizationNode = function _processFollowupPayloadWithNormalizationNode(followupPayload, normalizationNode) {
      this._handleFollowupPayload(followupPayload, normalizationNode);
      this._maybeCompleteSubscriptionOperationTracking();
    };
    _proto._handleFollowupPayload = function _handleFollowupPayload(followupPayload, normalizationNode) {
      var relayPayload = this._normalizeFollowupPayload(followupPayload, normalizationNode);
      this._getPublishQueueAndSaveActor().commitPayload(this._operation, relayPayload);
      this._processPayloadFollowups([relayPayload]);
    };
    _proto._processIncrementalPlaceholder = function _processIncrementalPlaceholder(relayPayload, placeholder) {
      var _relayPayload$fieldPa;
      var { label, path } = placeholder;
      var pathKey = path.map(String).join(".");
      var resultForLabel = this._incrementalResults.get(label);
      if (resultForLabel == null) {
        resultForLabel = new Map;
        this._incrementalResults.set(label, resultForLabel);
      }
      var resultForPath = resultForLabel.get(pathKey);
      var pendingResponses = resultForPath != null && resultForPath.kind === "response" ? resultForPath.responses : null;
      resultForLabel.set(pathKey, {
        kind: "placeholder",
        placeholder
      });
      var parentID;
      if (placeholder.kind === "stream") {
        parentID = placeholder.parentID;
      } else if (placeholder.kind === "defer") {
        parentID = placeholder.selector.dataID;
      } else {
        invariant(false, "OperationExecutor: Unsupported incremental placeholder kind `%s`.", placeholder.kind);
      }
      var parentRecord = relayPayload.source.get(parentID);
      var parentPayloads = ((_relayPayload$fieldPa = relayPayload.fieldPayloads) !== null && _relayPayload$fieldPa !== undefined ? _relayPayload$fieldPa : []).filter(function(fieldPayload) {
        var fieldID = generateClientID(fieldPayload.dataID, fieldPayload.fieldKey);
        return fieldPayload.dataID === parentID || fieldID === parentID;
      });
      !(parentRecord != null) && invariant(false, "OperationExecutor: Expected record `%s` to exist.", parentID);
      var nextParentRecord;
      var nextParentPayloads;
      var previousParentEntry = this._source.get(parentID);
      if (previousParentEntry != null) {
        nextParentRecord = RelayModernRecord.update(previousParentEntry.record, parentRecord);
        var handlePayloads = new Map;
        var dedupePayload = function dedupePayload(payload) {
          var key = stableStringify(payload);
          handlePayloads.set(key, payload);
        };
        previousParentEntry.fieldPayloads.forEach(dedupePayload);
        parentPayloads.forEach(dedupePayload);
        nextParentPayloads = Array.from(handlePayloads.values());
      } else {
        nextParentRecord = parentRecord;
        nextParentPayloads = parentPayloads;
      }
      this._source.set(parentID, {
        record: nextParentRecord,
        fieldPayloads: nextParentPayloads
      });
      if (pendingResponses != null) {
        var payloadFollowups = this._processIncrementalResponses(pendingResponses);
        this._processPayloadFollowups(payloadFollowups);
      }
    };
    _proto._processIncrementalResponses = function _processIncrementalResponses(incrementalResponses) {
      var _this11 = this;
      var relayPayloads = [];
      incrementalResponses.forEach(function(incrementalResponse) {
        var { label, path, response } = incrementalResponse;
        var resultForLabel = _this11._incrementalResults.get(label);
        if (resultForLabel == null) {
          resultForLabel = new Map;
          _this11._incrementalResults.set(label, resultForLabel);
        }
        if (label.indexOf("$defer$") !== -1) {
          var pathKey = path.map(String).join(".");
          var resultForPath = resultForLabel.get(pathKey);
          if (resultForPath == null) {
            resultForPath = {
              kind: "response",
              responses: [incrementalResponse]
            };
            resultForLabel.set(pathKey, resultForPath);
            return;
          } else if (resultForPath.kind === "response") {
            resultForPath.responses.push(incrementalResponse);
            return;
          }
          var placeholder = resultForPath.placeholder;
          !(placeholder.kind === "defer") && invariant(false, "OperationExecutor: Expected data for path `%s` for label `%s` to be data for @defer, was `@%s`.", pathKey, label, placeholder.kind);
          relayPayloads.push(_this11._processDeferResponse(label, path, placeholder, response));
        } else {
          var _pathKey = path.slice(0, -2).map(String).join(".");
          var _resultForPath = resultForLabel.get(_pathKey);
          if (_resultForPath == null) {
            _resultForPath = {
              kind: "response",
              responses: [incrementalResponse]
            };
            resultForLabel.set(_pathKey, _resultForPath);
            return;
          } else if (_resultForPath.kind === "response") {
            _resultForPath.responses.push(incrementalResponse);
            return;
          }
          var _placeholder = _resultForPath.placeholder;
          !(_placeholder.kind === "stream") && invariant(false, "OperationExecutor: Expected data for path `%s` for label `%s` to be data for @stream, was `@%s`.", _pathKey, label, _placeholder.kind);
          relayPayloads.push(_this11._processStreamResponse(label, path, _placeholder, response));
        }
      });
      return relayPayloads;
    };
    _proto._processDeferResponse = function _processDeferResponse(label, path, placeholder, response) {
      var _placeholder$actorIde;
      var parentID = placeholder.selector.dataID;
      var prevActorIdentifier = this._actorIdentifier;
      this._actorIdentifier = (_placeholder$actorIde = placeholder.actorIdentifier) !== null && _placeholder$actorIde !== undefined ? _placeholder$actorIde : this._actorIdentifier;
      var relayPayload = this._normalizeResponse(response, placeholder.selector, placeholder.typeName, {
        actorIdentifier: this._actorIdentifier,
        getDataID: this._getDataID,
        path: placeholder.path,
        treatMissingFieldsAsNull: this._treatMissingFieldsAsNull,
        shouldProcessClientComponents: this._shouldProcessClientComponents
      });
      this._getPublishQueueAndSaveActor().commitPayload(this._operation, relayPayload);
      var parentEntry = this._source.get(parentID);
      !(parentEntry != null) && invariant(false, "OperationExecutor: Expected the parent record `%s` for @defer data to exist.", parentID);
      var fieldPayloads = parentEntry.fieldPayloads;
      if (fieldPayloads.length !== 0) {
        var _response$extensions2;
        var handleFieldsRelayPayload = {
          errors: null,
          fieldPayloads,
          incrementalPlaceholders: null,
          followupPayloads: null,
          source: RelayRecordSource.create(),
          isFinal: ((_response$extensions2 = response.extensions) === null || _response$extensions2 === undefined ? undefined : _response$extensions2.is_final) === true
        };
        this._getPublishQueueAndSaveActor().commitPayload(this._operation, handleFieldsRelayPayload);
      }
      this._actorIdentifier = prevActorIdentifier;
      return relayPayload;
    };
    _proto._processStreamResponse = function _processStreamResponse(label, path, placeholder, response) {
      var { parentID, node: node2, variables, actorIdentifier } = placeholder;
      var prevActorIdentifier = this._actorIdentifier;
      this._actorIdentifier = actorIdentifier !== null && actorIdentifier !== undefined ? actorIdentifier : this._actorIdentifier;
      var field = node2.selections[0];
      !(field != null && field.kind === "LinkedField" && field.plural === true) && invariant(false, "OperationExecutor: Expected @stream to be used on a plural field.");
      var _this$_normalizeStrea = this._normalizeStreamItem(response, parentID, field, variables, path, placeholder.path), fieldPayloads = _this$_normalizeStrea.fieldPayloads, itemID = _this$_normalizeStrea.itemID, itemIndex = _this$_normalizeStrea.itemIndex, prevIDs = _this$_normalizeStrea.prevIDs, relayPayload = _this$_normalizeStrea.relayPayload, storageKey = _this$_normalizeStrea.storageKey;
      this._getPublishQueueAndSaveActor().commitPayload(this._operation, relayPayload, function(store) {
        var currentParentRecord = store.get(parentID);
        if (currentParentRecord == null) {
          return;
        }
        var currentItems = currentParentRecord.getLinkedRecords(storageKey);
        if (currentItems == null) {
          return;
        }
        if (currentItems.length !== prevIDs.length || currentItems.some(function(currentItem, index) {
          return prevIDs[index] !== (currentItem && currentItem.getDataID());
        })) {
          return;
        }
        var nextItems = (0, _toConsumableArray2["default"])(currentItems);
        nextItems[itemIndex] = store.get(itemID);
        currentParentRecord.setLinkedRecords(nextItems, storageKey);
      });
      if (fieldPayloads.length !== 0) {
        var handleFieldsRelayPayload = {
          errors: null,
          fieldPayloads,
          incrementalPlaceholders: null,
          followupPayloads: null,
          source: RelayRecordSource.create(),
          isFinal: false
        };
        this._getPublishQueueAndSaveActor().commitPayload(this._operation, handleFieldsRelayPayload);
      }
      this._actorIdentifier = prevActorIdentifier;
      return relayPayload;
    };
    _proto._normalizeStreamItem = function _normalizeStreamItem(response, parentID, field, variables, path, normalizationPath) {
      var _field$alias, _field$concreteType, _ref, _this$_getDataID;
      var data = response.data;
      !(typeof data === "object") && invariant(false, "OperationExecutor: Expected the GraphQL @stream payload `data` value to be an object.");
      var responseKey = (_field$alias = field.alias) !== null && _field$alias !== undefined ? _field$alias : field.name;
      var storageKey = getStorageKey(field, variables);
      var parentEntry = this._source.get(parentID);
      !(parentEntry != null) && invariant(false, "OperationExecutor: Expected the parent record `%s` for @stream data to exist.", parentID);
      var { record: parentRecord, fieldPayloads } = parentEntry;
      var prevIDs = RelayModernRecord.getLinkedRecordIDs(parentRecord, storageKey);
      !(prevIDs != null) && invariant(false, "OperationExecutor: Expected record `%s` to have fetched field `%s` with @stream.", parentID, field.name);
      var finalPathEntry = path[path.length - 1];
      var itemIndex = parseInt(finalPathEntry, 10);
      !(itemIndex === finalPathEntry && itemIndex >= 0) && invariant(false, "OperationExecutor: Expected path for @stream to end in a positive integer index, got `%s`", finalPathEntry);
      var typeName = (_field$concreteType = field.concreteType) !== null && _field$concreteType !== undefined ? _field$concreteType : data[TYPENAME_KEY];
      !(typeof typeName === "string") && invariant(false, "OperationExecutor: Expected @stream field `%s` to have a __typename.", field.name);
      var itemID = (_ref = (_this$_getDataID = this._getDataID(data, typeName)) !== null && _this$_getDataID !== undefined ? _this$_getDataID : prevIDs === null || prevIDs === undefined ? undefined : prevIDs[itemIndex]) !== null && _ref !== undefined ? _ref : generateClientID(parentID, storageKey, itemIndex);
      !(typeof itemID === "string") && invariant(false, "OperationExecutor: Expected id of elements of field `%s` to be strings.", storageKey);
      var selector = createNormalizationSelector(field, itemID, variables);
      var nextParentRecord = RelayModernRecord.clone(parentRecord);
      var nextIDs = (0, _toConsumableArray2["default"])(prevIDs);
      nextIDs[itemIndex] = itemID;
      RelayModernRecord.setLinkedRecordIDs(nextParentRecord, storageKey, nextIDs);
      this._source.set(parentID, {
        record: nextParentRecord,
        fieldPayloads
      });
      var relayPayload = this._normalizeResponse(response, selector, typeName, {
        actorIdentifier: this._actorIdentifier,
        getDataID: this._getDataID,
        path: [].concat((0, _toConsumableArray2["default"])(normalizationPath), [responseKey, String(itemIndex)]),
        treatMissingFieldsAsNull: this._treatMissingFieldsAsNull,
        shouldProcessClientComponents: this._shouldProcessClientComponents
      });
      return {
        fieldPayloads,
        itemID,
        itemIndex,
        prevIDs,
        relayPayload,
        storageKey
      };
    };
    _proto._scheduleAsyncStoreUpdate = function _scheduleAsyncStoreUpdate(scheduleFn, completeFn) {
      var _this12 = this;
      this._completeFns.push(completeFn);
      if (this._asyncStoreUpdateDisposable != null) {
        return;
      }
      this._asyncStoreUpdateDisposable = scheduleFn(function() {
        _this12._asyncStoreUpdateDisposable = null;
        var updatedOwners = _this12._runPublishQueue();
        _this12._updateOperationTracker(updatedOwners);
        var _iterator2 = (0, _createForOfIteratorHelper2["default"])(_this12._completeFns), _step2;
        try {
          for (_iterator2.s();!(_step2 = _iterator2.n()).done; ) {
            var complete = _step2.value;
            complete();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        _this12._completeFns = [];
      });
    };
    _proto._updateOperationTracker = function _updateOperationTracker(updatedOwners) {
      if (updatedOwners != null && updatedOwners.length > 0) {
        this._operationTracker.update(this._operation.request, new Set(updatedOwners));
      }
    };
    _proto._completeOperationTracker = function _completeOperationTracker() {
      this._operationTracker.complete(this._operation.request);
    };
    _proto._getPublishQueueAndSaveActor = function _getPublishQueueAndSaveActor() {
      this._seenActors.add(this._actorIdentifier);
      return this._getPublishQueue(this._actorIdentifier);
    };
    _proto._getActorsToVisit = function _getActorsToVisit() {
      if (this._seenActors.size === 0) {
        return new Set([this._actorIdentifier]);
      } else {
        return this._seenActors;
      }
    };
    _proto._runPublishQueue = function _runPublishQueue(operation) {
      var updatedOwners = new Set;
      var _iterator3 = (0, _createForOfIteratorHelper2["default"])(this._getActorsToVisit()), _step3;
      try {
        for (_iterator3.s();!(_step3 = _iterator3.n()).done; ) {
          var actorIdentifier = _step3.value;
          var owners = this._getPublishQueue(actorIdentifier).run(operation);
          owners.forEach(function(owner) {
            return updatedOwners.add(owner);
          });
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return Array.from(updatedOwners);
    };
    _proto._retainData = function _retainData() {
      var _iterator4 = (0, _createForOfIteratorHelper2["default"])(this._getActorsToVisit()), _step4;
      try {
        for (_iterator4.s();!(_step4 = _iterator4.n()).done; ) {
          var actorIdentifier = _step4.value;
          if (!this._retainDisposables.has(actorIdentifier)) {
            this._retainDisposables.set(actorIdentifier, this._getStore(actorIdentifier).retain(this._operation));
          }
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    };
    _proto._disposeRetainedData = function _disposeRetainedData() {
      var _iterator5 = (0, _createForOfIteratorHelper2["default"])(this._retainDisposables.values()), _step5;
      try {
        for (_iterator5.s();!(_step5 = _iterator5.n()).done; ) {
          var disposable = _step5.value;
          disposable.dispose();
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      this._retainDisposables.clear();
    };
    _proto._expectOperationLoader = function _expectOperationLoader() {
      var operationLoader = this._operationLoader;
      !operationLoader && invariant(false, "OperationExecutor: Expected an operationLoader to be configured when using `@match`.");
      return operationLoader;
    };
    return Executor2;
  }();
  module.exports = {
    execute
  };
});

// node_modules/relay-runtime/lib/mutations/RelayRecordSourceMutator.js
var require_RelayRecordSourceMutator = __commonJS((exports, module) => {
  var RelayModernRecord = require_RelayModernRecord();
  var _require = require_RelayRecordState();
  var EXISTENT = _require.EXISTENT;
  var invariant = require_browser();
  var RelayRecordSourceMutator = function() {
    function RelayRecordSourceMutator2(base, sink) {
      this.__sources = [sink, base];
      this._base = base;
      this._sink = sink;
    }
    var _proto = RelayRecordSourceMutator2.prototype;
    _proto.unstable_getRawRecordWithChanges = function unstable_getRawRecordWithChanges(dataID) {
      var baseRecord = this._base.get(dataID);
      var sinkRecord = this._sink.get(dataID);
      if (sinkRecord === undefined) {
        if (baseRecord == null) {
          return baseRecord;
        }
        var nextRecord = RelayModernRecord.clone(baseRecord);
        if (true) {
          RelayModernRecord.freeze(nextRecord);
        }
        return nextRecord;
      } else if (sinkRecord === null) {
        return null;
      } else if (baseRecord != null) {
        var _nextRecord = RelayModernRecord.update(baseRecord, sinkRecord);
        if (true) {
          if (_nextRecord !== baseRecord) {
            RelayModernRecord.freeze(_nextRecord);
          }
        }
        return _nextRecord;
      } else {
        var _nextRecord2 = RelayModernRecord.clone(sinkRecord);
        if (true) {
          RelayModernRecord.freeze(_nextRecord2);
        }
        return _nextRecord2;
      }
    };
    _proto._getSinkRecord = function _getSinkRecord(dataID) {
      var sinkRecord = this._sink.get(dataID);
      if (!sinkRecord) {
        var baseRecord = this._base.get(dataID);
        !baseRecord && invariant(false, "RelayRecordSourceMutator: Cannot modify non-existent record `%s`.", dataID);
        sinkRecord = RelayModernRecord.create(dataID, RelayModernRecord.getType(baseRecord));
        this._sink.set(dataID, sinkRecord);
      }
      return sinkRecord;
    };
    _proto.copyFields = function copyFields(sourceID, sinkID) {
      var sinkSource = this._sink.get(sourceID);
      var baseSource = this._base.get(sourceID);
      !(sinkSource || baseSource) && invariant(false, "RelayRecordSourceMutator#copyFields(): Cannot copy fields from non-existent record `%s`.", sourceID);
      var sink = this._getSinkRecord(sinkID);
      if (baseSource) {
        RelayModernRecord.copyFields(baseSource, sink);
      }
      if (sinkSource) {
        RelayModernRecord.copyFields(sinkSource, sink);
      }
    };
    _proto.copyFieldsFromRecord = function copyFieldsFromRecord(record, sinkID) {
      var sink = this._getSinkRecord(sinkID);
      RelayModernRecord.copyFields(record, sink);
    };
    _proto.create = function create(dataID, typeName) {
      !(this._base.getStatus(dataID) !== EXISTENT && this._sink.getStatus(dataID) !== EXISTENT) && invariant(false, "RelayRecordSourceMutator#create(): Cannot create a record with id `%s`, this record already exists.", dataID);
      var record = RelayModernRecord.create(dataID, typeName);
      this._sink.set(dataID, record);
    };
    _proto["delete"] = function _delete(dataID) {
      this._sink["delete"](dataID);
    };
    _proto.getStatus = function getStatus(dataID) {
      return this._sink.has(dataID) ? this._sink.getStatus(dataID) : this._base.getStatus(dataID);
    };
    _proto.getType = function getType(dataID) {
      for (var ii = 0;ii < this.__sources.length; ii++) {
        var record = this.__sources[ii].get(dataID);
        if (record) {
          return RelayModernRecord.getType(record);
        } else if (record === null) {
          return null;
        }
      }
    };
    _proto.getValue = function getValue(dataID, storageKey) {
      for (var ii = 0;ii < this.__sources.length; ii++) {
        var record = this.__sources[ii].get(dataID);
        if (record) {
          var value = RelayModernRecord.getValue(record, storageKey);
          if (value !== undefined) {
            return value;
          }
        } else if (record === null) {
          return null;
        }
      }
    };
    _proto.setValue = function setValue(dataID, storageKey, value) {
      var sinkRecord = this._getSinkRecord(dataID);
      RelayModernRecord.setValue(sinkRecord, storageKey, value);
    };
    _proto.getLinkedRecordID = function getLinkedRecordID(dataID, storageKey) {
      for (var ii = 0;ii < this.__sources.length; ii++) {
        var record = this.__sources[ii].get(dataID);
        if (record) {
          var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
          if (linkedID !== undefined) {
            return linkedID;
          }
        } else if (record === null) {
          return null;
        }
      }
    };
    _proto.setLinkedRecordID = function setLinkedRecordID(dataID, storageKey, linkedID) {
      var sinkRecord = this._getSinkRecord(dataID);
      RelayModernRecord.setLinkedRecordID(sinkRecord, storageKey, linkedID);
    };
    _proto.getLinkedRecordIDs = function getLinkedRecordIDs(dataID, storageKey) {
      for (var ii = 0;ii < this.__sources.length; ii++) {
        var record = this.__sources[ii].get(dataID);
        if (record) {
          var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
          if (linkedIDs !== undefined) {
            return linkedIDs;
          }
        } else if (record === null) {
          return null;
        }
      }
    };
    _proto.setLinkedRecordIDs = function setLinkedRecordIDs(dataID, storageKey, linkedIDs) {
      var sinkRecord = this._getSinkRecord(dataID);
      RelayModernRecord.setLinkedRecordIDs(sinkRecord, storageKey, linkedIDs);
    };
    return RelayRecordSourceMutator2;
  }();
  module.exports = RelayRecordSourceMutator;
});

// node_modules/relay-runtime/lib/mutations/createUpdatableProxy.js
var require_createUpdatableProxy = __commonJS((exports, module) => {
  var createUpdatableProxy = function(updatableProxyRootRecord, variables, selections, recordSourceProxy, missingFieldHandlers) {
    var mutableUpdatableProxy = {};
    updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selections, recordSourceProxy, missingFieldHandlers);
    if (true) {
      Object.freeze(mutableUpdatableProxy);
    }
    return mutableUpdatableProxy;
  };
  var updateProxyFromSelections = function(mutableUpdatableProxy, updatableProxyRootRecord, variables, selections, recordSourceProxy, missingFieldHandlers) {
    var _selection$alias3;
    var _iterator = (0, _createForOfIteratorHelper2["default"])(selections), _step;
    try {
      var _loop = function _loop() {
        var selection = _step.value;
        switch (selection.kind) {
          case LINKED_FIELD:
            if (selection.plural) {
              Object.defineProperty(mutableUpdatableProxy, (_selection$alias = selection.alias) !== null && _selection$alias !== undefined ? _selection$alias : selection.name, {
                get: createGetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers),
                set: createSetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy)
              });
            } else {
              Object.defineProperty(mutableUpdatableProxy, (_selection$alias2 = selection.alias) !== null && _selection$alias2 !== undefined ? _selection$alias2 : selection.name, {
                get: createGetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers),
                set: createSetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy)
              });
            }
            break;
          case SCALAR_FIELD:
            var scalarFieldName = (_selection$alias3 = selection.alias) !== null && _selection$alias3 !== undefined ? _selection$alias3 : selection.name;
            Object.defineProperty(mutableUpdatableProxy, scalarFieldName, {
              get: function get() {
                var _selection$args;
                var newVariables = getArgumentValues((_selection$args = selection.args) !== null && _selection$args !== undefined ? _selection$args : [], variables);
                var value = updatableProxyRootRecord.getValue(selection.name, newVariables);
                if (value == null) {
                  value = getScalarUsingMissingFieldHandlers(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers);
                }
                return value;
              },
              set: nonUpdatableKeys.includes(selection.name) ? undefined : function(newValue) {
                var _selection$args2;
                var newVariables = getArgumentValues((_selection$args2 = selection.args) !== null && _selection$args2 !== undefined ? _selection$args2 : [], variables);
                updatableProxyRootRecord.setValue__UNSAFE(newValue, selection.name, newVariables);
              }
            });
            break;
          case INLINE_FRAGMENT:
            if (updatableProxyRootRecord.getType() === selection.type) {
              updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selection.selections, recordSourceProxy, missingFieldHandlers);
            }
            break;
          case CLIENT_EXTENSION:
            updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selection.selections, recordSourceProxy, missingFieldHandlers);
            break;
          case FRAGMENT_SPREAD:
            break;
          case CONDITION:
          case ACTOR_CHANGE:
          case ALIASED_FRAGMENT_SPREAD:
          case INLINE_DATA_FRAGMENT_SPREAD:
          case ALIASED_INLINE_FRAGMENT_SPREAD:
          case CLIENT_EDGE_TO_CLIENT_OBJECT:
          case CLIENT_EDGE_TO_SERVER_OBJECT:
          case DEFER:
          case MODULE_IMPORT:
          case RELAY_LIVE_RESOLVER:
          case REQUIRED_FIELD:
          case STREAM:
          case RELAY_RESOLVER:
            throw new Error("Encountered an unexpected ReaderSelection variant in RelayRecordSourceProxy. This indicates a bug in Relay.");
          default:
            selection.kind;
            throw new Error("Encountered an unexpected ReaderSelection variant in RelayRecordSourceProxy. This indicates a bug in Relay.");
        }
      };
      for (_iterator.s();!(_step = _iterator.n()).done; ) {
        var _selection$alias;
        var _selection$alias2;
        _loop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  };
  var createSetterForPluralLinkedField = function(selection, variables, updatableProxyRootRecord, recordSourceProxy) {
    return function set(newValue) {
      var _selection$args3;
      var newVariables = getArgumentValues((_selection$args3 = selection.args) !== null && _selection$args3 !== undefined ? _selection$args3 : [], variables);
      if (newValue == null) {
        throw new Error("Do not assign null to plural linked fields; assign an empty array instead.");
      } else {
        var recordProxies = newValue.map(function(item) {
          if (item == null) {
            throw new Error("When assigning an array of items, none of the items should be null or undefined.");
          }
          var __id = item.__id;
          if (__id == null) {
            throw new Error("The __id field must be present on each item passed to the setter. This indicates a bug in Relay.");
          }
          var newValueRecord = recordSourceProxy.get(__id);
          if (newValueRecord == null) {
            throw new Error("Did not find item with data id ".concat(__id, " in the store."));
          }
          return newValueRecord;
        });
        updatableProxyRootRecord.setLinkedRecords(recordProxies, selection.name, newVariables);
      }
    };
  };
  var createSetterForSingularLinkedField = function(selection, variables, updatableProxyRootRecord, recordSourceProxy) {
    return function set(newValue) {
      var _selection$args4;
      var newVariables = getArgumentValues((_selection$args4 = selection.args) !== null && _selection$args4 !== undefined ? _selection$args4 : [], variables);
      if (newValue == null) {
        updatableProxyRootRecord.setValue(newValue, selection.name, newVariables);
      } else {
        var __id = newValue.__id;
        if (__id == null) {
          throw new Error("The __id field must be present on the argument. This indicates a bug in Relay.");
        }
        var newValueRecord = recordSourceProxy.get(__id);
        if (newValueRecord == null) {
          throw new Error("Did not find item with data id ".concat(__id, " in the store."));
        }
        updatableProxyRootRecord.setLinkedRecord(newValueRecord, selection.name, newVariables);
      }
    };
  };
  var createGetterForPluralLinkedField = function(selection, variables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers) {
    return function() {
      var _selection$args5;
      var newVariables = getArgumentValues((_selection$args5 = selection.args) !== null && _selection$args5 !== undefined ? _selection$args5 : [], variables);
      var linkedRecords = updatableProxyRootRecord.getLinkedRecords(selection.name, newVariables);
      if (linkedRecords === undefined) {
        linkedRecords = getPluralLinkedRecordUsingMissingFieldHandlers(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers);
      }
      if (linkedRecords != null) {
        return linkedRecords.map(function(linkedRecord) {
          if (linkedRecord != null) {
            var updatableProxy = {};
            updateProxyFromSelections(updatableProxy, linkedRecord, variables, selection.selections, recordSourceProxy, missingFieldHandlers);
            if (true) {
              Object.freeze(updatableProxy);
            }
            return updatableProxy;
          } else {
            return linkedRecord;
          }
        });
      } else {
        return linkedRecords;
      }
    };
  };
  var createGetterForSingularLinkedField = function(selection, variables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers) {
    return function() {
      var _selection$args6;
      var newVariables = getArgumentValues((_selection$args6 = selection.args) !== null && _selection$args6 !== undefined ? _selection$args6 : [], variables);
      var linkedRecord = updatableProxyRootRecord.getLinkedRecord(selection.name, newVariables);
      if (linkedRecord === undefined) {
        linkedRecord = getLinkedRecordUsingMissingFieldHandlers(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers);
      }
      if (linkedRecord != null) {
        var updatableProxy = {};
        updateProxyFromSelections(updatableProxy, linkedRecord, variables, selection.selections, recordSourceProxy, missingFieldHandlers);
        if (true) {
          Object.freeze(updatableProxy);
        }
        return updatableProxy;
      } else {
        return linkedRecord;
      }
    };
  };
  var getLinkedRecordUsingMissingFieldHandlers = function(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers) {
    var _iterator2 = (0, _createForOfIteratorHelper2["default"])(missingFieldHandlers), _step2;
    try {
      for (_iterator2.s();!(_step2 = _iterator2.n()).done; ) {
        var handler = _step2.value;
        if (handler.kind === "linked") {
          var newId = handler.handle(selection, updatableProxyRootRecord, newVariables, recordSourceProxy);
          if (newId != null) {
            return recordSourceProxy.get(newId);
          }
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  };
  var getPluralLinkedRecordUsingMissingFieldHandlers = function(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers) {
    var _iterator3 = (0, _createForOfIteratorHelper2["default"])(missingFieldHandlers), _step3;
    try {
      for (_iterator3.s();!(_step3 = _iterator3.n()).done; ) {
        var handler = _step3.value;
        if (handler.kind === "pluralLinked") {
          var newIds = handler.handle(selection, updatableProxyRootRecord, newVariables, recordSourceProxy);
          if (newIds != null) {
            return newIds.map(function(newId) {
              if (newId != null) {
                return recordSourceProxy.get(newId);
              }
            });
          }
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
  };
  var getScalarUsingMissingFieldHandlers = function(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers) {
    var _iterator4 = (0, _createForOfIteratorHelper2["default"])(missingFieldHandlers), _step4;
    try {
      for (_iterator4.s();!(_step4 = _iterator4.n()).done; ) {
        var handler = _step4.value;
        if (handler.kind === "scalar") {
          var value = handler.handle(selection, updatableProxyRootRecord, newVariables, recordSourceProxy);
          if (value !== undefined) {
            return value;
          }
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var _require = require_RelayStoreUtils();
  var getArgumentValues = _require.getArgumentValues;
  var _require2 = require_RelayConcreteNode();
  var ACTOR_CHANGE = _require2.ACTOR_CHANGE;
  var ALIASED_FRAGMENT_SPREAD = _require2.ALIASED_FRAGMENT_SPREAD;
  var ALIASED_INLINE_FRAGMENT_SPREAD = _require2.ALIASED_INLINE_FRAGMENT_SPREAD;
  var CLIENT_EDGE_TO_CLIENT_OBJECT = _require2.CLIENT_EDGE_TO_CLIENT_OBJECT;
  var CLIENT_EDGE_TO_SERVER_OBJECT = _require2.CLIENT_EDGE_TO_SERVER_OBJECT;
  var CLIENT_EXTENSION = _require2.CLIENT_EXTENSION;
  var CONDITION = _require2.CONDITION;
  var DEFER = _require2.DEFER;
  var FRAGMENT_SPREAD = _require2.FRAGMENT_SPREAD;
  var INLINE_DATA_FRAGMENT_SPREAD = _require2.INLINE_DATA_FRAGMENT_SPREAD;
  var INLINE_FRAGMENT = _require2.INLINE_FRAGMENT;
  var LINKED_FIELD = _require2.LINKED_FIELD;
  var MODULE_IMPORT = _require2.MODULE_IMPORT;
  var RELAY_LIVE_RESOLVER = _require2.RELAY_LIVE_RESOLVER;
  var RELAY_RESOLVER = _require2.RELAY_RESOLVER;
  var REQUIRED_FIELD = _require2.REQUIRED_FIELD;
  var SCALAR_FIELD = _require2.SCALAR_FIELD;
  var STREAM = _require2.STREAM;
  var nonUpdatableKeys = ["id", "__id", "__typename", "js"];
  module.exports = {
    createUpdatableProxy
  };
});

// node_modules/relay-runtime/lib/mutations/readUpdatableFragment.js
var require_readUpdatableFragment = __commonJS((exports, module) => {
  var readUpdatableFragment = function(fragment, fragmentReference, proxy, missingFieldHandlers) {
    var updatableFragment = getFragment(fragment);
    var fragmentVariables = getVariablesFromFragment(updatableFragment, fragmentReference);
    var id = fragmentReference[ID_KEY];
    var fragmentRoot = proxy.get(id);
    !(fragmentRoot != null) && invariant(false, "No record with ".concat(id, " was found. This likely indicates a problem with Relay."));
    return {
      updatableData: createUpdatableProxy(fragmentRoot, fragmentVariables, updatableFragment.selections, proxy, missingFieldHandlers)
    };
  };
  var _require = require_GraphQLTag();
  var getFragment = _require.getFragment;
  var _require2 = require_RelayModernSelector();
  var getVariablesFromFragment = _require2.getVariablesFromFragment;
  var _require3 = require_RelayStoreUtils();
  var ID_KEY = _require3.ID_KEY;
  var _require4 = require_createUpdatableProxy();
  var createUpdatableProxy = _require4.createUpdatableProxy;
  var invariant = require_browser();
  module.exports = {
    readUpdatableFragment
  };
});

// node_modules/relay-runtime/lib/mutations/readUpdatableQuery.js
var require_readUpdatableQuery = __commonJS((exports, module) => {
  var readUpdatableQuery = function(query, variables, proxy, missingFieldHandlers) {
    var updatableQuery = getUpdatableQuery(query);
    return {
      updatableData: createUpdatableProxy(proxy.getRoot(), variables, updatableQuery.fragment.selections, proxy, missingFieldHandlers)
    };
  };
  var _require = require_GraphQLTag();
  var getUpdatableQuery = _require.getUpdatableQuery;
  var _require2 = require_createUpdatableProxy();
  var createUpdatableProxy = _require2.createUpdatableProxy;
  module.exports = {
    readUpdatableQuery
  };
});

// node_modules/relay-runtime/lib/mutations/RelayRecordProxy.js
var require_RelayRecordProxy = __commonJS((exports, module) => {
  var isValidLeafValue = function(value) {
    return value == null || typeof value !== "object" || Array.isArray(value) && value.every(isValidLeafValue);
  };
  var _require = require_ClientID();
  var generateClientID = _require.generateClientID;
  var _require2 = require_RelayStoreUtils();
  var getStableStorageKey = _require2.getStableStorageKey;
  var invariant = require_browser();
  var RelayRecordProxy = function() {
    function RelayRecordProxy2(source, mutator, dataID) {
      this._dataID = dataID;
      this._mutator = mutator;
      this._source = source;
    }
    var _proto = RelayRecordProxy2.prototype;
    _proto.copyFieldsFrom = function copyFieldsFrom(source) {
      this._mutator.copyFields(source.getDataID(), this._dataID);
    };
    _proto.getDataID = function getDataID() {
      return this._dataID;
    };
    _proto.getType = function getType() {
      var type = this._mutator.getType(this._dataID);
      !(type != null) && invariant(false, "RelayRecordProxy: Cannot get the type of deleted record `%s`.", this._dataID);
      return type;
    };
    _proto.getValue = function getValue(name, args) {
      var storageKey = getStableStorageKey(name, args);
      return this._mutator.getValue(this._dataID, storageKey);
    };
    _proto.setValue = function setValue(value, name, args) {
      !isValidLeafValue(value) && invariant(false, "RelayRecordProxy#setValue(): Expected a scalar or array of scalars, got `%s`.", JSON.stringify(value));
      return this.setValue__UNSAFE(value, name, args);
    };
    _proto.setValue__UNSAFE = function setValue__UNSAFE(value, name, args) {
      var storageKey = getStableStorageKey(name, args);
      this._mutator.setValue(this._dataID, storageKey, value);
      return this;
    };
    _proto.getLinkedRecord = function getLinkedRecord(name, args) {
      var storageKey = getStableStorageKey(name, args);
      var linkedID = this._mutator.getLinkedRecordID(this._dataID, storageKey);
      return linkedID != null ? this._source.get(linkedID) : linkedID;
    };
    _proto.setLinkedRecord = function setLinkedRecord(record, name, args) {
      !(record instanceof RelayRecordProxy2) && invariant(false, "RelayRecordProxy#setLinkedRecord(): Expected a record, got `%s`.", record);
      var storageKey = getStableStorageKey(name, args);
      var linkedID = record.getDataID();
      this._mutator.setLinkedRecordID(this._dataID, storageKey, linkedID);
      return this;
    };
    _proto.getOrCreateLinkedRecord = function getOrCreateLinkedRecord(name, typeName, args) {
      var linkedRecord = this.getLinkedRecord(name, args);
      if (!linkedRecord) {
        var _this$_source$get;
        var storageKey = getStableStorageKey(name, args);
        var clientID = generateClientID(this.getDataID(), storageKey);
        linkedRecord = (_this$_source$get = this._source.get(clientID)) !== null && _this$_source$get !== undefined ? _this$_source$get : this._source.create(clientID, typeName);
        this.setLinkedRecord(linkedRecord, name, args);
      }
      return linkedRecord;
    };
    _proto.getLinkedRecords = function getLinkedRecords(name, args) {
      var _this = this;
      var storageKey = getStableStorageKey(name, args);
      var linkedIDs = this._mutator.getLinkedRecordIDs(this._dataID, storageKey);
      if (linkedIDs == null) {
        return linkedIDs;
      }
      return linkedIDs.map(function(linkedID) {
        return linkedID != null ? _this._source.get(linkedID) : linkedID;
      });
    };
    _proto.setLinkedRecords = function setLinkedRecords(records, name, args) {
      !Array.isArray(records) && invariant(false, "RelayRecordProxy#setLinkedRecords(): Expected records to be an array, got `%s`.", records);
      var storageKey = getStableStorageKey(name, args);
      var linkedIDs = records.map(function(record) {
        return record && record.getDataID();
      });
      this._mutator.setLinkedRecordIDs(this._dataID, storageKey, linkedIDs);
      return this;
    };
    _proto.invalidateRecord = function invalidateRecord() {
      this._source.markIDForInvalidation(this._dataID);
    };
    return RelayRecordProxy2;
  }();
  module.exports = RelayRecordProxy;
});

// node_modules/relay-runtime/lib/mutations/RelayRecordSourceProxy.js
var require_RelayRecordSourceProxy = __commonJS((exports, module) => {
  var RelayModernRecord = require_RelayModernRecord();
  var _require = require_RelayRecordState();
  var EXISTENT = _require.EXISTENT;
  var NONEXISTENT = _require.NONEXISTENT;
  var _require2 = require_RelayStoreUtils();
  var ROOT_ID = _require2.ROOT_ID;
  var ROOT_TYPE = _require2.ROOT_TYPE;
  var _require3 = require_readUpdatableFragment();
  var _readUpdatableFragment = _require3.readUpdatableFragment;
  var _require4 = require_readUpdatableQuery();
  var _readUpdatableQuery = _require4.readUpdatableQuery;
  var RelayRecordProxy = require_RelayRecordProxy();
  var invariant = require_browser();
  var RelayRecordSourceProxy = function() {
    function RelayRecordSourceProxy2(mutator, getDataID, handlerProvider, missingFieldHandlers) {
      this.__mutator = mutator;
      this._handlerProvider = handlerProvider || null;
      this._proxies = {};
      this._getDataID = getDataID;
      this._invalidatedStore = false;
      this._idsMarkedForInvalidation = new Set;
      this._missingFieldHandlers = missingFieldHandlers;
    }
    var _proto = RelayRecordSourceProxy2.prototype;
    _proto.publishSource = function publishSource(source, fieldPayloads) {
      var _this = this;
      var dataIDs = source.getRecordIDs();
      dataIDs.forEach(function(dataID) {
        var status = source.getStatus(dataID);
        if (status === EXISTENT) {
          var sourceRecord = source.get(dataID);
          if (sourceRecord) {
            if (_this.__mutator.getStatus(dataID) !== EXISTENT) {
              _this.create(dataID, RelayModernRecord.getType(sourceRecord));
            }
            _this.__mutator.copyFieldsFromRecord(sourceRecord, dataID);
          }
        } else if (status === NONEXISTENT) {
          _this["delete"](dataID);
        }
      });
      if (fieldPayloads && fieldPayloads.length) {
        fieldPayloads.forEach(function(fieldPayload) {
          var handler = _this._handlerProvider && _this._handlerProvider(fieldPayload.handle);
          !handler && invariant(false, "RelayModernEnvironment: Expected a handler to be provided for handle `%s`.", fieldPayload.handle);
          handler.update(_this, fieldPayload);
        });
      }
    };
    _proto.create = function create(dataID, typeName) {
      this.__mutator.create(dataID, typeName);
      delete this._proxies[dataID];
      var record = this.get(dataID);
      !record && invariant(false, "RelayRecordSourceProxy#create(): Expected the created record to exist.");
      return record;
    };
    _proto["delete"] = function _delete(dataID) {
      !(dataID !== ROOT_ID) && invariant(false, "RelayRecordSourceProxy#delete(): Cannot delete the root record.");
      delete this._proxies[dataID];
      this.__mutator["delete"](dataID);
    };
    _proto.get = function get(dataID) {
      if (!this._proxies.hasOwnProperty(dataID)) {
        var status = this.__mutator.getStatus(dataID);
        if (status === EXISTENT) {
          this._proxies[dataID] = new RelayRecordProxy(this, this.__mutator, dataID);
        } else {
          this._proxies[dataID] = status === NONEXISTENT ? null : undefined;
        }
      }
      return this._proxies[dataID];
    };
    _proto.getRoot = function getRoot() {
      var root = this.get(ROOT_ID);
      if (!root) {
        root = this.create(ROOT_ID, ROOT_TYPE);
      }
      !(root && root.getType() === ROOT_TYPE) && invariant(false, "RelayRecordSourceProxy#getRoot(): Expected the source to contain a root record, %s.", root == null ? "no root record found" : "found a root record of type `".concat(root.getType(), "`"));
      return root;
    };
    _proto.invalidateStore = function invalidateStore() {
      this._invalidatedStore = true;
    };
    _proto.isStoreMarkedForInvalidation = function isStoreMarkedForInvalidation() {
      return this._invalidatedStore;
    };
    _proto.markIDForInvalidation = function markIDForInvalidation(dataID) {
      this._idsMarkedForInvalidation.add(dataID);
    };
    _proto.getIDsMarkedForInvalidation = function getIDsMarkedForInvalidation() {
      return this._idsMarkedForInvalidation;
    };
    _proto.readUpdatableQuery = function readUpdatableQuery(query, variables) {
      return _readUpdatableQuery(query, variables, this, this._missingFieldHandlers);
    };
    _proto.readUpdatableFragment = function readUpdatableFragment(fragment, fragmentReference) {
      return _readUpdatableFragment(fragment, fragmentReference, this, this._missingFieldHandlers);
    };
    return RelayRecordSourceProxy2;
  }();
  module.exports = RelayRecordSourceProxy;
});

// node_modules/relay-runtime/lib/mutations/RelayRecordSourceSelectorProxy.js
var require_RelayRecordSourceSelectorProxy = __commonJS((exports, module) => {
  var _require = require_RelayStoreUtils();
  var ROOT_TYPE = _require.ROOT_TYPE;
  var getStorageKey = _require.getStorageKey;
  var _require2 = require_readUpdatableFragment();
  var _readUpdatableFragment = _require2.readUpdatableFragment;
  var _require3 = require_readUpdatableQuery();
  var _readUpdatableQuery = _require3.readUpdatableQuery;
  var invariant = require_browser();
  var RelayRecordSourceSelectorProxy = function() {
    function RelayRecordSourceSelectorProxy2(mutator, recordSource, readSelector, missingFieldHandlers) {
      this.__mutator = mutator;
      this.__recordSource = recordSource;
      this._readSelector = readSelector;
      this._missingFieldHandlers = missingFieldHandlers;
    }
    var _proto = RelayRecordSourceSelectorProxy2.prototype;
    _proto.create = function create(dataID, typeName) {
      return this.__recordSource.create(dataID, typeName);
    };
    _proto["delete"] = function _delete(dataID) {
      this.__recordSource["delete"](dataID);
    };
    _proto.get = function get(dataID) {
      return this.__recordSource.get(dataID);
    };
    _proto.getRoot = function getRoot() {
      return this.__recordSource.getRoot();
    };
    _proto.getOperationRoot = function getOperationRoot() {
      var root = this.__recordSource.get(this._readSelector.dataID);
      if (!root) {
        root = this.__recordSource.create(this._readSelector.dataID, ROOT_TYPE);
      }
      return root;
    };
    _proto._getRootField = function _getRootField(selector, fieldName, plural) {
      var field = selector.node.selections.find(function(selection) {
        return selection.kind === "LinkedField" && selection.name === fieldName || selection.kind === "RequiredField" && selection.field.name === fieldName;
      });
      if (field && field.kind === "RequiredField") {
        field = field.field;
      }
      !(field && field.kind === "LinkedField") && invariant(false, "RelayRecordSourceSelectorProxy#getRootField(): Cannot find root field `%s`, no such field is defined on GraphQL document `%s`.", fieldName, selector.node.name);
      !(field.plural === plural) && invariant(false, "RelayRecordSourceSelectorProxy#getRootField(): Expected root field `%s` to be %s.", fieldName, plural ? "plural" : "singular");
      return field;
    };
    _proto.getRootField = function getRootField(fieldName) {
      var field = this._getRootField(this._readSelector, fieldName, false);
      var storageKey = getStorageKey(field, this._readSelector.variables);
      return this.getOperationRoot().getLinkedRecord(storageKey);
    };
    _proto.getPluralRootField = function getPluralRootField(fieldName) {
      var field = this._getRootField(this._readSelector, fieldName, true);
      var storageKey = getStorageKey(field, this._readSelector.variables);
      return this.getOperationRoot().getLinkedRecords(storageKey);
    };
    _proto.invalidateStore = function invalidateStore() {
      this.__recordSource.invalidateStore();
    };
    _proto.readUpdatableQuery = function readUpdatableQuery(query, variables) {
      return _readUpdatableQuery(query, variables, this, this._missingFieldHandlers);
    };
    _proto.readUpdatableFragment = function readUpdatableFragment(fragment, fragmentReference) {
      return _readUpdatableFragment(fragment, fragmentReference, this, this._missingFieldHandlers);
    };
    return RelayRecordSourceSelectorProxy2;
  }();
  module.exports = RelayRecordSourceSelectorProxy;
});

// node_modules/relay-runtime/lib/util/shallowFreeze.js
var require_shallowFreeze = __commonJS((exports, module) => {
  module.exports = function shallowFreeze(value) {
    if (typeof value === "object" && value != null && (Array.isArray(value) || value.constructor === Object)) {
      Object.freeze(value);
    }
  };
});

// node_modules/relay-runtime/lib/store/ResolverCache.js
var require_ResolverCache = __commonJS((exports, module) => {
  var addDependencyEdge = function(edges, from, to) {
    var set = edges.get(from);
    if (!set) {
      set = new Set;
      edges.set(from, set);
    }
    set.add(to);
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var recycleNodesInto = require_recycleNodesInto();
  var _require = require_RelayConcreteNode();
  var RELAY_LIVE_RESOLVER = _require.RELAY_LIVE_RESOLVER;
  var RelayFeatureFlags = require_RelayFeatureFlags();
  var shallowFreeze = require_shallowFreeze();
  var _require2 = require_ClientID();
  var generateClientID = _require2.generateClientID;
  var RelayModernRecord = require_RelayModernRecord();
  var _require3 = require_RelayStoreUtils();
  var RELAY_RESOLVER_ERROR_KEY = _require3.RELAY_RESOLVER_ERROR_KEY;
  var RELAY_RESOLVER_INVALIDATION_KEY = _require3.RELAY_RESOLVER_INVALIDATION_KEY;
  var RELAY_RESOLVER_SNAPSHOT_KEY = _require3.RELAY_RESOLVER_SNAPSHOT_KEY;
  var RELAY_RESOLVER_VALUE_KEY = _require3.RELAY_RESOLVER_VALUE_KEY;
  var getStorageKey = _require3.getStorageKey;
  var invariant = require_browser();
  var warning = require_warning();
  var emptySet = new Set;
  var NoopResolverCache = function() {
    function NoopResolverCache2() {
    }
    var _proto = NoopResolverCache2.prototype;
    _proto.readFromCacheOrEvaluate = function readFromCacheOrEvaluate(recordID, field, variables, evaluate, getDataForResolverFragment) {
      !(field.kind !== RELAY_LIVE_RESOLVER) && invariant(false, "This store does not support Live Resolvers");
      var _evaluate = evaluate(), resolverResult = _evaluate.resolverResult, snapshot = _evaluate.snapshot, error = _evaluate.error;
      return [resolverResult, undefined, error, snapshot, undefined, undefined];
    };
    _proto.invalidateDataIDs = function invalidateDataIDs(updatedDataIDs) {
    };
    _proto.ensureClientRecord = function ensureClientRecord(id, typeName) {
      invariant(false, "Client Edges to Client Objects are not supported in this version of Relay Store");
    };
    _proto.notifyUpdatedSubscribers = function notifyUpdatedSubscribers(updatedDataIDs) {
    };
    return NoopResolverCache2;
  }();
  var RecordResolverCache = function() {
    function RecordResolverCache2(getRecordSource) {
      this._resolverIDToRecordIDs = new Map;
      this._recordIDToResolverIDs = new Map;
      this._getRecordSource = getRecordSource;
    }
    var _proto2 = RecordResolverCache2.prototype;
    _proto2.readFromCacheOrEvaluate = function readFromCacheOrEvaluate(recordID, field, variables, evaluate, getDataForResolverFragment) {
      var recordSource = this._getRecordSource();
      var record = recordSource.get(recordID);
      !(record != null) && invariant(false, "We expect record to exist in the store.");
      var storageKey = getStorageKey(field, variables);
      var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
      var linkedRecord = linkedID == null ? null : recordSource.get(linkedID);
      if (linkedRecord == null || this._isInvalid(linkedRecord, getDataForResolverFragment)) {
        var _linkedID;
        linkedID = (_linkedID = linkedID) !== null && _linkedID !== undefined ? _linkedID : generateClientID(recordID, storageKey);
        linkedRecord = RelayModernRecord.create(linkedID, "__RELAY_RESOLVER__");
        var evaluationResult = evaluate();
        if (RelayFeatureFlags.ENABLE_SHALLOW_FREEZE_RESOLVER_VALUES) {
          shallowFreeze(evaluationResult.resolverResult);
        }
        RelayModernRecord.setValue(linkedRecord, RELAY_RESOLVER_VALUE_KEY, evaluationResult.resolverResult);
        RelayModernRecord.setValue(linkedRecord, RELAY_RESOLVER_SNAPSHOT_KEY, evaluationResult.snapshot);
        RelayModernRecord.setValue(linkedRecord, RELAY_RESOLVER_ERROR_KEY, evaluationResult.error);
        recordSource.set(linkedID, linkedRecord);
        var currentRecord = recordSource.get(recordID);
        !(currentRecord != null) && invariant(false, "Expected the parent record to still be in the record source.");
        var nextRecord = RelayModernRecord.clone(currentRecord);
        RelayModernRecord.setLinkedRecordID(nextRecord, storageKey, linkedID);
        recordSource.set(recordID, nextRecord);
        if (field.fragment != null) {
          var _evaluationResult$sna;
          var fragmentStorageKey = getStorageKey(field.fragment, variables);
          var resolverID = generateClientID(recordID, fragmentStorageKey);
          addDependencyEdge(this._resolverIDToRecordIDs, resolverID, linkedID);
          addDependencyEdge(this._recordIDToResolverIDs, recordID, resolverID);
          var seenRecordIds = (_evaluationResult$sna = evaluationResult.snapshot) === null || _evaluationResult$sna === undefined ? undefined : _evaluationResult$sna.seenRecords;
          if (seenRecordIds != null) {
            var _iterator = (0, _createForOfIteratorHelper2["default"])(seenRecordIds), _step;
            try {
              for (_iterator.s();!(_step = _iterator.n()).done; ) {
                var seenRecordID = _step.value;
                addDependencyEdge(this._recordIDToResolverIDs, seenRecordID, resolverID);
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }
          }
        }
      }
      var answer = RelayModernRecord.getValue(linkedRecord, RELAY_RESOLVER_VALUE_KEY);
      var snapshot = RelayModernRecord.getValue(linkedRecord, RELAY_RESOLVER_SNAPSHOT_KEY);
      var error = RelayModernRecord.getValue(linkedRecord, RELAY_RESOLVER_ERROR_KEY);
      return [answer, linkedID, error, snapshot, undefined, undefined];
    };
    _proto2.invalidateDataIDs = function invalidateDataIDs(updatedDataIDs) {
      var recordSource = this._getRecordSource();
      var visited = new Set;
      var recordsToVisit = Array.from(updatedDataIDs);
      while (recordsToVisit.length) {
        var recordID = recordsToVisit.pop();
        updatedDataIDs.add(recordID);
        var _iterator2 = (0, _createForOfIteratorHelper2["default"])((_this$_recordIDToReso = this._recordIDToResolverIDs.get(recordID)) !== null && _this$_recordIDToReso !== undefined ? _this$_recordIDToReso : emptySet), _step2;
        try {
          for (_iterator2.s();!(_step2 = _iterator2.n()).done; ) {
            var _this$_recordIDToReso;
            var fragment = _step2.value;
            if (!visited.has(fragment)) {
              var _iterator3 = (0, _createForOfIteratorHelper2["default"])((_this$_resolverIDToRe = this._resolverIDToRecordIDs.get(fragment)) !== null && _this$_resolverIDToRe !== undefined ? _this$_resolverIDToRe : emptySet), _step3;
              try {
                for (_iterator3.s();!(_step3 = _iterator3.n()).done; ) {
                  var _this$_resolverIDToRe;
                  var anotherRecordID = _step3.value;
                  this._markInvalidatedResolverRecord(anotherRecordID, recordSource, updatedDataIDs);
                  if (!visited.has(anotherRecordID)) {
                    recordsToVisit.push(anotherRecordID);
                  }
                }
              } catch (err) {
                _iterator3.e(err);
              } finally {
                _iterator3.f();
              }
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    };
    _proto2._markInvalidatedResolverRecord = function _markInvalidatedResolverRecord(dataID, recordSource, updatedDataIDs) {
      var record = recordSource.get(dataID);
      if (!record) {
        warning(false, "Expected a resolver record with ID %s, but it was missing.", dataID);
        return;
      }
      var nextRecord = RelayModernRecord.clone(record);
      RelayModernRecord.setValue(nextRecord, RELAY_RESOLVER_INVALIDATION_KEY, true);
      recordSource.set(dataID, nextRecord);
    };
    _proto2._isInvalid = function _isInvalid(record, getDataForResolverFragment) {
      if (!RelayModernRecord.getValue(record, RELAY_RESOLVER_INVALIDATION_KEY)) {
        return false;
      }
      var snapshot = RelayModernRecord.getValue(record, RELAY_RESOLVER_SNAPSHOT_KEY);
      var originalInputs = snapshot === null || snapshot === undefined ? undefined : snapshot.data;
      var readerSelector = snapshot === null || snapshot === undefined ? undefined : snapshot.selector;
      if (originalInputs == null || readerSelector == null) {
        warning(false, "Expected previous inputs and reader selector on resolver record with ID %s, but they were missing.", RelayModernRecord.getDataID(record));
        return true;
      }
      var _getDataForResolverFr = getDataForResolverFragment(readerSelector), latestValues = _getDataForResolverFr.data;
      var recycled = recycleNodesInto(originalInputs, latestValues);
      if (recycled !== originalInputs) {
        return true;
      }
      return false;
    };
    _proto2.ensureClientRecord = function ensureClientRecord(id, typename) {
      invariant(false, "Client Edges to Client Objects are not supported in this version of Relay Store");
    };
    _proto2.notifyUpdatedSubscribers = function notifyUpdatedSubscribers(updatedDataIDs) {
      invariant(false, "Processing @outputType records is not supported in this version of Relay Store");
    };
    return RecordResolverCache2;
  }();
  module.exports = {
    NoopResolverCache,
    RecordResolverCache
  };
});

// node_modules/relay-runtime/lib/store/ResolverFragments.js
var require_ResolverFragments = __commonJS((exports, module) => {
  var withResolverContext = function(context, cb) {
    contextStack.push(context);
    try {
      return cb();
    } finally {
      contextStack.pop();
    }
  };
  var readFragment = function(fragmentInput, fragmentKey) {
    if (!contextStack.length) {
      throw new Error("readFragment should be called only from within a Relay Resolver function.");
    }
    var context = contextStack[contextStack.length - 1];
    var fragmentNode = getFragment(fragmentInput);
    var fragmentSelector = getSelector(fragmentNode, fragmentKey);
    !(fragmentSelector != null) && invariant(false, "Expected a selector for the fragment of the resolver ".concat(fragmentNode.name, ", but got null."));
    !(fragmentSelector.kind === "SingularReaderSelector") && invariant(false, "Expected a singular reader selector for the fragment of the resolver ".concat(fragmentNode.name, ", but it was plural."));
    var _context$getDataForRe = context.getDataForResolverFragment(fragmentSelector, fragmentKey), data = _context$getDataForRe.data, isMissingData = _context$getDataForRe.isMissingData;
    if (isMissingData) {
      throw RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL;
    }
    return data;
  };
  var _require = require_GraphQLTag();
  var getFragment = _require.getFragment;
  var _require2 = require_RelayModernSelector();
  var getSelector = _require2.getSelector;
  var invariant = require_browser();
  var contextStack = [];
  var RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = {};
  module.exports = {
    readFragment,
    withResolverContext,
    RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL
  };
});

// node_modules/relay-runtime/lib/store/RelayReader.js
var require_RelayReader = __commonJS((exports, module) => {
  var read = function(recordSource, selector, resolverCache) {
    var reader = new RelayReader(recordSource, selector, resolverCache !== null && resolverCache !== undefined ? resolverCache : new NoopResolverCache);
    return reader.read();
  };
  var getResolverValue = function(field, variables, fragmentKey) {
    var resolverFunction = typeof field.resolverModule === "function" ? field.resolverModule : field.resolverModule["default"];
    var resolverResult = null;
    var resolverError = null;
    try {
      var resolverFunctionArgs = [];
      if (field.fragment != null) {
        resolverFunctionArgs.push(fragmentKey);
      }
      var args = field.args ? getArgumentValues(field.args, variables) : undefined;
      resolverFunctionArgs.push(args);
      resolverResult = resolverFunction.apply(null, resolverFunctionArgs);
    } catch (e) {
      if (e === RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL) {
        resolverResult = undefined;
      } else {
        resolverError = e;
      }
    }
    return [resolverResult, resolverError];
  };
  var assertValidClientEdgeResolverResponse = function(field, clientEdgeResolverResponse) {
    if (field.linkedField.plural) {
      !Array.isArray(clientEdgeResolverResponse) && invariant(false, "Expected plural Client Edge Relay Resolver to return an array containing IDs or objects with shape {id}.");
      return {
        kind: "PluralConcrete",
        ids: clientEdgeResolverResponse.map(function(response) {
          return extractIdFromResponse(response, "Expected this plural Client Edge Relay Resolver to return an array containing IDs or objects with shape {id}.");
        })
      };
    } else {
      return {
        kind: "SingularConcrete",
        id: extractIdFromResponse(clientEdgeResolverResponse, "Expected this Client Edge Relay Resolver to return an ID of type `string` or an object with shape {id}.")
      };
    }
  };
  var getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver = function(field, clientEdgeResolverResponse, resolverCache) {
    if (field.kind === CLIENT_EDGE_TO_CLIENT_OBJECT) {
      if (field.backingField.normalizationInfo == null) {
        var concreteType = field.concreteType;
        !(concreteType != null) && invariant(false, "Expected at least one of backingField.normalizationInfo or field.concreteType to be non-null. This indicates a bug in Relay.");
        return [resolverCache.ensureClientRecord(clientEdgeResolverResponse, concreteType), null];
      } else {
        return [clientEdgeResolverResponse, null];
      }
    } else {
      return [clientEdgeResolverResponse, {
        readerClientEdge: field,
        clientEdgeDestinationID: clientEdgeResolverResponse
      }];
    }
  };
  var getStoreIDsForPluralClientEdgeResolver = function(field, clientEdgeResolverResponse, resolverCache) {
    if (field.kind === CLIENT_EDGE_TO_CLIENT_OBJECT) {
      if (field.backingField.normalizationInfo == null) {
        var concreteType = field.concreteType;
        !(concreteType != null) && invariant(false, "Expected at least one of backingField.normalizationInfo or field.concreteType to be non-null. This indicates a bug in Relay.");
        return clientEdgeResolverResponse.map(function(id) {
          return resolverCache.ensureClientRecord(id, concreteType);
        });
      } else {
        return clientEdgeResolverResponse;
      }
    } else {
      invariant(false, "Unexpected Client Edge to plural server type. This should be prevented by the compiler.");
    }
  };
  var extractIdFromResponse = function(individualResponse, errorMessage) {
    if (typeof individualResponse === "string") {
      return individualResponse;
    } else if (typeof individualResponse === "object" && individualResponse != null && typeof individualResponse.id === "string") {
      return individualResponse.id;
    }
    invariant(false, errorMessage);
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var _defineProperty2 = _interopRequireDefault(require_defineProperty());
  var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
  var _require = require_RelayConcreteNode();
  var ACTOR_CHANGE = _require.ACTOR_CHANGE;
  var ALIASED_FRAGMENT_SPREAD = _require.ALIASED_FRAGMENT_SPREAD;
  var ALIASED_INLINE_FRAGMENT_SPREAD = _require.ALIASED_INLINE_FRAGMENT_SPREAD;
  var CLIENT_EDGE_TO_CLIENT_OBJECT = _require.CLIENT_EDGE_TO_CLIENT_OBJECT;
  var CLIENT_EDGE_TO_SERVER_OBJECT = _require.CLIENT_EDGE_TO_SERVER_OBJECT;
  var CLIENT_EXTENSION = _require.CLIENT_EXTENSION;
  var CONDITION = _require.CONDITION;
  var DEFER = _require.DEFER;
  var FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD;
  var INLINE_DATA_FRAGMENT_SPREAD = _require.INLINE_DATA_FRAGMENT_SPREAD;
  var INLINE_FRAGMENT = _require.INLINE_FRAGMENT;
  var LINKED_FIELD = _require.LINKED_FIELD;
  var MODULE_IMPORT = _require.MODULE_IMPORT;
  var RELAY_LIVE_RESOLVER = _require.RELAY_LIVE_RESOLVER;
  var RELAY_RESOLVER = _require.RELAY_RESOLVER;
  var REQUIRED_FIELD = _require.REQUIRED_FIELD;
  var SCALAR_FIELD = _require.SCALAR_FIELD;
  var STREAM = _require.STREAM;
  var RelayFeatureFlags = require_RelayFeatureFlags();
  var _require2 = require_LiveResolverSuspenseSentinel();
  var isSuspenseSentinel = _require2.isSuspenseSentinel;
  var RelayConcreteVariables = require_RelayConcreteVariables();
  var RelayModernRecord = require_RelayModernRecord();
  var _require3 = require_RelayStoreUtils();
  var CLIENT_EDGE_TRAVERSAL_PATH = _require3.CLIENT_EDGE_TRAVERSAL_PATH;
  var FRAGMENT_OWNER_KEY = _require3.FRAGMENT_OWNER_KEY;
  var FRAGMENT_PROP_NAME_KEY = _require3.FRAGMENT_PROP_NAME_KEY;
  var FRAGMENTS_KEY = _require3.FRAGMENTS_KEY;
  var ID_KEY = _require3.ID_KEY;
  var MODULE_COMPONENT_KEY = _require3.MODULE_COMPONENT_KEY;
  var ROOT_ID = _require3.ROOT_ID;
  var getArgumentValues = _require3.getArgumentValues;
  var getModuleComponentKey = _require3.getModuleComponentKey;
  var getStorageKey = _require3.getStorageKey;
  var _require4 = require_ResolverCache();
  var NoopResolverCache = _require4.NoopResolverCache;
  var _require5 = require_ResolverFragments();
  var RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = _require5.RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL;
  var withResolverContext = _require5.withResolverContext;
  var _require6 = require_TypeID();
  var generateTypeID = _require6.generateTypeID;
  var invariant = require_browser();
  var RelayReader = function() {
    function RelayReader2(recordSource, selector, resolverCache) {
      var _selector$clientEdgeT;
      this._clientEdgeTraversalPath = RelayFeatureFlags.ENABLE_CLIENT_EDGES && (_selector$clientEdgeT = selector.clientEdgeTraversalPath) !== null && _selector$clientEdgeT !== undefined && _selector$clientEdgeT.length ? (0, _toConsumableArray2["default"])(selector.clientEdgeTraversalPath) : [];
      this._missingClientEdges = [];
      this._missingLiveResolverFields = [];
      this._isMissingData = false;
      this._isWithinUnmatchedTypeRefinement = false;
      this._missingRequiredFields = null;
      this._owner = selector.owner;
      this._recordSource = recordSource;
      this._seenRecords = new Set;
      this._selector = selector;
      this._variables = selector.variables;
      this._resolverCache = resolverCache;
      this._resolverErrors = [];
      this._fragmentName = selector.node.name;
      this._updatedDataIDs = new Set;
    }
    var _proto = RelayReader2.prototype;
    _proto.read = function read() {
      var _this$_selector = this._selector, node2 = _this$_selector.node, dataID = _this$_selector.dataID, isWithinUnmatchedTypeRefinement = _this$_selector.isWithinUnmatchedTypeRefinement;
      var abstractKey = node2.abstractKey;
      var record = this._recordSource.get(dataID);
      var isDataExpectedToBePresent = !isWithinUnmatchedTypeRefinement;
      if (isDataExpectedToBePresent && abstractKey == null && record != null) {
        var recordType = RelayModernRecord.getType(record);
        if (recordType !== node2.type && dataID !== ROOT_ID) {
          isDataExpectedToBePresent = false;
        }
      }
      if (isDataExpectedToBePresent && abstractKey != null && record != null) {
        var implementsInterface = this._implementsInterface(record, abstractKey);
        if (implementsInterface === false) {
          isDataExpectedToBePresent = false;
        } else if (implementsInterface == null) {
          this._isMissingData = true;
        }
      }
      this._isWithinUnmatchedTypeRefinement = !isDataExpectedToBePresent;
      var data = this._traverse(node2, dataID, null);
      if (this._updatedDataIDs.size > 0) {
        this._resolverCache.notifyUpdatedSubscribers(this._updatedDataIDs);
        this._updatedDataIDs.clear();
      }
      return {
        data,
        isMissingData: this._isMissingData && isDataExpectedToBePresent,
        missingClientEdges: RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._missingClientEdges.length ? this._missingClientEdges : null,
        missingLiveResolverFields: this._missingLiveResolverFields,
        seenRecords: this._seenRecords,
        selector: this._selector,
        missingRequiredFields: this._missingRequiredFields,
        relayResolverErrors: this._resolverErrors
      };
    };
    _proto._markDataAsMissing = function _markDataAsMissing() {
      this._isMissingData = true;
      if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._clientEdgeTraversalPath.length) {
        var top = this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1];
        if (top !== null) {
          this._missingClientEdges.push({
            request: top.readerClientEdge.operation,
            clientEdgeDestinationID: top.clientEdgeDestinationID
          });
        }
      }
    };
    _proto._traverse = function _traverse(node2, dataID, prevData) {
      var record = this._recordSource.get(dataID);
      this._seenRecords.add(dataID);
      if (record == null) {
        if (record === undefined) {
          this._markDataAsMissing();
        }
        return record;
      }
      var data = prevData || {};
      var hadRequiredData = this._traverseSelections(node2.selections, record, data);
      return hadRequiredData ? data : null;
    };
    _proto._getVariableValue = function _getVariableValue(name) {
      !this._variables.hasOwnProperty(name) && invariant(false, "RelayReader(): Undefined variable `%s`.", name);
      return this._variables[name];
    };
    _proto._maybeReportUnexpectedNull = function _maybeReportUnexpectedNull(fieldPath, action) {
      var _this$_missingRequire;
      if (((_this$_missingRequire = this._missingRequiredFields) === null || _this$_missingRequire === undefined ? undefined : _this$_missingRequire.action) === "THROW") {
        return;
      }
      var owner = this._fragmentName;
      switch (action) {
        case "THROW":
          this._missingRequiredFields = {
            action,
            field: {
              path: fieldPath,
              owner
            }
          };
          return;
        case "LOG":
          if (this._missingRequiredFields == null) {
            this._missingRequiredFields = {
              action,
              fields: [{
                path: fieldPath,
                owner
              }]
            };
          } else {
            this._missingRequiredFields = {
              action,
              fields: [].concat((0, _toConsumableArray2["default"])(this._missingRequiredFields.fields), [{
                path: fieldPath,
                owner
              }])
            };
          }
          return;
        default:
      }
    };
    _proto._traverseSelections = function _traverseSelections(selections, record, data) {
      for (var i = 0;i < selections.length; i++) {
        var selection = selections[i];
        switch (selection.kind) {
          case REQUIRED_FIELD: {
            var fieldValue = this._readRequiredField(selection, record, data);
            if (fieldValue == null) {
              var action = selection.action;
              if (action !== "NONE") {
                this._maybeReportUnexpectedNull(selection.path, action);
              }
              return false;
            }
            break;
          }
          case SCALAR_FIELD:
            this._readScalar(selection, record, data);
            break;
          case LINKED_FIELD:
            if (selection.plural) {
              this._readPluralLink(selection, record, data);
            } else {
              this._readLink(selection, record, data);
            }
            break;
          case CONDITION:
            var conditionValue = Boolean(this._getVariableValue(selection.condition));
            if (conditionValue === selection.passingValue) {
              var hasExpectedData = this._traverseSelections(selection.selections, record, data);
              if (!hasExpectedData) {
                return false;
              }
            }
            break;
          case INLINE_FRAGMENT: {
            if (this._readInlineFragment(selection, record, data) === false) {
              return false;
            }
            break;
          }
          case RELAY_LIVE_RESOLVER:
          case RELAY_RESOLVER: {
            if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
              throw new Error("Relay Resolver fields are not yet supported.");
            }
            this._readResolverField(selection, record, data);
            break;
          }
          case FRAGMENT_SPREAD:
            this._createFragmentPointer(selection, record, data);
            break;
          case ALIASED_FRAGMENT_SPREAD:
            data[selection.name] = this._createAliasedFragmentSpread(selection, record);
            break;
          case ALIASED_INLINE_FRAGMENT_SPREAD: {
            var _fieldValue = this._readInlineFragment(selection.fragment, record, {});
            if (_fieldValue === false) {
              _fieldValue = null;
            }
            data[selection.name] = _fieldValue;
            break;
          }
          case MODULE_IMPORT:
            this._readModuleImport(selection, record, data);
            break;
          case INLINE_DATA_FRAGMENT_SPREAD:
            this._createInlineDataOrResolverFragmentPointer(selection, record, data);
            break;
          case DEFER:
          case CLIENT_EXTENSION: {
            var isMissingData = this._isMissingData;
            var alreadyMissingClientEdges = this._missingClientEdges.length;
            if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
              this._clientEdgeTraversalPath.push(null);
            }
            var _hasExpectedData = this._traverseSelections(selection.selections, record, data);
            this._isMissingData = isMissingData || this._missingClientEdges.length > alreadyMissingClientEdges || this._missingLiveResolverFields.length > 0;
            if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
              this._clientEdgeTraversalPath.pop();
            }
            if (!_hasExpectedData) {
              return false;
            }
            break;
          }
          case STREAM: {
            var _hasExpectedData2 = this._traverseSelections(selection.selections, record, data);
            if (!_hasExpectedData2) {
              return false;
            }
            break;
          }
          case ACTOR_CHANGE:
            this._readActorChange(selection, record, data);
            break;
          case CLIENT_EDGE_TO_CLIENT_OBJECT:
          case CLIENT_EDGE_TO_SERVER_OBJECT:
            if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
              this._readClientEdge(selection, record, data);
            } else {
              throw new Error("Client edges are not yet supported.");
            }
            break;
          default:
            invariant(false, "RelayReader(): Unexpected ast kind `%s`.", selection.kind);
        }
      }
      return true;
    };
    _proto._readRequiredField = function _readRequiredField(selection, record, data) {
      switch (selection.field.kind) {
        case SCALAR_FIELD:
          return this._readScalar(selection.field, record, data);
        case LINKED_FIELD:
          if (selection.field.plural) {
            return this._readPluralLink(selection.field, record, data);
          } else {
            return this._readLink(selection.field, record, data);
          }
        case RELAY_RESOLVER:
          if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
            throw new Error("Relay Resolver fields are not yet supported.");
          }
          return this._readResolverField(selection.field, record, data);
        case RELAY_LIVE_RESOLVER:
          if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
            throw new Error("Relay Resolver fields are not yet supported.");
          }
          return this._readResolverField(selection.field, record, data);
        case CLIENT_EDGE_TO_CLIENT_OBJECT:
        case CLIENT_EDGE_TO_SERVER_OBJECT:
          if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
            throw new Error("Relay Resolver fields are not yet supported.");
          }
          return this._readClientEdge(selection.field, record, data);
        default:
          selection.field.kind;
          invariant(false, "RelayReader(): Unexpected ast kind `%s`.", selection.kind);
      }
    };
    _proto._readResolverField = function _readResolverField(field, record, data) {
      var _this = this;
      var _field$alias;
      var fragment = field.fragment;
      var parentRecordID = RelayModernRecord.getDataID(record);
      var snapshot;
      var getDataForResolverFragment = function getDataForResolverFragment(singularReaderSelector) {
        if (snapshot != null) {
          return {
            data: snapshot.data,
            isMissingData: snapshot.isMissingData
          };
        }
        snapshot = read(_this._recordSource, singularReaderSelector, _this._resolverCache);
        return {
          data: snapshot.data,
          isMissingData: snapshot.isMissingData
        };
      };
      var evaluate = function evaluate() {
        if (fragment != null) {
          var key = {
            __id: parentRecordID,
            __fragmentOwner: _this._owner,
            __fragments: (0, _defineProperty2["default"])({}, fragment.name, fragment.args ? getArgumentValues(fragment.args, _this._variables) : {})
          };
          var resolverContext = {
            getDataForResolverFragment
          };
          return withResolverContext(resolverContext, function() {
            var _getResolverValue = getResolverValue(field, _this._variables, key), resolverResult2 = _getResolverValue[0], resolverError2 = _getResolverValue[1];
            return {
              resolverResult: resolverResult2,
              snapshot,
              error: resolverError2
            };
          });
        } else {
          var _getResolverValue2 = getResolverValue(field, _this._variables, null), resolverResult = _getResolverValue2[0], _resolverError = _getResolverValue2[1];
          return {
            resolverResult,
            snapshot: undefined,
            error: _resolverError
          };
        }
      };
      var _this$_resolverCache$ = this._resolverCache.readFromCacheOrEvaluate(parentRecordID, field, this._variables, evaluate, getDataForResolverFragment), result = _this$_resolverCache$[0], seenRecord = _this$_resolverCache$[1], resolverError = _this$_resolverCache$[2], cachedSnapshot = _this$_resolverCache$[3], suspenseID = _this$_resolverCache$[4], updatedDataIDs = _this$_resolverCache$[5];
      this._propogateResolverMetadata(field.path, cachedSnapshot, resolverError, seenRecord, suspenseID, updatedDataIDs);
      var applicationName = (_field$alias = field.alias) !== null && _field$alias !== undefined ? _field$alias : field.name;
      data[applicationName] = result;
      return result;
    };
    _proto._propogateResolverMetadata = function _propogateResolverMetadata(fieldPath, cachedSnapshot, resolverError, seenRecord, suspenseID, updatedDataIDs) {
      if (cachedSnapshot != null) {
        if (cachedSnapshot.missingRequiredFields != null) {
          this._addMissingRequiredFields(cachedSnapshot.missingRequiredFields);
        }
        if (cachedSnapshot.missingClientEdges != null) {
          var _iterator = (0, _createForOfIteratorHelper2["default"])(cachedSnapshot.missingClientEdges), _step;
          try {
            for (_iterator.s();!(_step = _iterator.n()).done; ) {
              var missing = _step.value;
              this._missingClientEdges.push(missing);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
        if (cachedSnapshot.missingLiveResolverFields != null) {
          this._isMissingData = this._isMissingData || cachedSnapshot.missingLiveResolverFields.length > 0;
          var _iterator2 = (0, _createForOfIteratorHelper2["default"])(cachedSnapshot.missingLiveResolverFields), _step2;
          try {
            for (_iterator2.s();!(_step2 = _iterator2.n()).done; ) {
              var missingResolverField = _step2.value;
              this._missingLiveResolverFields.push(missingResolverField);
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
        var _iterator3 = (0, _createForOfIteratorHelper2["default"])(cachedSnapshot.relayResolverErrors), _step3;
        try {
          for (_iterator3.s();!(_step3 = _iterator3.n()).done; ) {
            var error = _step3.value;
            this._resolverErrors.push(error);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        this._isMissingData = this._isMissingData || cachedSnapshot.isMissingData;
      }
      if (resolverError) {
        this._resolverErrors.push({
          field: {
            path: fieldPath,
            owner: this._fragmentName
          },
          error: resolverError
        });
      }
      if (seenRecord != null) {
        this._seenRecords.add(seenRecord);
      }
      if (suspenseID != null) {
        this._isMissingData = true;
        this._missingLiveResolverFields.push({
          path: "".concat(this._fragmentName, ".").concat(fieldPath),
          liveStateID: suspenseID
        });
      }
      if (updatedDataIDs != null) {
        var _iterator4 = (0, _createForOfIteratorHelper2["default"])(updatedDataIDs), _step4;
        try {
          for (_iterator4.s();!(_step4 = _iterator4.n()).done; ) {
            var recordID = _step4.value;
            this._updatedDataIDs.add(recordID);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    };
    _proto._readClientEdge = function _readClientEdge(field, record, data) {
      var _backingField$alias;
      var backingField = field.backingField;
      !(backingField.kind !== "ClientExtension") && invariant(false, "Client extension client edges are not yet implemented.");
      var applicationName = (_backingField$alias = backingField.alias) !== null && _backingField$alias !== undefined ? _backingField$alias : backingField.name;
      var backingFieldData = {};
      this._traverseSelections([backingField], record, backingFieldData);
      var clientEdgeResolverResponse = backingFieldData[applicationName];
      if (clientEdgeResolverResponse == null || isSuspenseSentinel(clientEdgeResolverResponse)) {
        data[applicationName] = clientEdgeResolverResponse;
        return clientEdgeResolverResponse;
      }
      var validClientEdgeResolverResponse = assertValidClientEdgeResolverResponse(field, clientEdgeResolverResponse);
      switch (validClientEdgeResolverResponse.kind) {
        case "PluralConcrete":
          var storeIDs = getStoreIDsForPluralClientEdgeResolver(field, validClientEdgeResolverResponse.ids, this._resolverCache);
          this._clientEdgeTraversalPath.push(null);
          var edgeValues = this._readLinkedIds(field.linkedField, storeIDs, record, data);
          this._clientEdgeTraversalPath.pop();
          data[applicationName] = edgeValues;
          return edgeValues;
        case "SingularConcrete":
          var _getStoreIDAndTravers = getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver(field, validClientEdgeResolverResponse.id, this._resolverCache), storeID = _getStoreIDAndTravers[0], traversalPathSegment = _getStoreIDAndTravers[1];
          this._clientEdgeTraversalPath.push(traversalPathSegment);
          var prevData = data[applicationName];
          !(prevData == null || typeof prevData === "object") && invariant(false, "RelayReader(): Expected data for field `%s` on record `%s` to be an object, got `%s`.", applicationName, RelayModernRecord.getDataID(record), prevData);
          var edgeValue = this._traverse(field.linkedField, storeID, prevData);
          this._clientEdgeTraversalPath.pop();
          data[applicationName] = edgeValue;
          return edgeValue;
        default:
          validClientEdgeResolverResponse.kind;
      }
    };
    _proto._readScalar = function _readScalar(field, record, data) {
      var _field$alias2;
      var applicationName = (_field$alias2 = field.alias) !== null && _field$alias2 !== undefined ? _field$alias2 : field.name;
      var storageKey = getStorageKey(field, this._variables);
      var value = RelayModernRecord.getValue(record, storageKey);
      if (value === undefined) {
        this._markDataAsMissing();
      }
      data[applicationName] = value;
      return value;
    };
    _proto._readLink = function _readLink(field, record, data) {
      var _field$alias3;
      var applicationName = (_field$alias3 = field.alias) !== null && _field$alias3 !== undefined ? _field$alias3 : field.name;
      var storageKey = getStorageKey(field, this._variables);
      var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
      if (linkedID == null) {
        data[applicationName] = linkedID;
        if (linkedID === undefined) {
          this._markDataAsMissing();
        }
        return linkedID;
      }
      var prevData = data[applicationName];
      !(prevData == null || typeof prevData === "object") && invariant(false, "RelayReader(): Expected data for field `%s` on record `%s` to be an object, got `%s`.", applicationName, RelayModernRecord.getDataID(record), prevData);
      var value = this._traverse(field, linkedID, prevData);
      data[applicationName] = value;
      return value;
    };
    _proto._readActorChange = function _readActorChange(field, record, data) {
      var _field$alias4;
      var applicationName = (_field$alias4 = field.alias) !== null && _field$alias4 !== undefined ? _field$alias4 : field.name;
      var storageKey = getStorageKey(field, this._variables);
      var externalRef = RelayModernRecord.getActorLinkedRecordID(record, storageKey);
      if (externalRef == null) {
        data[applicationName] = externalRef;
        if (externalRef === undefined) {
          this._markDataAsMissing();
        }
        return data[applicationName];
      }
      var actorIdentifier = externalRef[0], dataID = externalRef[1];
      var fragmentRef = {};
      this._createFragmentPointer(field.fragmentSpread, RelayModernRecord.fromObject({
        __id: dataID
      }), fragmentRef);
      data[applicationName] = {
        __fragmentRef: fragmentRef,
        __viewer: actorIdentifier
      };
      return data[applicationName];
    };
    _proto._readPluralLink = function _readPluralLink(field, record, data) {
      var storageKey = getStorageKey(field, this._variables);
      var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
      return this._readLinkedIds(field, linkedIDs, record, data);
    };
    _proto._readLinkedIds = function _readLinkedIds(field, linkedIDs, record, data) {
      var _this2 = this;
      var _field$alias5;
      var applicationName = (_field$alias5 = field.alias) !== null && _field$alias5 !== undefined ? _field$alias5 : field.name;
      if (linkedIDs == null) {
        data[applicationName] = linkedIDs;
        if (linkedIDs === undefined) {
          this._markDataAsMissing();
        }
        return linkedIDs;
      }
      var prevData = data[applicationName];
      !(prevData == null || Array.isArray(prevData)) && invariant(false, "RelayReader(): Expected data for field `%s` on record `%s` to be an array, got `%s`.", applicationName, RelayModernRecord.getDataID(record), prevData);
      var linkedArray = prevData || [];
      linkedIDs.forEach(function(linkedID, nextIndex) {
        if (linkedID == null) {
          if (linkedID === undefined) {
            _this2._markDataAsMissing();
          }
          linkedArray[nextIndex] = linkedID;
          return;
        }
        var prevItem = linkedArray[nextIndex];
        !(prevItem == null || typeof prevItem === "object") && invariant(false, "RelayReader(): Expected data for field `%s` on record `%s` to be an object, got `%s`.", applicationName, RelayModernRecord.getDataID(record), prevItem);
        linkedArray[nextIndex] = _this2._traverse(field, linkedID, prevItem);
      });
      data[applicationName] = linkedArray;
      return linkedArray;
    };
    _proto._readModuleImport = function _readModuleImport(moduleImport, record, data) {
      var componentKey = getModuleComponentKey(moduleImport.documentName);
      var component = RelayModernRecord.getValue(record, componentKey);
      if (component == null) {
        if (component === undefined) {
          this._markDataAsMissing();
        }
        return;
      }
      this._createFragmentPointer({
        kind: "FragmentSpread",
        name: moduleImport.fragmentName,
        args: moduleImport.args
      }, record, data);
      data[FRAGMENT_PROP_NAME_KEY] = moduleImport.fragmentPropName;
      data[MODULE_COMPONENT_KEY] = component;
    };
    _proto._createAliasedFragmentSpread = function _createAliasedFragmentSpread(namedFragmentSpread, record) {
      var abstractKey = namedFragmentSpread.abstractKey;
      if (abstractKey == null) {
        var typeName = RelayModernRecord.getType(record);
        if (typeName == null || typeName !== namedFragmentSpread.type) {
          return null;
        }
      } else {
        var implementsInterface = this._implementsInterface(record, abstractKey);
        if (implementsInterface === false) {
          return null;
        } else if (implementsInterface == null) {
          this._markDataAsMissing();
          return;
        }
      }
      var fieldData = {};
      this._createFragmentPointer(namedFragmentSpread.fragment, record, fieldData);
      return RelayModernRecord.fromObject(fieldData);
    };
    _proto._readInlineFragment = function _readInlineFragment(inlineFragment, record, data) {
      var abstractKey = inlineFragment.abstractKey;
      if (abstractKey == null) {
        var typeName = RelayModernRecord.getType(record);
        if (typeName == null || typeName !== inlineFragment.type) {
          return null;
        } else {
          var hasExpectedData = this._traverseSelections(inlineFragment.selections, record, data);
          if (!hasExpectedData) {
            return false;
          }
        }
      } else {
        var implementsInterface = this._implementsInterface(record, abstractKey);
        var parentIsMissingData = this._isMissingData;
        var parentIsWithinUnmatchedTypeRefinement = this._isWithinUnmatchedTypeRefinement;
        this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement || implementsInterface === false;
        this._traverseSelections(inlineFragment.selections, record, data);
        this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement;
        if (implementsInterface === false) {
          this._isMissingData = parentIsMissingData;
          return;
        } else if (implementsInterface == null) {
          this._markDataAsMissing();
          return null;
        }
      }
      return data;
    };
    _proto._createFragmentPointer = function _createFragmentPointer(fragmentSpread, record, data) {
      var fragmentPointers = data[FRAGMENTS_KEY];
      if (fragmentPointers == null) {
        fragmentPointers = data[FRAGMENTS_KEY] = {};
      }
      !(typeof fragmentPointers === "object" && fragmentPointers != null) && invariant(false, "RelayReader: Expected fragment spread data to be an object, got `%s`.", fragmentPointers);
      if (data[ID_KEY] == null) {
        data[ID_KEY] = RelayModernRecord.getDataID(record);
      }
      fragmentPointers[fragmentSpread.name] = getArgumentValues(fragmentSpread.args, this._variables, this._isWithinUnmatchedTypeRefinement);
      data[FRAGMENT_OWNER_KEY] = this._owner;
      if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
        if (this._clientEdgeTraversalPath.length > 0 && this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1] !== null) {
          data[CLIENT_EDGE_TRAVERSAL_PATH] = (0, _toConsumableArray2["default"])(this._clientEdgeTraversalPath);
        }
      }
    };
    _proto._createInlineDataOrResolverFragmentPointer = function _createInlineDataOrResolverFragmentPointer(fragmentSpreadOrFragment, record, data) {
      var fragmentPointers = data[FRAGMENTS_KEY];
      if (fragmentPointers == null) {
        fragmentPointers = data[FRAGMENTS_KEY] = {};
      }
      !(typeof fragmentPointers === "object" && fragmentPointers != null) && invariant(false, "RelayReader: Expected fragment spread data to be an object, got `%s`.", fragmentPointers);
      if (data[ID_KEY] == null) {
        data[ID_KEY] = RelayModernRecord.getDataID(record);
      }
      var inlineData = {};
      var parentFragmentName = this._fragmentName;
      this._fragmentName = fragmentSpreadOrFragment.name;
      var parentVariables = this._variables;
      var argumentVariables = fragmentSpreadOrFragment.args ? getArgumentValues(fragmentSpreadOrFragment.args, this._variables) : {};
      this._variables = RelayConcreteVariables.getFragmentVariables(fragmentSpreadOrFragment, this._owner.variables, argumentVariables);
      this._traverseSelections(fragmentSpreadOrFragment.selections, record, inlineData);
      this._variables = parentVariables;
      this._fragmentName = parentFragmentName;
      fragmentPointers[fragmentSpreadOrFragment.name] = inlineData;
    };
    _proto._addMissingRequiredFields = function _addMissingRequiredFields(additional) {
      if (this._missingRequiredFields == null) {
        this._missingRequiredFields = additional;
        return;
      }
      if (this._missingRequiredFields.action === "THROW") {
        return;
      }
      if (additional.action === "THROW") {
        this._missingRequiredFields = additional;
        return;
      }
      this._missingRequiredFields = {
        action: "LOG",
        fields: [].concat((0, _toConsumableArray2["default"])(this._missingRequiredFields.fields), (0, _toConsumableArray2["default"])(additional.fields))
      };
    };
    _proto._implementsInterface = function _implementsInterface(record, abstractKey) {
      var typeName = RelayModernRecord.getType(record);
      var typeRecord = this._recordSource.get(generateTypeID(typeName));
      var implementsInterface = typeRecord != null ? RelayModernRecord.getValue(typeRecord, abstractKey) : null;
      return implementsInterface;
    };
    return RelayReader2;
  }();
  module.exports = {
    read
  };
});

// node_modules/relay-runtime/lib/store/RelayPublishQueue.js
var require_RelayPublishQueue = __commonJS((exports, module) => {
  var lookupSelector = function(source, selector) {
    var selectorData = RelayReader.read(source, selector).data;
    if (true) {
      var deepFreeze = require_deepFreeze();
      if (selectorData) {
        deepFreeze(selectorData);
      }
    }
    return selectorData;
  };
  var _global$ErrorUtils$ap;
  var _global$ErrorUtils;
  var RelayRecordSourceMutator = require_RelayRecordSourceMutator();
  var RelayRecordSourceProxy = require_RelayRecordSourceProxy();
  var RelayRecordSourceSelectorProxy = require_RelayRecordSourceSelectorProxy();
  var RelayReader = require_RelayReader();
  var RelayRecordSource = require_RelayRecordSource();
  var invariant = require_browser();
  var warning = require_warning();
  var _global = typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : undefined;
  var applyWithGuard = (_global$ErrorUtils$ap = _global === null || _global === undefined ? undefined : (_global$ErrorUtils = _global.ErrorUtils) === null || _global$ErrorUtils === undefined ? undefined : _global$ErrorUtils.applyWithGuard) !== null && _global$ErrorUtils$ap !== undefined ? _global$ErrorUtils$ap : function(callback, context, args, onError, name) {
    return callback.apply(context, args);
  };
  var RelayPublishQueue = function() {
    function RelayPublishQueue2(store, handlerProvider, getDataID, missingFieldHandlers) {
      this._hasStoreSnapshot = false;
      this._handlerProvider = handlerProvider || null;
      this._pendingBackupRebase = false;
      this._pendingData = new Set;
      this._pendingOptimisticUpdates = new Set;
      this._store = store;
      this._appliedOptimisticUpdates = new Set;
      this._gcHold = null;
      this._getDataID = getDataID;
      this._missingFieldHandlers = missingFieldHandlers;
    }
    var _proto = RelayPublishQueue2.prototype;
    _proto.applyUpdate = function applyUpdate(updater) {
      !(!this._appliedOptimisticUpdates.has(updater) && !this._pendingOptimisticUpdates.has(updater)) && invariant(false, "RelayPublishQueue: Cannot apply the same update function more than once concurrently.");
      this._pendingOptimisticUpdates.add(updater);
    };
    _proto.revertUpdate = function revertUpdate(updater) {
      if (this._pendingOptimisticUpdates.has(updater)) {
        this._pendingOptimisticUpdates["delete"](updater);
      } else if (this._appliedOptimisticUpdates.has(updater)) {
        this._pendingBackupRebase = true;
        this._appliedOptimisticUpdates["delete"](updater);
      }
    };
    _proto.revertAll = function revertAll() {
      this._pendingBackupRebase = true;
      this._pendingOptimisticUpdates.clear();
      this._appliedOptimisticUpdates.clear();
    };
    _proto.commitPayload = function commitPayload(operation, payload, updater) {
      this._pendingBackupRebase = true;
      this._pendingData.add({
        kind: "payload",
        operation,
        payload,
        updater
      });
    };
    _proto.commitUpdate = function commitUpdate(updater) {
      this._pendingBackupRebase = true;
      this._pendingData.add({
        kind: "updater",
        updater
      });
    };
    _proto.commitSource = function commitSource(source) {
      this._pendingBackupRebase = true;
      this._pendingData.add({
        kind: "source",
        source
      });
    };
    _proto.run = function run(sourceOperation) {
      var runWillClearGcHold = this._appliedOptimisticUpdates === 0 && !!this._gcHold;
      var runIsANoop = !this._pendingBackupRebase && this._pendingOptimisticUpdates.size === 0 && !runWillClearGcHold;
      if (true) {
        warning(!runIsANoop, "RelayPublishQueue.run was called, but the call would have been a noop.");
        warning(this._isRunning !== true, "A store update was detected within another store update. Please make sure new store updates aren't being executed within an updater function for a different update.");
        this._isRunning = true;
      }
      if (runIsANoop) {
        if (true) {
          this._isRunning = false;
        }
        return [];
      }
      if (this._pendingBackupRebase) {
        if (this._hasStoreSnapshot) {
          this._store.restore();
          this._hasStoreSnapshot = false;
        }
      }
      var invalidatedStore = this._commitData();
      if (this._pendingOptimisticUpdates.size || this._pendingBackupRebase && this._appliedOptimisticUpdates.size) {
        if (!this._hasStoreSnapshot) {
          this._store.snapshot();
          this._hasStoreSnapshot = true;
        }
        this._applyUpdates();
      }
      this._pendingBackupRebase = false;
      if (this._appliedOptimisticUpdates.size > 0) {
        if (!this._gcHold) {
          this._gcHold = this._store.holdGC();
        }
      } else {
        if (this._gcHold) {
          this._gcHold.dispose();
          this._gcHold = null;
        }
      }
      if (true) {
        this._isRunning = false;
      }
      return this._store.notify(sourceOperation, invalidatedStore);
    };
    _proto._publishSourceFromPayload = function _publishSourceFromPayload(pendingPayload) {
      var _this = this;
      var { payload, operation, updater } = pendingPayload;
      var { source, fieldPayloads } = payload;
      var mutator = new RelayRecordSourceMutator(this._store.getSource(), source);
      var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, this._handlerProvider, this._missingFieldHandlers);
      if (fieldPayloads && fieldPayloads.length) {
        fieldPayloads.forEach(function(fieldPayload) {
          var handler = _this._handlerProvider && _this._handlerProvider(fieldPayload.handle);
          !handler && invariant(false, "RelayModernEnvironment: Expected a handler to be provided for handle `%s`.", fieldPayload.handle);
          handler.update(recordSourceProxy, fieldPayload);
        });
      }
      if (updater) {
        var selector = operation.fragment;
        !(selector != null) && invariant(false, "RelayModernEnvironment: Expected a selector to be provided with updater function.");
        var recordSourceSelectorProxy = new RelayRecordSourceSelectorProxy(mutator, recordSourceProxy, selector, this._missingFieldHandlers);
        var selectorData = lookupSelector(source, selector);
        updater(recordSourceSelectorProxy, selectorData);
      }
      var idsMarkedForInvalidation = recordSourceProxy.getIDsMarkedForInvalidation();
      this._store.publish(source, idsMarkedForInvalidation);
      return recordSourceProxy.isStoreMarkedForInvalidation();
    };
    _proto._commitData = function _commitData() {
      var _this2 = this;
      if (!this._pendingData.size) {
        return false;
      }
      var invalidatedStore = false;
      this._pendingData.forEach(function(data) {
        if (data.kind === "payload") {
          var payloadInvalidatedStore = _this2._publishSourceFromPayload(data);
          invalidatedStore = invalidatedStore || payloadInvalidatedStore;
        } else if (data.kind === "source") {
          var source = data.source;
          _this2._store.publish(source);
        } else {
          var updater = data.updater;
          var sink = RelayRecordSource.create();
          var mutator = new RelayRecordSourceMutator(_this2._store.getSource(), sink);
          var recordSourceProxy = new RelayRecordSourceProxy(mutator, _this2._getDataID, _this2._handlerProvider, _this2._missingFieldHandlers);
          applyWithGuard(updater, null, [recordSourceProxy], null, "RelayPublishQueue:commitData");
          invalidatedStore = invalidatedStore || recordSourceProxy.isStoreMarkedForInvalidation();
          var idsMarkedForInvalidation = recordSourceProxy.getIDsMarkedForInvalidation();
          _this2._store.publish(sink, idsMarkedForInvalidation);
        }
      });
      this._pendingData.clear();
      return invalidatedStore;
    };
    _proto._applyUpdates = function _applyUpdates() {
      var _this3 = this;
      var sink = RelayRecordSource.create();
      var mutator = new RelayRecordSourceMutator(this._store.getSource(), sink);
      var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, this._handlerProvider, this._missingFieldHandlers);
      var processUpdate = function processUpdate(optimisticUpdate) {
        if (optimisticUpdate.storeUpdater) {
          var storeUpdater = optimisticUpdate.storeUpdater;
          applyWithGuard(storeUpdater, null, [recordSourceProxy], null, "RelayPublishQueue:applyUpdates");
        } else {
          var { operation, payload, updater } = optimisticUpdate;
          var { source, fieldPayloads } = payload;
          if (source) {
            recordSourceProxy.publishSource(source, fieldPayloads);
          }
          if (updater) {
            var selectorData;
            if (source) {
              selectorData = lookupSelector(source, operation.fragment);
            }
            var recordSourceSelectorProxy = new RelayRecordSourceSelectorProxy(mutator, recordSourceProxy, operation.fragment, _this3._missingFieldHandlers);
            applyWithGuard(updater, null, [recordSourceSelectorProxy, selectorData], null, "RelayPublishQueue:applyUpdates");
          }
        }
      };
      if (this._pendingBackupRebase && this._appliedOptimisticUpdates.size) {
        this._appliedOptimisticUpdates.forEach(processUpdate);
      }
      if (this._pendingOptimisticUpdates.size) {
        this._pendingOptimisticUpdates.forEach(function(optimisticUpdate) {
          processUpdate(optimisticUpdate);
          _this3._appliedOptimisticUpdates.add(optimisticUpdate);
        });
        this._pendingOptimisticUpdates.clear();
      }
      this._store.publish(sink);
    };
    return RelayPublishQueue2;
  }();
  module.exports = RelayPublishQueue;
});

// node_modules/relay-runtime/lib/store/StoreInspector.js
var require_StoreInspector = __commonJS((exports, module) => {
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
  var inspect = function inspect() {
  };
  if (true) {
    formattersInstalled = false;
    installDevtoolFormatters = function installDevtoolFormatters() {
      var _window$devtoolsForma;
      if (formattersInstalled) {
        return;
      }
      formattersInstalled = true;
      if (window.devtoolsFormatters == null) {
        window.devtoolsFormatters = [];
      }
      if (!Array.isArray(window.devtoolsFormatters)) {
        return;
      }
      console.info('Make sure to select "Enable custom formatters" in the Chrome Developer Tools settings, tab "Preferences" under the "Console" section.');
      (_window$devtoolsForma = window.devtoolsFormatters).push.apply(_window$devtoolsForma, (0, _toConsumableArray2["default"])(createFormatters()));
    };
    createFormatters = function createFormatters() {
      var listStyle = {
        style: "list-style-type: none; padding: 0; margin: 0 0 0 12px; font-style: normal"
      };
      var keyStyle = {
        style: "rgb(136, 19, 145)"
      };
      var nullStyle = {
        style: "color: #777"
      };
      var reference = function reference(object, config) {
        return object == null ? ["span", nullStyle, "undefined"] : ["object", {
          object,
          config
        }];
      };
      var renderRecordHeader = function renderRecordHeader(record) {
        return ["span", {
          style: "font-style: italic"
        }, record.__typename, ["span", nullStyle, ' {id: "', record.__id, '", \u2026}']];
      };
      var isRecord = function isRecord(o) {
        return o != null && typeof o.__id === "string";
      };
      var RecordEntry = function RecordEntry(key, value) {
        this.key = key;
        this.value = value;
      };
      var renderRecordEntries = function renderRecordEntries(record) {
        var children = Object.keys(record).map(function(key) {
          return ["li", {}, ["object", {
            object: new RecordEntry(key, record[key])
          }]];
        });
        return ["ol", listStyle].concat((0, _toConsumableArray2["default"])(children));
      };
      var recordFormatter = {
        header: function header(obj) {
          if (!isRecord(obj)) {
            return null;
          }
          return renderRecordHeader(obj);
        },
        hasBody: function hasBody(obj) {
          return true;
        },
        body: function body(obj) {
          return renderRecordEntries(obj);
        }
      };
      var recordEntryFormatter = {
        header: function header(obj) {
          if (obj instanceof RecordEntry) {
            var value = isRecord(obj.value) ? renderRecordHeader(obj.value) : reference(obj.value);
            return ["span", keyStyle, obj.key, ": ", value];
          }
          return null;
        },
        hasBody: function hasBody(obj) {
          return isRecord(obj.value);
        },
        body: function body(obj) {
          return renderRecordEntries(obj.value);
        }
      };
      return [recordFormatter, recordEntryFormatter];
    };
    getWrappedRecord = function getWrappedRecord(source, dataID) {
      var record = source.get(dataID);
      if (record == null) {
        return record;
      }
      return new Proxy((0, _objectSpread2["default"])({}, record), {
        get: function get(target, prop) {
          var value = target[prop];
          if (value == null) {
            return value;
          }
          if (typeof value === "object") {
            if (typeof value.__ref === "string") {
              return getWrappedRecord(source, value.__ref);
            }
            if (Array.isArray(value.__refs)) {
              return value.__refs.map(function(ref) {
                return getWrappedRecord(source, ref);
              });
            }
          }
          return value;
        }
      });
    };
    inspect = function inspect(environment, dataID) {
      installDevtoolFormatters();
      return getWrappedRecord(environment.getStore().getSource(), dataID !== null && dataID !== undefined ? dataID : "client:root");
    };
  }
  var formattersInstalled;
  var installDevtoolFormatters;
  var createFormatters;
  var getWrappedRecord;
  module.exports = {
    inspect
  };
});

// node_modules/relay-runtime/lib/store/RelayModernEnvironment.js
var require_RelayModernEnvironment = __commonJS((exports, module) => {
  var operationHasClientAbstractTypes = function(operation) {
    return operation.root.node.kind === "Operation" && operation.root.node.clientAbstractTypes != null;
  };
  var emptyFunction = function() {
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var RelayDefaultHandlerProvider = require_RelayDefaultHandlerProvider();
  var _require = require_ActorIdentifier();
  var INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = _require.INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE;
  var assertInternalActorIdentifier = _require.assertInternalActorIdentifier;
  var RelayObservable = require_RelayObservable();
  var wrapNetworkWithLogObserver = require_wrapNetworkWithLogObserver();
  var RelayOperationTracker = require_RelayOperationTracker();
  var registerEnvironmentWithDevTools = require_registerEnvironmentWithDevTools();
  var defaultGetDataID = require_defaultGetDataID();
  var defaultRequiredFieldLogger = require_defaultRequiredFieldLogger();
  var normalizeResponse = require_normalizeResponse();
  var OperationExecutor = require_OperationExecutor();
  var RelayPublishQueue = require_RelayPublishQueue();
  var RelayRecordSource = require_RelayRecordSource();
  var invariant = require_browser();
  var RelayModernEnvironment = function() {
    function RelayModernEnvironment2(config) {
      var _this = this;
      var _config$log, _config$requiredField, _config$UNSTABLE_defa, _config$getDataID, _config$missingFieldH, _config$handlerProvid, _config$scheduler, _config$isServer, _config$normalizeResp, _config$operationTrac;
      this.configName = config.configName;
      this._treatMissingFieldsAsNull = config.treatMissingFieldsAsNull === true;
      var operationLoader = config.operationLoader;
      if (true) {
        if (operationLoader != null) {
          !(typeof operationLoader === "object" && typeof operationLoader.get === "function" && typeof operationLoader.load === "function") && invariant(false, "RelayModernEnvironment: Expected `operationLoader` to be an object with get() and load() functions, got `%s`.", operationLoader);
        }
      }
      this.__log = (_config$log = config.log) !== null && _config$log !== undefined ? _config$log : emptyFunction;
      this.requiredFieldLogger = (_config$requiredField = config.requiredFieldLogger) !== null && _config$requiredField !== undefined ? _config$requiredField : defaultRequiredFieldLogger;
      this._defaultRenderPolicy = (_config$UNSTABLE_defa = config.UNSTABLE_defaultRenderPolicy) !== null && _config$UNSTABLE_defa !== undefined ? _config$UNSTABLE_defa : "partial";
      this._operationLoader = operationLoader;
      this._operationExecutions = new Map;
      this._network = wrapNetworkWithLogObserver(this, config.network);
      this._getDataID = (_config$getDataID = config.getDataID) !== null && _config$getDataID !== undefined ? _config$getDataID : defaultGetDataID;
      this._missingFieldHandlers = (_config$missingFieldH = config.missingFieldHandlers) !== null && _config$missingFieldH !== undefined ? _config$missingFieldH : [];
      this._publishQueue = new RelayPublishQueue(config.store, (_config$handlerProvid = config.handlerProvider) !== null && _config$handlerProvid !== undefined ? _config$handlerProvid : RelayDefaultHandlerProvider, this._getDataID, this._missingFieldHandlers);
      this._scheduler = (_config$scheduler = config.scheduler) !== null && _config$scheduler !== undefined ? _config$scheduler : null;
      this._store = config.store;
      this.options = config.options;
      this._isServer = (_config$isServer = config.isServer) !== null && _config$isServer !== undefined ? _config$isServer : false;
      this._normalizeResponse = (_config$normalizeResp = config.normalizeResponse) !== null && _config$normalizeResp !== undefined ? _config$normalizeResp : normalizeResponse;
      this.__setNet = function(newNet) {
        return _this._network = wrapNetworkWithLogObserver(_this, newNet);
      };
      if (true) {
        var _require2 = require_StoreInspector(), inspect = _require2.inspect;
        this.DEBUG_inspect = function(dataID) {
          return inspect(_this, dataID);
        };
      }
      this._operationTracker = (_config$operationTrac = config.operationTracker) !== null && _config$operationTrac !== undefined ? _config$operationTrac : new RelayOperationTracker;
      this._shouldProcessClientComponents = config.shouldProcessClientComponents;
      registerEnvironmentWithDevTools(this);
    }
    var _proto = RelayModernEnvironment2.prototype;
    _proto.getStore = function getStore() {
      return this._store;
    };
    _proto.getNetwork = function getNetwork() {
      return this._network;
    };
    _proto.getOperationTracker = function getOperationTracker() {
      return this._operationTracker;
    };
    _proto.getScheduler = function getScheduler() {
      return this._scheduler;
    };
    _proto.isRequestActive = function isRequestActive(requestIdentifier) {
      var activeState = this._operationExecutions.get(requestIdentifier);
      return activeState === "active";
    };
    _proto.UNSTABLE_getDefaultRenderPolicy = function UNSTABLE_getDefaultRenderPolicy() {
      return this._defaultRenderPolicy;
    };
    _proto.applyUpdate = function applyUpdate(optimisticUpdate) {
      var _this2 = this;
      var dispose = function dispose() {
        _this2._scheduleUpdates(function() {
          _this2._publishQueue.revertUpdate(optimisticUpdate);
          _this2._publishQueue.run();
        });
      };
      this._scheduleUpdates(function() {
        _this2._publishQueue.applyUpdate(optimisticUpdate);
        _this2._publishQueue.run();
      });
      return {
        dispose
      };
    };
    _proto.revertUpdate = function revertUpdate(update) {
      var _this3 = this;
      this._scheduleUpdates(function() {
        _this3._publishQueue.revertUpdate(update);
        _this3._publishQueue.run();
      });
    };
    _proto.replaceUpdate = function replaceUpdate(update, newUpdate) {
      var _this4 = this;
      this._scheduleUpdates(function() {
        _this4._publishQueue.revertUpdate(update);
        _this4._publishQueue.applyUpdate(newUpdate);
        _this4._publishQueue.run();
      });
    };
    _proto.applyMutation = function applyMutation(optimisticConfig) {
      var subscription = this._execute({
        createSource: function createSource() {
          return RelayObservable.create(function(_sink) {
          });
        },
        isClientPayload: false,
        operation: optimisticConfig.operation,
        optimisticConfig,
        updater: null
      }).subscribe({});
      return {
        dispose: function dispose() {
          return subscription.unsubscribe();
        }
      };
    };
    _proto.check = function check(operation) {
      if (this._missingFieldHandlers.length === 0 && !operationHasClientAbstractTypes(operation)) {
        return this._store.check(operation);
      }
      return this._checkSelectorAndHandleMissingFields(operation, this._missingFieldHandlers);
    };
    _proto.commitPayload = function commitPayload(operation, payload) {
      this._execute({
        createSource: function createSource() {
          return RelayObservable.from({
            data: payload
          });
        },
        isClientPayload: true,
        operation,
        optimisticConfig: null,
        updater: null
      }).subscribe({});
    };
    _proto.commitUpdate = function commitUpdate(updater) {
      var _this5 = this;
      this._scheduleUpdates(function() {
        _this5._publishQueue.commitUpdate(updater);
        _this5._publishQueue.run();
      });
    };
    _proto.lookup = function lookup(readSelector) {
      return this._store.lookup(readSelector);
    };
    _proto.subscribe = function subscribe(snapshot, callback) {
      return this._store.subscribe(snapshot, callback);
    };
    _proto.retain = function retain(operation) {
      return this._store.retain(operation);
    };
    _proto.isServer = function isServer() {
      return this._isServer;
    };
    _proto._checkSelectorAndHandleMissingFields = function _checkSelectorAndHandleMissingFields(operation, handlers) {
      var _this6 = this;
      var target = RelayRecordSource.create();
      var source = this._store.getSource();
      var result = this._store.check(operation, {
        handlers,
        defaultActorIdentifier: INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE,
        getSourceForActor: function getSourceForActor(actorIdentifier) {
          assertInternalActorIdentifier(actorIdentifier);
          return source;
        },
        getTargetForActor: function getTargetForActor(actorIdentifier) {
          assertInternalActorIdentifier(actorIdentifier);
          return target;
        }
      });
      if (target.size() > 0) {
        this._scheduleUpdates(function() {
          _this6._publishQueue.commitSource(target);
          _this6._publishQueue.run();
        });
      }
      return result;
    };
    _proto._scheduleUpdates = function _scheduleUpdates(task) {
      var scheduler = this._scheduler;
      if (scheduler != null) {
        scheduler.schedule(task);
      } else {
        task();
      }
    };
    _proto.execute = function execute(_ref) {
      var _this7 = this;
      var operation = _ref.operation;
      return this._execute({
        createSource: function createSource() {
          return _this7.getNetwork().execute(operation.request.node.params, operation.request.variables, operation.request.cacheConfig || {}, null);
        },
        isClientPayload: false,
        operation,
        optimisticConfig: null,
        updater: null
      });
    };
    _proto.executeSubscription = function executeSubscription(_ref2) {
      var _this8 = this;
      var { operation, updater } = _ref2;
      return this._execute({
        createSource: function createSource() {
          return _this8.getNetwork().execute(operation.request.node.params, operation.request.variables, operation.request.cacheConfig || {}, null);
        },
        isClientPayload: false,
        operation,
        optimisticConfig: null,
        updater
      });
    };
    _proto.executeMutation = function executeMutation(_ref3) {
      var _this9 = this;
      var { operation, optimisticResponse, optimisticUpdater, updater, uploadables } = _ref3;
      var optimisticConfig;
      if (optimisticResponse || optimisticUpdater) {
        optimisticConfig = {
          operation,
          response: optimisticResponse,
          updater: optimisticUpdater
        };
      }
      return this._execute({
        createSource: function createSource() {
          return _this9.getNetwork().execute(operation.request.node.params, operation.request.variables, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, operation.request.cacheConfig), {}, {
            force: true
          }), uploadables);
        },
        isClientPayload: false,
        operation,
        optimisticConfig,
        updater
      });
    };
    _proto.executeWithSource = function executeWithSource(_ref4) {
      var { operation, source } = _ref4;
      return this._execute({
        createSource: function createSource() {
          return source;
        },
        isClientPayload: false,
        operation,
        optimisticConfig: null,
        updater: null
      });
    };
    _proto.toJSON = function toJSON() {
      var _this$configName;
      return "RelayModernEnvironment(".concat((_this$configName = this.configName) !== null && _this$configName !== undefined ? _this$configName : "", ")");
    };
    _proto._execute = function _execute(_ref5) {
      var _this10 = this;
      var { createSource, isClientPayload, operation, optimisticConfig, updater } = _ref5;
      var publishQueue = this._publishQueue;
      var store = this._store;
      return RelayObservable.create(function(sink) {
        var executor = OperationExecutor.execute({
          actorIdentifier: INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE,
          getDataID: _this10._getDataID,
          isClientPayload,
          log: _this10.__log,
          operation,
          operationExecutions: _this10._operationExecutions,
          operationLoader: _this10._operationLoader,
          operationTracker: _this10._operationTracker,
          optimisticConfig,
          getPublishQueue: function getPublishQueue(actorIdentifier) {
            assertInternalActorIdentifier(actorIdentifier);
            return publishQueue;
          },
          scheduler: _this10._scheduler,
          shouldProcessClientComponents: _this10._shouldProcessClientComponents,
          sink,
          source: createSource(),
          getStore: function getStore(actorIdentifier) {
            assertInternalActorIdentifier(actorIdentifier);
            return store;
          },
          treatMissingFieldsAsNull: _this10._treatMissingFieldsAsNull,
          updater,
          normalizeResponse: _this10._normalizeResponse
        });
        return function() {
          return executor.cancel();
        };
      });
    };
    return RelayModernEnvironment2;
  }();
  RelayModernEnvironment.prototype["@@RelayModernEnvironment"] = true;
  module.exports = RelayModernEnvironment;
});

// node_modules/relay-runtime/lib/util/resolveImmediate.js
var require_resolveImmediate = __commonJS((exports, module) => {
  var resolveImmediate = function(callback) {
    resolvedPromise.then(callback)["catch"](throwNext);
  };
  var throwNext = function(error) {
    setTimeout(function() {
      throw error;
    }, 0);
  };
  var resolvedPromise = Promise.resolve();
  module.exports = resolveImmediate;
});

// node_modules/relay-runtime/lib/store/cloneRelayHandleSourceField.js
var require_cloneRelayHandleSourceField = __commonJS((exports, module) => {
  var cloneRelayHandleSourceField = function(handleField, selections, variables) {
    var sourceField = selections.find(function(source) {
      return source.kind === LINKED_FIELD && source.name === handleField.name && source.alias === handleField.alias && areEqual(source.args, handleField.args);
    });
    !(sourceField && sourceField.kind === LINKED_FIELD) && invariant(false, "cloneRelayHandleSourceField: Expected a corresponding source field for handle `%s`.", handleField.handle);
    var handleKey = getHandleStorageKey(handleField, variables);
    return {
      kind: "LinkedField",
      alias: sourceField.alias,
      name: handleKey,
      storageKey: handleKey,
      args: null,
      concreteType: sourceField.concreteType,
      plural: sourceField.plural,
      selections: sourceField.selections
    };
  };
  var _require = require_RelayConcreteNode();
  var LINKED_FIELD = _require.LINKED_FIELD;
  var _require2 = require_RelayStoreUtils();
  var getHandleStorageKey = _require2.getHandleStorageKey;
  var areEqual = require_areEqual();
  var invariant = require_browser();
  module.exports = cloneRelayHandleSourceField;
});

// node_modules/relay-runtime/lib/store/cloneRelayScalarHandleSourceField.js
var require_cloneRelayScalarHandleSourceField = __commonJS((exports, module) => {
  var cloneRelayScalarHandleSourceField = function(handleField, selections, variables) {
    var sourceField = selections.find(function(source) {
      return source.kind === SCALAR_FIELD && source.name === handleField.name && source.alias === handleField.alias && areEqual(source.args, handleField.args);
    });
    !(sourceField && sourceField.kind === SCALAR_FIELD) && invariant(false, "cloneRelayScalarHandleSourceField: Expected a corresponding source field for handle `%s`.", handleField.handle);
    var handleKey = getHandleStorageKey(handleField, variables);
    return {
      kind: "ScalarField",
      alias: sourceField.alias,
      name: handleKey,
      storageKey: handleKey,
      args: null
    };
  };
  var _require = require_RelayConcreteNode();
  var SCALAR_FIELD = _require.SCALAR_FIELD;
  var _require2 = require_RelayStoreUtils();
  var getHandleStorageKey = _require2.getHandleStorageKey;
  var areEqual = require_areEqual();
  var invariant = require_browser();
  module.exports = cloneRelayScalarHandleSourceField;
});

// node_modules/relay-runtime/lib/store/DataChecker.js
var require_DataChecker = __commonJS((exports, module) => {
  var check = function(getSourceForActor, getTargetForActor, defaultActorIdentifier, selector, handlers, operationLoader, getDataID, shouldProcessClientComponents) {
    var { dataID, node: node2, variables } = selector;
    var checker = new DataChecker(getSourceForActor, getTargetForActor, defaultActorIdentifier, variables, handlers, operationLoader, getDataID, shouldProcessClientComponents);
    return checker.check(node2, dataID);
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var RelayRecordSourceMutator = require_RelayRecordSourceMutator();
  var RelayRecordSourceProxy = require_RelayRecordSourceProxy();
  var getOperation = require_getOperation();
  var RelayConcreteNode = require_RelayConcreteNode();
  var _require = require_ClientID();
  var isClientID = _require.isClientID;
  var cloneRelayHandleSourceField = require_cloneRelayHandleSourceField();
  var cloneRelayScalarHandleSourceField = require_cloneRelayScalarHandleSourceField();
  var _require2 = require_RelayConcreteVariables();
  var getLocalVariables = _require2.getLocalVariables;
  var RelayModernRecord = require_RelayModernRecord();
  var _require3 = require_RelayRecordState();
  var EXISTENT = _require3.EXISTENT;
  var UNKNOWN = _require3.UNKNOWN;
  var RelayStoreUtils = require_RelayStoreUtils();
  var _require4 = require_TypeID();
  var TYPE_SCHEMA_TYPE = _require4.TYPE_SCHEMA_TYPE;
  var generateTypeID = _require4.generateTypeID;
  var invariant = require_browser();
  var ACTOR_CHANGE = RelayConcreteNode.ACTOR_CHANGE;
  var CONDITION = RelayConcreteNode.CONDITION;
  var CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT;
  var CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION;
  var CLIENT_EDGE_TO_CLIENT_OBJECT = RelayConcreteNode.CLIENT_EDGE_TO_CLIENT_OBJECT;
  var DEFER = RelayConcreteNode.DEFER;
  var FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD;
  var INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT;
  var LINKED_FIELD = RelayConcreteNode.LINKED_FIELD;
  var LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE;
  var MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT;
  var RELAY_RESOLVER = RelayConcreteNode.RELAY_RESOLVER;
  var RELAY_LIVE_RESOLVER = RelayConcreteNode.RELAY_LIVE_RESOLVER;
  var SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD;
  var SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE;
  var STREAM = RelayConcreteNode.STREAM;
  var TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR;
  var getModuleOperationKey = RelayStoreUtils.getModuleOperationKey;
  var getStorageKey = RelayStoreUtils.getStorageKey;
  var getArgumentValues = RelayStoreUtils.getArgumentValues;
  var DataChecker = function() {
    function DataChecker2(getSourceForActor, getTargetForActor, defaultActorIdentifier, variables, handlers, operationLoader, getDataID, shouldProcessClientComponents) {
      this._getSourceForActor = getSourceForActor;
      this._getTargetForActor = getTargetForActor;
      this._getDataID = getDataID;
      this._source = getSourceForActor(defaultActorIdentifier);
      this._mutatorRecordSourceProxyCache = new Map;
      var _this$_getMutatorAndR = this._getMutatorAndRecordProxyForActor(defaultActorIdentifier), mutator = _this$_getMutatorAndR[0], recordSourceProxy = _this$_getMutatorAndR[1];
      this._mostRecentlyInvalidatedAt = null;
      this._handlers = handlers;
      this._mutator = mutator;
      this._operationLoader = operationLoader !== null && operationLoader !== undefined ? operationLoader : null;
      this._recordSourceProxy = recordSourceProxy;
      this._recordWasMissing = false;
      this._variables = variables;
      this._shouldProcessClientComponents = shouldProcessClientComponents;
    }
    var _proto = DataChecker2.prototype;
    _proto._getMutatorAndRecordProxyForActor = function _getMutatorAndRecordProxyForActor(actorIdentifier) {
      var tuple = this._mutatorRecordSourceProxyCache.get(actorIdentifier);
      if (tuple == null) {
        var target = this._getTargetForActor(actorIdentifier);
        var mutator = new RelayRecordSourceMutator(this._getSourceForActor(actorIdentifier), target);
        var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, undefined, this._handlers);
        tuple = [mutator, recordSourceProxy];
        this._mutatorRecordSourceProxyCache.set(actorIdentifier, tuple);
      }
      return tuple;
    };
    _proto.check = function check(node2, dataID) {
      this._assignClientAbstractTypes(node2);
      this._traverse(node2, dataID);
      return this._recordWasMissing === true ? {
        status: "missing",
        mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt
      } : {
        status: "available",
        mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt
      };
    };
    _proto._getVariableValue = function _getVariableValue(name) {
      !this._variables.hasOwnProperty(name) && invariant(false, "RelayAsyncLoader(): Undefined variable `%s`.", name);
      return this._variables[name];
    };
    _proto._handleMissing = function _handleMissing() {
      this._recordWasMissing = true;
    };
    _proto._handleMissingScalarField = function _handleMissingScalarField(field, dataID) {
      if (field.name === "id" && field.alias == null && isClientID(dataID)) {
        return;
      }
      var args = field.args != null ? getArgumentValues(field.args, this._variables) : {};
      var _iterator = (0, _createForOfIteratorHelper2["default"])(this._handlers), _step;
      try {
        for (_iterator.s();!(_step = _iterator.n()).done; ) {
          var handler = _step.value;
          if (handler.kind === "scalar") {
            var newValue = handler.handle(field, this._recordSourceProxy.get(dataID), args, this._recordSourceProxy);
            if (newValue !== undefined) {
              return newValue;
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      this._handleMissing();
    };
    _proto._handleMissingLinkField = function _handleMissingLinkField(field, dataID) {
      var args = field.args != null ? getArgumentValues(field.args, this._variables) : {};
      var _iterator2 = (0, _createForOfIteratorHelper2["default"])(this._handlers), _step2;
      try {
        for (_iterator2.s();!(_step2 = _iterator2.n()).done; ) {
          var handler = _step2.value;
          if (handler.kind === "linked") {
            var newValue = handler.handle(field, this._recordSourceProxy.get(dataID), args, this._recordSourceProxy);
            if (newValue !== undefined && (newValue === null || this._mutator.getStatus(newValue) === EXISTENT)) {
              return newValue;
            }
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      this._handleMissing();
    };
    _proto._handleMissingPluralLinkField = function _handleMissingPluralLinkField(field, dataID) {
      var _this = this;
      var args = field.args != null ? getArgumentValues(field.args, this._variables) : {};
      var _iterator3 = (0, _createForOfIteratorHelper2["default"])(this._handlers), _step3;
      try {
        for (_iterator3.s();!(_step3 = _iterator3.n()).done; ) {
          var handler = _step3.value;
          if (handler.kind === "pluralLinked") {
            var newValue = handler.handle(field, this._recordSourceProxy.get(dataID), args, this._recordSourceProxy);
            if (newValue != null) {
              var allItemsKnown = newValue.every(function(linkedID) {
                return linkedID != null && _this._mutator.getStatus(linkedID) === EXISTENT;
              });
              if (allItemsKnown) {
                return newValue;
              }
            } else if (newValue === null) {
              return null;
            }
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      this._handleMissing();
    };
    _proto._traverse = function _traverse(node2, dataID) {
      var status = this._mutator.getStatus(dataID);
      if (status === UNKNOWN) {
        this._handleMissing();
      }
      if (status === EXISTENT) {
        var record = this._source.get(dataID);
        var invalidatedAt = RelayModernRecord.getInvalidationEpoch(record);
        if (invalidatedAt != null) {
          this._mostRecentlyInvalidatedAt = this._mostRecentlyInvalidatedAt != null ? Math.max(this._mostRecentlyInvalidatedAt, invalidatedAt) : invalidatedAt;
        }
        this._traverseSelections(node2.selections, dataID);
      }
    };
    _proto._traverseSelections = function _traverseSelections(selections, dataID) {
      var _this2 = this;
      selections.forEach(function(selection) {
        switch (selection.kind) {
          case SCALAR_FIELD:
            _this2._checkScalar(selection, dataID);
            break;
          case LINKED_FIELD:
            if (selection.plural) {
              _this2._checkPluralLink(selection, dataID);
            } else {
              _this2._checkLink(selection, dataID);
            }
            break;
          case ACTOR_CHANGE:
            _this2._checkActorChange(selection.linkedField, dataID);
            break;
          case CONDITION:
            var conditionValue = Boolean(_this2._getVariableValue(selection.condition));
            if (conditionValue === selection.passingValue) {
              _this2._traverseSelections(selection.selections, dataID);
            }
            break;
          case INLINE_FRAGMENT: {
            var _abstractKey = selection.abstractKey;
            if (_abstractKey == null) {
              var typeName = _this2._mutator.getType(dataID);
              if (typeName === selection.type) {
                _this2._traverseSelections(selection.selections, dataID);
              }
            } else {
              var _recordType = _this2._mutator.getType(dataID);
              !(_recordType != null) && invariant(false, "DataChecker: Expected record `%s` to have a known type", dataID);
              var _typeID = generateTypeID(_recordType);
              var _implementsInterface = _this2._mutator.getValue(_typeID, _abstractKey);
              if (_implementsInterface === true) {
                _this2._traverseSelections(selection.selections, dataID);
              } else if (_implementsInterface == null) {
                _this2._handleMissing();
              }
            }
            break;
          }
          case LINKED_HANDLE: {
            var handleField = cloneRelayHandleSourceField(selection, selections, _this2._variables);
            if (handleField.plural) {
              _this2._checkPluralLink(handleField, dataID);
            } else {
              _this2._checkLink(handleField, dataID);
            }
            break;
          }
          case SCALAR_HANDLE: {
            var _handleField = cloneRelayScalarHandleSourceField(selection, selections, _this2._variables);
            _this2._checkScalar(_handleField, dataID);
            break;
          }
          case MODULE_IMPORT:
            _this2._checkModuleImport(selection, dataID);
            break;
          case DEFER:
          case STREAM:
            _this2._traverseSelections(selection.selections, dataID);
            break;
          case FRAGMENT_SPREAD:
            var prevVariables = _this2._variables;
            _this2._variables = getLocalVariables(_this2._variables, selection.fragment.argumentDefinitions, selection.args);
            _this2._traverseSelections(selection.fragment.selections, dataID);
            _this2._variables = prevVariables;
            break;
          case CLIENT_EXTENSION:
            var recordWasMissing = _this2._recordWasMissing;
            _this2._traverseSelections(selection.selections, dataID);
            _this2._recordWasMissing = recordWasMissing;
            break;
          case TYPE_DISCRIMINATOR:
            var abstractKey = selection.abstractKey;
            var recordType = _this2._mutator.getType(dataID);
            !(recordType != null) && invariant(false, "DataChecker: Expected record `%s` to have a known type", dataID);
            var typeID = generateTypeID(recordType);
            var implementsInterface = _this2._mutator.getValue(typeID, abstractKey);
            if (implementsInterface == null) {
              _this2._handleMissing();
            }
            break;
          case CLIENT_COMPONENT:
            if (_this2._shouldProcessClientComponents === false) {
              break;
            }
            _this2._traverseSelections(selection.fragment.selections, dataID);
            break;
          case RELAY_RESOLVER:
            _this2._checkResolver(selection, dataID);
            break;
          case RELAY_LIVE_RESOLVER:
            _this2._checkResolver(selection, dataID);
            break;
          case CLIENT_EDGE_TO_CLIENT_OBJECT:
            _this2._checkResolver(selection.backingField, dataID);
            break;
          default:
            invariant(false, "RelayAsyncLoader(): Unexpected ast kind `%s`.", selection.kind);
        }
      });
    };
    _proto._checkResolver = function _checkResolver(resolver, dataID) {
      if (resolver.fragment) {
        this._traverseSelections([resolver.fragment], dataID);
      }
    };
    _proto._checkModuleImport = function _checkModuleImport(moduleImport, dataID) {
      var operationLoader = this._operationLoader;
      !(operationLoader !== null) && invariant(false, "DataChecker: Expected an operationLoader to be configured when using `@module`.");
      var operationKey = getModuleOperationKey(moduleImport.documentName);
      var operationReference = this._mutator.getValue(dataID, operationKey);
      if (operationReference == null) {
        if (operationReference === undefined) {
          this._handleMissing();
        }
        return;
      }
      var normalizationRootNode = operationLoader.get(operationReference);
      if (normalizationRootNode != null) {
        var operation = getOperation(normalizationRootNode);
        var prevVariables = this._variables;
        this._variables = getLocalVariables(this._variables, operation.argumentDefinitions, moduleImport.args);
        this._traverse(operation, dataID);
        this._variables = prevVariables;
      } else {
        this._handleMissing();
      }
    };
    _proto._checkScalar = function _checkScalar(field, dataID) {
      var storageKey = getStorageKey(field, this._variables);
      var fieldValue = this._mutator.getValue(dataID, storageKey);
      if (fieldValue === undefined) {
        fieldValue = this._handleMissingScalarField(field, dataID);
        if (fieldValue !== undefined) {
          this._mutator.setValue(dataID, storageKey, fieldValue);
        }
      }
    };
    _proto._checkLink = function _checkLink(field, dataID) {
      var storageKey = getStorageKey(field, this._variables);
      var linkedID = this._mutator.getLinkedRecordID(dataID, storageKey);
      if (linkedID === undefined) {
        linkedID = this._handleMissingLinkField(field, dataID);
        if (linkedID != null) {
          this._mutator.setLinkedRecordID(dataID, storageKey, linkedID);
        } else if (linkedID === null) {
          this._mutator.setValue(dataID, storageKey, null);
        }
      }
      if (linkedID != null) {
        this._traverse(field, linkedID);
      }
    };
    _proto._checkPluralLink = function _checkPluralLink(field, dataID) {
      var _this3 = this;
      var storageKey = getStorageKey(field, this._variables);
      var linkedIDs = this._mutator.getLinkedRecordIDs(dataID, storageKey);
      if (linkedIDs === undefined) {
        linkedIDs = this._handleMissingPluralLinkField(field, dataID);
        if (linkedIDs != null) {
          this._mutator.setLinkedRecordIDs(dataID, storageKey, linkedIDs);
        } else if (linkedIDs === null) {
          this._mutator.setValue(dataID, storageKey, null);
        }
      }
      if (linkedIDs) {
        linkedIDs.forEach(function(linkedID) {
          if (linkedID != null) {
            _this3._traverse(field, linkedID);
          }
        });
      }
    };
    _proto._checkActorChange = function _checkActorChange(field, dataID) {
      var storageKey = getStorageKey(field, this._variables);
      var record = this._source.get(dataID);
      var tuple = record != null ? RelayModernRecord.getActorLinkedRecordID(record, storageKey) : record;
      if (tuple == null) {
        if (tuple === undefined) {
          this._handleMissing();
        }
      } else {
        var actorIdentifier = tuple[0], linkedID = tuple[1];
        var prevSource = this._source;
        var prevMutator = this._mutator;
        var prevRecordSourceProxy = this._recordSourceProxy;
        var _this$_getMutatorAndR2 = this._getMutatorAndRecordProxyForActor(actorIdentifier), mutator = _this$_getMutatorAndR2[0], recordSourceProxy = _this$_getMutatorAndR2[1];
        this._source = this._getSourceForActor(actorIdentifier);
        this._mutator = mutator;
        this._recordSourceProxy = recordSourceProxy;
        this._assignClientAbstractTypes(field);
        this._traverse(field, linkedID);
        this._source = prevSource;
        this._mutator = prevMutator;
        this._recordSourceProxy = prevRecordSourceProxy;
      }
    };
    _proto._assignClientAbstractTypes = function _assignClientAbstractTypes(node2) {
      var clientAbstractTypes = node2.clientAbstractTypes;
      if (clientAbstractTypes != null) {
        for (var _i = 0, _Object$keys = Object.keys(clientAbstractTypes);_i < _Object$keys.length; _i++) {
          var abstractType = _Object$keys[_i];
          var _iterator4 = (0, _createForOfIteratorHelper2["default"])(clientAbstractTypes[abstractType]), _step4;
          try {
            for (_iterator4.s();!(_step4 = _iterator4.n()).done; ) {
              var concreteType = _step4.value;
              var typeID = generateTypeID(concreteType);
              if (this._source.get(typeID) == null) {
                this._mutator.create(typeID, TYPE_SCHEMA_TYPE);
              }
              if (this._mutator.getValue(typeID, abstractType) == null) {
                this._mutator.setValue(typeID, abstractType, true);
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        }
      }
    };
    return DataChecker2;
  }();
  module.exports = {
    check
  };
});

// node_modules/relay-runtime/lib/store/RelayOptimisticRecordSource.js
var require_RelayOptimisticRecordSource = __commonJS((exports, module) => {
  var create = function(base) {
    return new RelayOptimisticRecordSource(base);
  };
  var getOptimisticRecordIDs = function(source) {
    !(source instanceof RelayOptimisticRecordSource) && invariant(false, "getOptimisticRecordIDs: Instance of RelayOptimisticRecordSource is expected");
    return source.getOptimisticRecordIDs();
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var RelayModernRecord = require_RelayModernRecord();
  var RelayRecordSource = require_RelayRecordSource();
  var invariant = require_browser();
  var UNPUBLISH_RECORD_SENTINEL = RelayModernRecord.fromObject(Object.freeze({
    __UNPUBLISH_RECORD_SENTINEL: true
  }));
  var RelayOptimisticRecordSource = function() {
    function RelayOptimisticRecordSource2(base) {
      this._base = base;
      this._sink = RelayRecordSource.create();
    }
    var _proto = RelayOptimisticRecordSource2.prototype;
    _proto.has = function has(dataID) {
      if (this._sink.has(dataID)) {
        var sinkRecord = this._sink.get(dataID);
        return sinkRecord !== UNPUBLISH_RECORD_SENTINEL;
      } else {
        return this._base.has(dataID);
      }
    };
    _proto.get = function get(dataID) {
      if (this._sink.has(dataID)) {
        var sinkRecord = this._sink.get(dataID);
        if (sinkRecord === UNPUBLISH_RECORD_SENTINEL) {
          return;
        } else {
          return sinkRecord;
        }
      } else {
        return this._base.get(dataID);
      }
    };
    _proto.getStatus = function getStatus(dataID) {
      var record = this.get(dataID);
      if (record === undefined) {
        return "UNKNOWN";
      } else if (record === null) {
        return "NONEXISTENT";
      } else {
        return "EXISTENT";
      }
    };
    _proto.clear = function clear() {
      this._base = RelayRecordSource.create();
      this._sink.clear();
    };
    _proto["delete"] = function _delete(dataID) {
      this._sink["delete"](dataID);
    };
    _proto.remove = function remove(dataID) {
      this._sink.set(dataID, UNPUBLISH_RECORD_SENTINEL);
    };
    _proto.set = function set(dataID, record) {
      this._sink.set(dataID, record);
    };
    _proto.getRecordIDs = function getRecordIDs() {
      return Object.keys(this.toJSON());
    };
    _proto.size = function size() {
      return Object.keys(this.toJSON()).length;
    };
    _proto.toJSON = function toJSON() {
      var _this = this;
      var merged = (0, _objectSpread2["default"])({}, this._base.toJSON());
      this._sink.getRecordIDs().forEach(function(dataID) {
        var record = _this.get(dataID);
        if (record === undefined) {
          delete merged[dataID];
        } else {
          merged[dataID] = RelayModernRecord.toJSON(record);
        }
      });
      return merged;
    };
    _proto.getOptimisticRecordIDs = function getOptimisticRecordIDs() {
      return new Set(this._sink.getRecordIDs());
    };
    return RelayOptimisticRecordSource2;
  }();
  module.exports = {
    create,
    getOptimisticRecordIDs
  };
});

// node_modules/relay-runtime/lib/store/experimental-live-resolvers/getOutputTypeRecordIDs.js
var require_getOutputTypeRecordIDs = __commonJS((exports, module) => {
  var getOutputTypeRecordIDs = function(record) {
    var maybeOutputTypeRecordIDs = RelayModernRecord.getValue(record, RELAY_RESOLVER_OUTPUT_TYPE_RECORD_IDS);
    if (maybeOutputTypeRecordIDs == null) {
      return null;
    }
    !(maybeOutputTypeRecordIDs instanceof Set) && invariant(false, "getOutputTypeRecordIDs: Expected the `%s` field on record `%s` to be of type Set. Instead, it is a %s.", RELAY_RESOLVER_OUTPUT_TYPE_RECORD_IDS, typeof maybeOutputTypeRecordIDs);
    return maybeOutputTypeRecordIDs;
  };
  var RelayModernRecord = require_RelayModernRecord();
  var _require = require_RelayStoreUtils();
  var RELAY_RESOLVER_OUTPUT_TYPE_RECORD_IDS = _require.RELAY_RESOLVER_OUTPUT_TYPE_RECORD_IDS;
  var invariant = require_browser();
  module.exports = getOutputTypeRecordIDs;
});

// node_modules/relay-runtime/lib/store/RelayReferenceMarker.js
var require_RelayReferenceMarker = __commonJS((exports, module) => {
  var mark = function(recordSource, selector, references, operationLoader, shouldProcessClientComponents) {
    var { dataID, node: node2, variables } = selector;
    var marker = new RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents);
    marker.mark(node2, dataID);
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var getOperation = require_getOperation();
  var RelayConcreteNode = require_RelayConcreteNode();
  var cloneRelayHandleSourceField = require_cloneRelayHandleSourceField();
  var getOutputTypeRecordIDs = require_getOutputTypeRecordIDs();
  var _require = require_RelayConcreteVariables();
  var getLocalVariables = _require.getLocalVariables;
  var RelayModernRecord = require_RelayModernRecord();
  var RelayStoreUtils = require_RelayStoreUtils();
  var _require2 = require_TypeID();
  var generateTypeID = _require2.generateTypeID;
  var invariant = require_browser();
  var ACTOR_CHANGE = RelayConcreteNode.ACTOR_CHANGE;
  var CONDITION = RelayConcreteNode.CONDITION;
  var CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT;
  var CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION;
  var DEFER = RelayConcreteNode.DEFER;
  var FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD;
  var INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT;
  var LINKED_FIELD = RelayConcreteNode.LINKED_FIELD;
  var MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT;
  var LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE;
  var SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD;
  var SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE;
  var STREAM = RelayConcreteNode.STREAM;
  var TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR;
  var RELAY_RESOLVER = RelayConcreteNode.RELAY_RESOLVER;
  var RELAY_LIVE_RESOLVER = RelayConcreteNode.RELAY_LIVE_RESOLVER;
  var CLIENT_EDGE_TO_CLIENT_OBJECT = RelayConcreteNode.CLIENT_EDGE_TO_CLIENT_OBJECT;
  var getStorageKey = RelayStoreUtils.getStorageKey;
  var getModuleOperationKey = RelayStoreUtils.getModuleOperationKey;
  var RelayReferenceMarker = function() {
    function RelayReferenceMarker2(recordSource, variables, references, operationLoader, shouldProcessClientComponents) {
      this._operationLoader = operationLoader !== null && operationLoader !== undefined ? operationLoader : null;
      this._operationName = null;
      this._recordSource = recordSource;
      this._references = references;
      this._variables = variables;
      this._shouldProcessClientComponents = shouldProcessClientComponents;
    }
    var _proto = RelayReferenceMarker2.prototype;
    _proto.mark = function mark(node2, dataID) {
      if (node2.kind === "Operation" || node2.kind === "SplitOperation") {
        this._operationName = node2.name;
      }
      this._traverse(node2, dataID);
    };
    _proto._traverse = function _traverse(node2, dataID) {
      this._references.add(dataID);
      var record = this._recordSource.get(dataID);
      if (record == null) {
        return;
      }
      this._traverseSelections(node2.selections, record);
    };
    _proto._getVariableValue = function _getVariableValue(name) {
      !this._variables.hasOwnProperty(name) && invariant(false, "RelayReferenceMarker(): Undefined variable `%s`.", name);
      return this._variables[name];
    };
    _proto._traverseSelections = function _traverseSelections(selections, record) {
      var _this = this;
      selections.forEach(function(selection) {
        switch (selection.kind) {
          case ACTOR_CHANGE:
            _this._traverseLink(selection.linkedField, record);
            break;
          case LINKED_FIELD:
            if (selection.plural) {
              _this._traversePluralLink(selection, record);
            } else {
              _this._traverseLink(selection, record);
            }
            break;
          case CONDITION:
            var conditionValue = Boolean(_this._getVariableValue(selection.condition));
            if (conditionValue === selection.passingValue) {
              _this._traverseSelections(selection.selections, record);
            }
            break;
          case INLINE_FRAGMENT:
            if (selection.abstractKey == null) {
              var typeName = RelayModernRecord.getType(record);
              if (typeName != null && typeName === selection.type || typeName === RelayStoreUtils.ROOT_TYPE) {
                _this._traverseSelections(selection.selections, record);
              }
            } else {
              var _typeName = RelayModernRecord.getType(record);
              var typeID = generateTypeID(_typeName);
              _this._references.add(typeID);
              _this._traverseSelections(selection.selections, record);
            }
            break;
          case FRAGMENT_SPREAD:
            var prevVariables = _this._variables;
            _this._variables = getLocalVariables(_this._variables, selection.fragment.argumentDefinitions, selection.args);
            _this._traverseSelections(selection.fragment.selections, record);
            _this._variables = prevVariables;
            break;
          case LINKED_HANDLE:
            var handleField = cloneRelayHandleSourceField(selection, selections, _this._variables);
            if (handleField.plural) {
              _this._traversePluralLink(handleField, record);
            } else {
              _this._traverseLink(handleField, record);
            }
            break;
          case DEFER:
          case STREAM:
            _this._traverseSelections(selection.selections, record);
            break;
          case SCALAR_FIELD:
          case SCALAR_HANDLE:
            break;
          case TYPE_DISCRIMINATOR: {
            var _typeName2 = RelayModernRecord.getType(record);
            var _typeID = generateTypeID(_typeName2);
            _this._references.add(_typeID);
            break;
          }
          case MODULE_IMPORT:
            _this._traverseModuleImport(selection, record);
            break;
          case CLIENT_EXTENSION:
            _this._traverseSelections(selection.selections, record);
            break;
          case CLIENT_COMPONENT:
            if (_this._shouldProcessClientComponents === false) {
              break;
            }
            _this._traverseSelections(selection.fragment.selections, record);
            break;
          case RELAY_RESOLVER:
            _this._traverseResolverField(selection, record);
            break;
          case RELAY_LIVE_RESOLVER:
            _this._traverseResolverField(selection, record);
            break;
          case CLIENT_EDGE_TO_CLIENT_OBJECT:
            _this._traverseClientEdgeToClientObject(selection, record);
            break;
          default:
            invariant(false, "RelayReferenceMarker: Unknown AST node `%s`.", selection);
        }
      });
    };
    _proto._traverseClientEdgeToClientObject = function _traverseClientEdgeToClientObject(field, record) {
      var dataID = this._traverseResolverField(field.backingField, record);
      if (dataID == null) {
        return;
      }
      var resolverRecord = this._recordSource.get(dataID);
      if (resolverRecord == null) {
        return;
      }
      if (field.backingField.isOutputType) {
        var outputTypeRecordIDs = getOutputTypeRecordIDs(resolverRecord);
        if (outputTypeRecordIDs != null) {
          var _iterator = (0, _createForOfIteratorHelper2["default"])(outputTypeRecordIDs), _step;
          try {
            for (_iterator.s();!(_step = _iterator.n()).done; ) {
              var _dataID = _step.value;
              this._references.add(_dataID);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      } else {
        var linkedField = field.linkedField;
        var concreteType = linkedField.concreteType;
        if (concreteType == null) {
          return;
        }
        if (linkedField.plural) {
          var dataIDs = RelayModernRecord.getResolverLinkedRecordIDs(resolverRecord, concreteType);
          if (dataIDs != null) {
            var _iterator2 = (0, _createForOfIteratorHelper2["default"])(dataIDs), _step2;
            try {
              for (_iterator2.s();!(_step2 = _iterator2.n()).done; ) {
                var _dataID2 = _step2.value;
                if (_dataID2 != null) {
                  this._traverse(linkedField, _dataID2);
                }
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
        } else {
          var _dataID3 = RelayModernRecord.getResolverLinkedRecordID(resolverRecord, concreteType);
          if (_dataID3 != null) {
            this._traverse(linkedField, _dataID3);
          }
        }
      }
    };
    _proto._traverseResolverField = function _traverseResolverField(field, record) {
      var storageKey = getStorageKey(field, this._variables);
      var dataID = RelayModernRecord.getLinkedRecordID(record, storageKey);
      if (dataID != null) {
        this._references.add(dataID);
      }
      var fragment = field.fragment;
      if (fragment != null) {
        this._traverseSelections([fragment], record);
      }
      return dataID;
    };
    _proto._traverseModuleImport = function _traverseModuleImport(moduleImport, record) {
      var _this$_operationName;
      var operationLoader = this._operationLoader;
      !(operationLoader !== null) && invariant(false, "RelayReferenceMarker: Expected an operationLoader to be configured when using `@module`. Could not load fragment `%s` in operation `%s`.", moduleImport.fragmentName, (_this$_operationName = this._operationName) !== null && _this$_operationName !== undefined ? _this$_operationName : "(unknown)");
      var operationKey = getModuleOperationKey(moduleImport.documentName);
      var operationReference = RelayModernRecord.getValue(record, operationKey);
      if (operationReference == null) {
        return;
      }
      var normalizationRootNode = operationLoader.get(operationReference);
      if (normalizationRootNode != null) {
        var operation = getOperation(normalizationRootNode);
        var prevVariables = this._variables;
        this._variables = getLocalVariables(this._variables, operation.argumentDefinitions, moduleImport.args);
        this._traverseSelections(operation.selections, record);
        this._variables = prevVariables;
      }
    };
    _proto._traverseLink = function _traverseLink(field, record) {
      var storageKey = getStorageKey(field, this._variables);
      var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
      if (linkedID == null) {
        return;
      }
      this._traverse(field, linkedID);
    };
    _proto._traversePluralLink = function _traversePluralLink(field, record) {
      var _this2 = this;
      var storageKey = getStorageKey(field, this._variables);
      var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
      if (linkedIDs == null) {
        return;
      }
      linkedIDs.forEach(function(linkedID) {
        if (linkedID != null) {
          _this2._traverse(field, linkedID);
        }
      });
    };
    return RelayReferenceMarker2;
  }();
  module.exports = {
    mark
  };
});

// node_modules/relay-runtime/lib/store/hasOverlappingIDs.js
var require_hasOverlappingIDs = __commonJS((exports, module) => {
  var hasOverlappingIDs = function(seenRecords, updatedRecordIDs) {
    var iterator = seenRecords[ITERATOR_KEY]();
    var next = iterator.next();
    while (!next.done) {
      var key = next.value;
      if (updatedRecordIDs.has(key)) {
        return true;
      }
      next = iterator.next();
    }
    return false;
  };
  var ITERATOR_KEY = Symbol.iterator;
  module.exports = hasOverlappingIDs;
});

// node_modules/relay-runtime/lib/store/hasSignificantOverlappingIDs.js
var require_hasSignificantOverlappingIDs = __commonJS((exports, module) => {
  var hasSignificantOverlappingIDs = function(seenRecords, updatedRecordIDs) {
    var iterator = seenRecords[ITERATOR_KEY]();
    var next = iterator.next();
    while (!next.done) {
      var key = next.value;
      if (updatedRecordIDs.has(key) && key !== ROOT_ID && key !== VIEWER_ID) {
        return true;
      }
      next = iterator.next();
    }
    return false;
  };
  var _require = require_RelayStoreUtils();
  var ROOT_ID = _require.ROOT_ID;
  var _require2 = require_ViewerPattern();
  var VIEWER_ID = _require2.VIEWER_ID;
  var ITERATOR_KEY = Symbol.iterator;
  module.exports = hasSignificantOverlappingIDs;
});

// node_modules/relay-runtime/lib/store/RelayStoreSubscriptions.js
var require_RelayStoreSubscriptions = __commonJS((exports, module) => {
  var deepFreeze = require_deepFreeze();
  var recycleNodesInto = require_recycleNodesInto();
  var RelayFeatureFlags = require_RelayFeatureFlags();
  var hasOverlappingIDs = require_hasOverlappingIDs();
  var hasSignificantOverlappingIDs = require_hasSignificantOverlappingIDs();
  var RelayReader = require_RelayReader();
  var RelayStoreSubscriptions = function() {
    function RelayStoreSubscriptions2(log, resolverCache) {
      this._subscriptions = new Set;
      this.__log = log;
      this._resolverCache = resolverCache;
    }
    var _proto = RelayStoreSubscriptions2.prototype;
    _proto.subscribe = function subscribe(snapshot, callback) {
      var _this = this;
      var subscription = {
        backup: null,
        callback,
        snapshot,
        stale: false
      };
      var dispose = function dispose() {
        _this._subscriptions["delete"](subscription);
      };
      this._subscriptions.add(subscription);
      return {
        dispose
      };
    };
    _proto.snapshotSubscriptions = function snapshotSubscriptions(source) {
      var _this2 = this;
      this._subscriptions.forEach(function(subscription) {
        if (!subscription.stale) {
          subscription.backup = subscription.snapshot;
          return;
        }
        var snapshot = subscription.snapshot;
        var backup = RelayReader.read(source, snapshot.selector, _this2._resolverCache);
        var nextData = recycleNodesInto(snapshot.data, backup.data);
        backup.data = nextData;
        subscription.backup = backup;
      });
    };
    _proto.restoreSubscriptions = function restoreSubscriptions() {
      this._subscriptions.forEach(function(subscription) {
        var backup = subscription.backup;
        subscription.backup = null;
        if (backup) {
          if (backup.data !== subscription.snapshot.data) {
            subscription.stale = true;
          }
          subscription.snapshot = {
            data: subscription.snapshot.data,
            isMissingData: backup.isMissingData,
            missingClientEdges: backup.missingClientEdges,
            missingLiveResolverFields: backup.missingLiveResolverFields,
            seenRecords: backup.seenRecords,
            selector: backup.selector,
            missingRequiredFields: backup.missingRequiredFields,
            relayResolverErrors: backup.relayResolverErrors
          };
        } else {
          subscription.stale = true;
        }
      });
    };
    _proto.updateSubscriptions = function updateSubscriptions(source, updatedRecordIDs, updatedOwners, sourceOperation) {
      var _this3 = this;
      var hasUpdatedRecords = updatedRecordIDs.size !== 0;
      this._subscriptions.forEach(function(subscription) {
        var owner = _this3._updateSubscription(source, subscription, updatedRecordIDs, hasUpdatedRecords, sourceOperation);
        if (owner != null) {
          updatedOwners.push(owner);
        }
      });
    };
    _proto._updateSubscription = function _updateSubscription(source, subscription, updatedRecordIDs, hasUpdatedRecords, sourceOperation) {
      var { backup, callback, snapshot, stale } = subscription;
      var hasOverlappingUpdates = hasUpdatedRecords && hasOverlappingIDs(snapshot.seenRecords, updatedRecordIDs);
      if (!stale && !hasOverlappingUpdates) {
        return;
      }
      var nextSnapshot = hasOverlappingUpdates || !backup ? RelayReader.read(source, snapshot.selector, this._resolverCache) : backup;
      var nextData = recycleNodesInto(snapshot.data, nextSnapshot.data);
      nextSnapshot = {
        data: nextData,
        isMissingData: nextSnapshot.isMissingData,
        missingClientEdges: nextSnapshot.missingClientEdges,
        missingLiveResolverFields: nextSnapshot.missingLiveResolverFields,
        seenRecords: nextSnapshot.seenRecords,
        selector: nextSnapshot.selector,
        missingRequiredFields: nextSnapshot.missingRequiredFields,
        relayResolverErrors: nextSnapshot.relayResolverErrors
      };
      if (true) {
        deepFreeze(nextSnapshot);
      }
      subscription.snapshot = nextSnapshot;
      subscription.stale = false;
      if (nextSnapshot.data !== snapshot.data) {
        if (this.__log && RelayFeatureFlags.ENABLE_NOTIFY_SUBSCRIPTION) {
          this.__log({
            name: "store.notify.subscription",
            sourceOperation,
            snapshot,
            nextSnapshot
          });
        }
        callback(nextSnapshot);
        return snapshot.selector.owner;
      }
      if (RelayFeatureFlags.ENABLE_LOOSE_SUBSCRIPTION_ATTRIBUTION && (stale || hasSignificantOverlappingIDs(snapshot.seenRecords, updatedRecordIDs))) {
        return snapshot.selector.owner;
      }
    };
    return RelayStoreSubscriptions2;
  }();
  module.exports = RelayStoreSubscriptions;
});

// node_modules/relay-runtime/lib/store/RelayModernStore.js
var require_RelayModernStore = __commonJS((exports, module) => {
  var initializeRecordSource = function(target) {
    if (!target.has(ROOT_ID)) {
      var rootRecord = RelayModernRecord.create(ROOT_ID, ROOT_TYPE);
      target.set(ROOT_ID, rootRecord);
    }
  };
  var updateTargetFromSource = function(target, source, currentWriteEpoch, idsMarkedForInvalidation, updatedRecordIDs, invalidatedRecordIDs) {
    if (idsMarkedForInvalidation) {
      idsMarkedForInvalidation.forEach(function(dataID2) {
        var targetRecord2 = target.get(dataID2);
        var sourceRecord2 = source.get(dataID2);
        if (sourceRecord2 === null) {
          return;
        }
        var nextRecord2;
        if (targetRecord2 != null) {
          nextRecord2 = RelayModernRecord.clone(targetRecord2);
        } else {
          nextRecord2 = sourceRecord2 != null ? RelayModernRecord.clone(sourceRecord2) : null;
        }
        if (!nextRecord2) {
          return;
        }
        RelayModernRecord.setValue(nextRecord2, RelayStoreUtils.INVALIDATED_AT_KEY, currentWriteEpoch);
        invalidatedRecordIDs.add(dataID2);
        target.set(dataID2, nextRecord2);
      });
    }
    var dataIDs = source.getRecordIDs();
    for (var ii = 0;ii < dataIDs.length; ii++) {
      var dataID = dataIDs[ii];
      var sourceRecord = source.get(dataID);
      var targetRecord = target.get(dataID);
      if (true) {
        if (sourceRecord) {
          RelayModernRecord.freeze(sourceRecord);
        }
      }
      if (sourceRecord && targetRecord) {
        var nextRecord = RelayModernRecord.update(targetRecord, sourceRecord);
        if (nextRecord !== targetRecord) {
          if (true) {
            RelayModernRecord.freeze(nextRecord);
          }
          updatedRecordIDs.add(dataID);
          target.set(dataID, nextRecord);
        }
      } else if (sourceRecord === null) {
        target["delete"](dataID);
        if (targetRecord !== null) {
          updatedRecordIDs.add(dataID);
        }
      } else if (sourceRecord) {
        target.set(dataID, sourceRecord);
        updatedRecordIDs.add(dataID);
      }
    }
  };
  var getAvailabilityStatus = function(operationAvailability, operationLastWrittenAt, operationFetchTime, queryCacheExpirationTime) {
    var { mostRecentlyInvalidatedAt, status } = operationAvailability;
    if (typeof mostRecentlyInvalidatedAt === "number") {
      if (operationLastWrittenAt == null || mostRecentlyInvalidatedAt > operationLastWrittenAt) {
        return {
          status: "stale"
        };
      }
    }
    if (status === "missing") {
      return {
        status: "missing"
      };
    }
    if (operationFetchTime != null && queryCacheExpirationTime != null) {
      var isStale = operationFetchTime <= Date.now() - queryCacheExpirationTime;
      if (isStale) {
        return {
          status: "stale"
        };
      }
    }
    return {
      status: "available",
      fetchTime: operationFetchTime !== null && operationFetchTime !== undefined ? operationFetchTime : null
    };
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var _defineProperty2 = _interopRequireDefault(require_defineProperty());
  var _require = require_ActorIdentifier();
  var INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = _require.INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE;
  var assertInternalActorIdentifier = _require.assertInternalActorIdentifier;
  var deepFreeze = require_deepFreeze();
  var RelayFeatureFlags = require_RelayFeatureFlags();
  var resolveImmediate = require_resolveImmediate();
  var DataChecker = require_DataChecker();
  var defaultGetDataID = require_defaultGetDataID();
  var RelayModernRecord = require_RelayModernRecord();
  var RelayOptimisticRecordSource = require_RelayOptimisticRecordSource();
  var RelayReader = require_RelayReader();
  var RelayReferenceMarker = require_RelayReferenceMarker();
  var RelayStoreSubscriptions = require_RelayStoreSubscriptions();
  var RelayStoreUtils = require_RelayStoreUtils();
  var _require2 = require_RelayStoreUtils();
  var ROOT_ID = _require2.ROOT_ID;
  var ROOT_TYPE = _require2.ROOT_TYPE;
  var _require3 = require_ResolverCache();
  var RecordResolverCache = _require3.RecordResolverCache;
  var invariant = require_browser();
  var DEFAULT_RELEASE_BUFFER_SIZE = 10;
  var RelayModernStore = function() {
    function RelayModernStore2(source, options) {
      var _this = this;
      var _options$gcReleaseBuf, _options$gcScheduler, _options$getDataID, _options$log, _options$operationLoa;
      (0, _defineProperty2["default"])(this, "_gcStep", function() {
        if (_this._gcRun) {
          if (_this._gcRun.next().done) {
            _this._gcRun = null;
          } else {
            _this._gcScheduler(_this._gcStep);
          }
        }
      });
      if (true) {
        var storeIDs = source.getRecordIDs();
        for (var ii = 0;ii < storeIDs.length; ii++) {
          var record = source.get(storeIDs[ii]);
          if (record) {
            RelayModernRecord.freeze(record);
          }
        }
      }
      this._currentWriteEpoch = 0;
      this._gcHoldCounter = 0;
      this._gcReleaseBufferSize = (_options$gcReleaseBuf = options === null || options === undefined ? undefined : options.gcReleaseBufferSize) !== null && _options$gcReleaseBuf !== undefined ? _options$gcReleaseBuf : DEFAULT_RELEASE_BUFFER_SIZE;
      this._gcRun = null;
      this._gcScheduler = (_options$gcScheduler = options === null || options === undefined ? undefined : options.gcScheduler) !== null && _options$gcScheduler !== undefined ? _options$gcScheduler : resolveImmediate;
      this._getDataID = (_options$getDataID = options === null || options === undefined ? undefined : options.getDataID) !== null && _options$getDataID !== undefined ? _options$getDataID : defaultGetDataID;
      this._globalInvalidationEpoch = null;
      this._invalidationSubscriptions = new Set;
      this._invalidatedRecordIDs = new Set;
      this.__log = (_options$log = options === null || options === undefined ? undefined : options.log) !== null && _options$log !== undefined ? _options$log : null;
      this._queryCacheExpirationTime = options === null || options === undefined ? undefined : options.queryCacheExpirationTime;
      this._operationLoader = (_options$operationLoa = options === null || options === undefined ? undefined : options.operationLoader) !== null && _options$operationLoa !== undefined ? _options$operationLoa : null;
      this._optimisticSource = null;
      this._recordSource = source;
      this._releaseBuffer = [];
      this._roots = new Map;
      this._shouldScheduleGC = false;
      this._resolverCache = new RecordResolverCache(function() {
        return _this._getMutableRecordSource();
      });
      this._storeSubscriptions = new RelayStoreSubscriptions(options === null || options === undefined ? undefined : options.log, this._resolverCache);
      this._updatedRecordIDs = new Set;
      this._shouldProcessClientComponents = options === null || options === undefined ? undefined : options.shouldProcessClientComponents;
      initializeRecordSource(this._recordSource);
    }
    var _proto = RelayModernStore2.prototype;
    _proto.getSource = function getSource() {
      var _this$_optimisticSour;
      return (_this$_optimisticSour = this._optimisticSource) !== null && _this$_optimisticSour !== undefined ? _this$_optimisticSour : this._recordSource;
    };
    _proto._getMutableRecordSource = function _getMutableRecordSource() {
      var _this$_optimisticSour2;
      return (_this$_optimisticSour2 = this._optimisticSource) !== null && _this$_optimisticSour2 !== undefined ? _this$_optimisticSour2 : this._recordSource;
    };
    _proto.check = function check(operation, options) {
      var _options$handlers, _options$getSourceFor, _options$getTargetFor, _options$defaultActor;
      var selector = operation.root;
      var source = this._getMutableRecordSource();
      var globalInvalidationEpoch = this._globalInvalidationEpoch;
      var rootEntry = this._roots.get(operation.request.identifier);
      var operationLastWrittenAt = rootEntry != null ? rootEntry.epoch : null;
      if (globalInvalidationEpoch != null) {
        if (operationLastWrittenAt == null || operationLastWrittenAt <= globalInvalidationEpoch) {
          return {
            status: "stale"
          };
        }
      }
      var handlers = (_options$handlers = options === null || options === undefined ? undefined : options.handlers) !== null && _options$handlers !== undefined ? _options$handlers : [];
      var getSourceForActor = (_options$getSourceFor = options === null || options === undefined ? undefined : options.getSourceForActor) !== null && _options$getSourceFor !== undefined ? _options$getSourceFor : function(actorIdentifier) {
        assertInternalActorIdentifier(actorIdentifier);
        return source;
      };
      var getTargetForActor = (_options$getTargetFor = options === null || options === undefined ? undefined : options.getTargetForActor) !== null && _options$getTargetFor !== undefined ? _options$getTargetFor : function(actorIdentifier) {
        assertInternalActorIdentifier(actorIdentifier);
        return source;
      };
      var operationAvailability = DataChecker.check(getSourceForActor, getTargetForActor, (_options$defaultActor = options === null || options === undefined ? undefined : options.defaultActorIdentifier) !== null && _options$defaultActor !== undefined ? _options$defaultActor : INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE, selector, handlers, this._operationLoader, this._getDataID, this._shouldProcessClientComponents);
      return getAvailabilityStatus(operationAvailability, operationLastWrittenAt, rootEntry === null || rootEntry === undefined ? undefined : rootEntry.fetchTime, this._queryCacheExpirationTime);
    };
    _proto.retain = function retain(operation) {
      var _this2 = this;
      var id = operation.request.identifier;
      var disposed = false;
      var dispose = function dispose() {
        if (disposed) {
          return;
        }
        disposed = true;
        var rootEntry2 = _this2._roots.get(id);
        if (rootEntry2 == null) {
          return;
        }
        rootEntry2.refCount--;
        if (rootEntry2.refCount === 0) {
          var _queryCacheExpirationTime = _this2._queryCacheExpirationTime;
          var rootEntryIsStale = rootEntry2.fetchTime != null && _queryCacheExpirationTime != null && rootEntry2.fetchTime <= Date.now() - _queryCacheExpirationTime;
          if (rootEntryIsStale) {
            _this2._roots["delete"](id);
            _this2.scheduleGC();
          } else {
            _this2._releaseBuffer.push(id);
            if (_this2._releaseBuffer.length > _this2._gcReleaseBufferSize) {
              var _id = _this2._releaseBuffer.shift();
              _this2._roots["delete"](_id);
              _this2.scheduleGC();
            }
          }
        }
      };
      var rootEntry = this._roots.get(id);
      if (rootEntry != null) {
        if (rootEntry.refCount === 0) {
          this._releaseBuffer = this._releaseBuffer.filter(function(_id) {
            return _id !== id;
          });
        }
        rootEntry.refCount += 1;
      } else {
        this._roots.set(id, {
          operation,
          refCount: 1,
          epoch: null,
          fetchTime: null
        });
      }
      return {
        dispose
      };
    };
    _proto.lookup = function lookup(selector) {
      var source = this.getSource();
      var snapshot = RelayReader.read(source, selector, this._resolverCache);
      if (true) {
        deepFreeze(snapshot);
      }
      return snapshot;
    };
    _proto.notify = function notify(sourceOperation, invalidateStore) {
      var _this3 = this;
      var log = this.__log;
      if (log != null) {
        log({
          name: "store.notify.start",
          sourceOperation
        });
      }
      this._currentWriteEpoch++;
      if (invalidateStore === true) {
        this._globalInvalidationEpoch = this._currentWriteEpoch;
      }
      if (RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
        this._resolverCache.invalidateDataIDs(this._updatedRecordIDs);
      }
      var source = this.getSource();
      var updatedOwners = [];
      this._storeSubscriptions.updateSubscriptions(source, this._updatedRecordIDs, updatedOwners, sourceOperation);
      this._invalidationSubscriptions.forEach(function(subscription) {
        _this3._updateInvalidationSubscription(subscription, invalidateStore === true);
      });
      if (log != null) {
        log({
          name: "store.notify.complete",
          sourceOperation,
          updatedRecordIDs: this._updatedRecordIDs,
          invalidatedRecordIDs: this._invalidatedRecordIDs
        });
      }
      this._updatedRecordIDs.clear();
      this._invalidatedRecordIDs.clear();
      if (sourceOperation != null) {
        var id = sourceOperation.request.identifier;
        var rootEntry = this._roots.get(id);
        if (rootEntry != null) {
          rootEntry.epoch = this._currentWriteEpoch;
          rootEntry.fetchTime = Date.now();
        } else if (sourceOperation.request.node.params.operationKind === "query" && this._gcReleaseBufferSize > 0 && this._releaseBuffer.length < this._gcReleaseBufferSize) {
          var temporaryRootEntry = {
            operation: sourceOperation,
            refCount: 0,
            epoch: this._currentWriteEpoch,
            fetchTime: Date.now()
          };
          this._releaseBuffer.push(id);
          this._roots.set(id, temporaryRootEntry);
        }
      }
      return updatedOwners;
    };
    _proto.publish = function publish(source, idsMarkedForInvalidation) {
      var target = this._getMutableRecordSource();
      updateTargetFromSource(target, source, this._currentWriteEpoch + 1, idsMarkedForInvalidation, this._updatedRecordIDs, this._invalidatedRecordIDs);
      var log = this.__log;
      if (log != null) {
        log({
          name: "store.publish",
          source,
          optimistic: target === this._optimisticSource
        });
      }
    };
    _proto.subscribe = function subscribe(snapshot, callback) {
      return this._storeSubscriptions.subscribe(snapshot, callback);
    };
    _proto.holdGC = function holdGC() {
      var _this4 = this;
      if (this._gcRun) {
        this._gcRun = null;
        this._shouldScheduleGC = true;
      }
      this._gcHoldCounter++;
      var dispose = function dispose() {
        if (_this4._gcHoldCounter > 0) {
          _this4._gcHoldCounter--;
          if (_this4._gcHoldCounter === 0 && _this4._shouldScheduleGC) {
            _this4.scheduleGC();
            _this4._shouldScheduleGC = false;
          }
        }
      };
      return {
        dispose
      };
    };
    _proto.toJSON = function toJSON() {
      return "RelayModernStore()";
    };
    _proto.getEpoch = function getEpoch() {
      return this._currentWriteEpoch;
    };
    _proto.__getUpdatedRecordIDs = function __getUpdatedRecordIDs() {
      return this._updatedRecordIDs;
    };
    _proto.lookupInvalidationState = function lookupInvalidationState(dataIDs) {
      var _this5 = this;
      var invalidations = new Map;
      dataIDs.forEach(function(dataID) {
        var _RelayModernRecord$ge;
        var record = _this5.getSource().get(dataID);
        invalidations.set(dataID, (_RelayModernRecord$ge = RelayModernRecord.getInvalidationEpoch(record)) !== null && _RelayModernRecord$ge !== undefined ? _RelayModernRecord$ge : null);
      });
      invalidations.set("global", this._globalInvalidationEpoch);
      return {
        dataIDs,
        invalidations
      };
    };
    _proto.checkInvalidationState = function checkInvalidationState(prevInvalidationState) {
      var latestInvalidationState = this.lookupInvalidationState(prevInvalidationState.dataIDs);
      var currentInvalidations = latestInvalidationState.invalidations;
      var prevInvalidations = prevInvalidationState.invalidations;
      if (currentInvalidations.get("global") !== prevInvalidations.get("global")) {
        return true;
      }
      var _iterator = (0, _createForOfIteratorHelper2["default"])(prevInvalidationState.dataIDs), _step;
      try {
        for (_iterator.s();!(_step = _iterator.n()).done; ) {
          var dataID = _step.value;
          if (currentInvalidations.get(dataID) !== prevInvalidations.get(dataID)) {
            return true;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return false;
    };
    _proto.subscribeToInvalidationState = function subscribeToInvalidationState(invalidationState, callback) {
      var _this6 = this;
      var subscription = {
        callback,
        invalidationState
      };
      var dispose = function dispose() {
        _this6._invalidationSubscriptions["delete"](subscription);
      };
      this._invalidationSubscriptions.add(subscription);
      return {
        dispose
      };
    };
    _proto._updateInvalidationSubscription = function _updateInvalidationSubscription(subscription, invalidatedStore) {
      var _this7 = this;
      var { callback, invalidationState } = subscription;
      var dataIDs = invalidationState.dataIDs;
      var isSubscribedToInvalidatedIDs = invalidatedStore || dataIDs.some(function(dataID) {
        return _this7._invalidatedRecordIDs.has(dataID);
      });
      if (!isSubscribedToInvalidatedIDs) {
        return;
      }
      callback();
    };
    _proto.snapshot = function snapshot() {
      !(this._optimisticSource == null) && invariant(false, "RelayModernStore: Unexpected call to snapshot() while a previous snapshot exists.");
      var log = this.__log;
      if (log != null) {
        log({
          name: "store.snapshot"
        });
      }
      this._storeSubscriptions.snapshotSubscriptions(this.getSource());
      if (this._gcRun) {
        this._gcRun = null;
        this._shouldScheduleGC = true;
      }
      this._optimisticSource = RelayOptimisticRecordSource.create(this.getSource());
    };
    _proto.restore = function restore() {
      !(this._optimisticSource != null) && invariant(false, "RelayModernStore: Unexpected call to restore(), expected a snapshot to exist (make sure to call snapshot()).");
      var log = this.__log;
      if (log != null) {
        log({
          name: "store.restore"
        });
      }
      this._optimisticSource = null;
      if (this._shouldScheduleGC) {
        this.scheduleGC();
      }
      this._storeSubscriptions.restoreSubscriptions();
    };
    _proto.scheduleGC = function scheduleGC() {
      if (this._gcHoldCounter > 0) {
        this._shouldScheduleGC = true;
        return;
      }
      if (this._gcRun) {
        return;
      }
      this._gcRun = this._collect();
      this._gcScheduler(this._gcStep);
    };
    _proto.__gc = function __gc() {
      if (this._optimisticSource != null) {
        return;
      }
      var gcRun = this._collect();
      while (!gcRun.next().done) {
      }
    };
    _proto._collect = function* _collect() {
      top:
        while (true) {
          var startEpoch = this._currentWriteEpoch;
          var references = new Set;
          var _iterator2 = (0, _createForOfIteratorHelper2["default"])(this._roots.values()), _step2;
          try {
            for (_iterator2.s();!(_step2 = _iterator2.n()).done; ) {
              var operation = _step2.value.operation;
              var selector = operation.root;
              RelayReferenceMarker.mark(this._recordSource, selector, references, this._operationLoader, this._shouldProcessClientComponents);
              yield;
              if (startEpoch !== this._currentWriteEpoch) {
                continue top;
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
          var log = this.__log;
          if (log != null) {
            log({
              name: "store.gc",
              references
            });
          }
          if (references.size === 0) {
            this._recordSource.clear();
          } else {
            var storeIDs = this._recordSource.getRecordIDs();
            for (var ii = 0;ii < storeIDs.length; ii++) {
              var dataID = storeIDs[ii];
              if (!references.has(dataID)) {
                this._recordSource.remove(dataID);
              }
            }
          }
          return;
        }
    };
    return RelayModernStore2;
  }();
  module.exports = RelayModernStore;
});

// node_modules/relay-runtime/lib/subscription/requestSubscription.js
var require_requestSubscription = __commonJS((exports, module) => {
  var requestSubscription = function(environment, config) {
    var subscription = getRequest(config.subscription);
    if (subscription.params.operationKind !== "subscription") {
      throw new Error("requestSubscription: Must use Subscription operation");
    }
    var { configs, onCompleted, onError, onNext, variables, cacheConfig } = config;
    var operation = createOperationDescriptor(subscription, variables, cacheConfig);
    warning(!(config.updater && configs), "requestSubscription: Expected only one of `updater` and `configs` to be provided");
    var _ref = configs ? RelayDeclarativeMutationConfig.convert(configs, subscription, null, config.updater) : config, updater = _ref.updater;
    var sub = environment.executeSubscription({
      operation,
      updater
    }).subscribe({
      next: function next(responses) {
        if (onNext != null) {
          var selector = operation.fragment;
          var nextID;
          if (Array.isArray(responses)) {
            var _responses$, _responses$$extension;
            nextID = (_responses$ = responses[0]) === null || _responses$ === undefined ? undefined : (_responses$$extension = _responses$.extensions) === null || _responses$$extension === undefined ? undefined : _responses$$extension.__relay_subscription_root_id;
          } else {
            var _responses$extensions;
            nextID = (_responses$extensions = responses.extensions) === null || _responses$extensions === undefined ? undefined : _responses$extensions.__relay_subscription_root_id;
          }
          if (typeof nextID === "string") {
            selector = createReaderSelector(selector.node, nextID, selector.variables, selector.owner);
          }
          var data = environment.lookup(selector).data;
          onNext(data);
        }
      },
      error: onError,
      complete: onCompleted
    });
    return {
      dispose: sub.unsubscribe
    };
  };
  var RelayDeclarativeMutationConfig = require_RelayDeclarativeMutationConfig();
  var _require = require_GraphQLTag();
  var getRequest = _require.getRequest;
  var _require2 = require_RelayModernOperationDescriptor();
  var createOperationDescriptor = _require2.createOperationDescriptor;
  var _require3 = require_RelayModernSelector();
  var createReaderSelector = _require3.createReaderSelector;
  var warning = require_warning();
  module.exports = requestSubscription;
});

// node_modules/relay-runtime/lib/util/createPayloadFor3DField.js
var require_createPayloadFor3DField = __commonJS((exports, module) => {
  var createPayloadFor3DField = function(name, operation, component, response) {
    var data = (0, _objectSpread2["default"])({}, response);
    data[getModuleComponentKey(name)] = component;
    data[getModuleOperationKey(name)] = operation;
    return data;
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var _require = require_RelayStoreUtils();
  var getModuleComponentKey = _require.getModuleComponentKey;
  var getModuleOperationKey = _require.getModuleOperationKey;
  module.exports = createPayloadFor3DField;
});

// node_modules/relay-runtime/lib/util/isEmptyObject.js
var require_isEmptyObject = __commonJS((exports, module) => {
  var isEmptyObject = function(obj) {
    for (var _key in obj) {
      if (hasOwnProperty.call(obj, _key)) {
        return false;
      }
    }
    return true;
  };
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  module.exports = isEmptyObject;
});

// node_modules/relay-runtime/lib/util/getFragmentIdentifier.js
var require_getFragmentIdentifier = __commonJS((exports, module) => {
  var getFragmentIdentifier = function(fragmentNode, fragmentRef) {
    var selector = getSelector(fragmentNode, fragmentRef);
    var fragmentOwnerIdentifier = selector == null ? "null" : selector.kind === "SingularReaderSelector" ? selector.owner.identifier : "[" + selector.selectors.map(function(sel) {
      return sel.owner.identifier;
    }).join(",") + "]";
    var fragmentVariables = getVariablesFromFragment(fragmentNode, fragmentRef);
    var dataIDs = getDataIDsFromFragment(fragmentNode, fragmentRef);
    if (RelayFeatureFlags.ENABLE_GETFRAGMENTIDENTIFIER_OPTIMIZATION) {
      var ids = typeof dataIDs === "undefined" ? "missing" : dataIDs == null ? "null" : Array.isArray(dataIDs) ? "[" + dataIDs.join(",") + "]" : dataIDs;
      ids = RelayFeatureFlags.STRING_INTERN_LEVEL <= 1 ? ids : intern(ids, RelayFeatureFlags.MAX_DATA_ID_LENGTH);
      return fragmentOwnerIdentifier + "/" + fragmentNode.name + "/" + (fragmentVariables == null || isEmptyObject(fragmentVariables) ? "{}" : JSON.stringify(stableCopy(fragmentVariables))) + "/" + ids;
    } else {
      var _JSON$stringify;
      var _ids = (_JSON$stringify = JSON.stringify(dataIDs)) !== null && _JSON$stringify !== undefined ? _JSON$stringify : "missing";
      _ids = RelayFeatureFlags.STRING_INTERN_LEVEL <= 1 ? _ids : intern(_ids, RelayFeatureFlags.MAX_DATA_ID_LENGTH);
      return fragmentOwnerIdentifier + "/" + fragmentNode.name + "/" + JSON.stringify(stableCopy(fragmentVariables)) + "/" + _ids;
    }
  };
  var _require = require_RelayModernSelector();
  var getDataIDsFromFragment = _require.getDataIDsFromFragment;
  var getSelector = _require.getSelector;
  var getVariablesFromFragment = _require.getVariablesFromFragment;
  var isEmptyObject = require_isEmptyObject();
  var RelayFeatureFlags = require_RelayFeatureFlags();
  var stableCopy = require_stableCopy();
  var _require2 = require_StringInterner();
  var intern = _require2.intern;
  module.exports = getFragmentIdentifier;
});

// node_modules/relay-runtime/lib/util/getRefetchMetadata.js
var require_getRefetchMetadata = __commonJS((exports, module) => {
  var getRefetchMetadata = function(fragmentNode, componentDisplayName) {
    var _fragmentNode$metadat, _fragmentNode$metadat2;
    !(((_fragmentNode$metadat = fragmentNode.metadata) === null || _fragmentNode$metadat === undefined ? undefined : _fragmentNode$metadat.plural) !== true) && invariant(false, "Relay: getRefetchMetadata(): Expected fragment `%s` not to be plural when using `%s`. Remove `@relay(plural: true)` from fragment `%s` in order to use it with `%s`.", fragmentNode.name, componentDisplayName, fragmentNode.name, componentDisplayName);
    var refetchMetadata = (_fragmentNode$metadat2 = fragmentNode.metadata) === null || _fragmentNode$metadat2 === undefined ? undefined : _fragmentNode$metadat2.refetch;
    !(refetchMetadata != null) && invariant(false, "Relay: getRefetchMetadata(): Expected fragment `%s` to be refetchable when using `%s`. Did you forget to add a @refetchable directive to the fragment?", componentDisplayName, fragmentNode.name);
    var refetchableRequest = refetchMetadata.operation["default"] ? refetchMetadata.operation["default"] : refetchMetadata.operation;
    var fragmentRefPathInResponse = refetchMetadata.fragmentPathInResult;
    !(typeof refetchableRequest !== "string") && invariant(false, "Relay: getRefetchMetadata(): Expected refetch query to be an operation and not a string when using `%s`. If you're seeing this, this is likely a bug in Relay.", componentDisplayName);
    var identifierInfo = refetchMetadata.identifierInfo;
    if (identifierInfo != null) {
      !(identifierInfo.identifierField == null || typeof identifierInfo.identifierField === "string") && invariant(false, "Relay: getRefetchMetadata(): Expected `identifierField` to be a string.");
      !(identifierInfo.identifierQueryVariableName == null || typeof identifierInfo.identifierQueryVariableName === "string") && invariant(false, "Relay: getRefetchMetadata(): Expected `identifierQueryVariableName` to be a string.");
    }
    return {
      fragmentRefPathInResponse,
      identifierInfo,
      refetchableRequest,
      refetchMetadata
    };
  };
  var invariant = require_browser();
  module.exports = getRefetchMetadata;
});

// node_modules/relay-runtime/lib/util/getPaginationMetadata.js
var require_getPaginationMetadata = __commonJS((exports, module) => {
  var getPaginationMetadata = function(fragmentNode, componentDisplayName) {
    var _fragmentNode$metadat, _fragmentNode$metadat2;
    var _getRefetchMetadata = getRefetchMetadata(fragmentNode, componentDisplayName), paginationRequest = _getRefetchMetadata.refetchableRequest, refetchMetadata = _getRefetchMetadata.refetchMetadata;
    var paginationMetadata = refetchMetadata.connection;
    !(paginationMetadata != null) && invariant(false, "Relay: getPaginationMetadata(): Expected fragment `%s` to include a connection when using `%s`. Did you forget to add a @connection directive to the connection field in the fragment?", componentDisplayName, fragmentNode.name);
    var connectionPathInFragmentData = paginationMetadata.path;
    var connectionMetadata = ((_fragmentNode$metadat = (_fragmentNode$metadat2 = fragmentNode.metadata) === null || _fragmentNode$metadat2 === undefined ? undefined : _fragmentNode$metadat2.connection) !== null && _fragmentNode$metadat !== undefined ? _fragmentNode$metadat : [])[0];
    !(connectionMetadata != null) && invariant(false, "Relay: getPaginationMetadata(): Expected fragment `%s` to include a connection when using `%s`. Did you forget to add a @connection directive to the connection field in the fragment?", componentDisplayName, fragmentNode.name);
    var identifierInfo = refetchMetadata.identifierInfo;
    !((identifierInfo === null || identifierInfo === undefined ? undefined : identifierInfo.identifierField) == null || typeof identifierInfo.identifierField === "string") && invariant(false, "Relay: getRefetchMetadata(): Expected `identifierField` to be a string.");
    return {
      connectionPathInFragmentData,
      identifierField: identifierInfo === null || identifierInfo === undefined ? undefined : identifierInfo.identifierField,
      paginationRequest,
      paginationMetadata,
      stream: connectionMetadata.stream === true
    };
  };
  var getRefetchMetadata = require_getRefetchMetadata();
  var invariant = require_browser();
  module.exports = getPaginationMetadata;
});

// node_modules/relay-runtime/lib/util/getPaginationVariables.js
var require_getPaginationVariables = __commonJS((exports, module) => {
  var getPaginationVariables = function(direction, count, cursor, baseVariables, extraVariables, paginationMetadata) {
    var _objectSpread3;
    var { backward: backwardMetadata, forward: forwardMetadata } = paginationMetadata;
    if (direction === "backward") {
      var _objectSpread2;
      !(backwardMetadata != null && backwardMetadata.count != null && backwardMetadata.cursor != null) && invariant(false, "Relay: Expected backward pagination metadata to be available. If you're seeing this, this is likely a bug in Relay.");
      warning(!extraVariables.hasOwnProperty(backwardMetadata.cursor), "Relay: `UNSTABLE_extraVariables` provided by caller should not contain cursor variable `%s`. This variable is automatically determined by Relay.", backwardMetadata.cursor);
      warning(!extraVariables.hasOwnProperty(backwardMetadata.count), "Relay: `UNSTABLE_extraVariables` provided by caller should not contain count variable `%s`. This variable is automatically determined by Relay.", backwardMetadata.count);
      var _paginationVariables = (0, _objectSpread4["default"])((0, _objectSpread4["default"])((0, _objectSpread4["default"])({}, baseVariables), extraVariables), {}, (_objectSpread2 = {}, (0, _defineProperty2["default"])(_objectSpread2, backwardMetadata.cursor, cursor), (0, _defineProperty2["default"])(_objectSpread2, backwardMetadata.count, count), _objectSpread2));
      if (forwardMetadata && forwardMetadata.cursor) {
        _paginationVariables[forwardMetadata.cursor] = null;
      }
      if (forwardMetadata && forwardMetadata.count) {
        _paginationVariables[forwardMetadata.count] = null;
      }
      return _paginationVariables;
    }
    !(forwardMetadata != null && forwardMetadata.count != null && forwardMetadata.cursor != null) && invariant(false, "Relay: Expected forward pagination metadata to be available. If you're seeing this, this is likely a bug in Relay.");
    warning(!extraVariables.hasOwnProperty(forwardMetadata.cursor), "Relay: `UNSTABLE_extraVariables` provided by caller should not contain cursor variable `%s`. This variable is automatically determined by Relay.", forwardMetadata.cursor);
    warning(!extraVariables.hasOwnProperty(forwardMetadata.count), "Relay: `UNSTABLE_extraVariables` provided by caller should not contain count variable `%s`. This variable is automatically determined by Relay.", forwardMetadata.count);
    var paginationVariables = (0, _objectSpread4["default"])((0, _objectSpread4["default"])((0, _objectSpread4["default"])({}, baseVariables), extraVariables), {}, (_objectSpread3 = {}, (0, _defineProperty2["default"])(_objectSpread3, forwardMetadata.cursor, cursor), (0, _defineProperty2["default"])(_objectSpread3, forwardMetadata.count, count), _objectSpread3));
    if (backwardMetadata && backwardMetadata.cursor) {
      paginationVariables[backwardMetadata.cursor] = null;
    }
    if (backwardMetadata && backwardMetadata.count) {
      paginationVariables[backwardMetadata.count] = null;
    }
    return paginationVariables;
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _defineProperty2 = _interopRequireDefault(require_defineProperty());
  var _objectSpread4 = _interopRequireDefault(require_objectSpread2());
  var invariant = require_browser();
  var warning = require_warning();
  module.exports = getPaginationVariables;
});

// node_modules/relay-runtime/lib/util/getValueAtPath.js
var require_getValueAtPath = __commonJS((exports, module) => {
  var getValueAtPath = function(data, path) {
    var result = data;
    var _iterator = (0, _createForOfIteratorHelper2["default"])(path), _step;
    try {
      for (_iterator.s();!(_step = _iterator.n()).done; ) {
        var key = _step.value;
        if (result == null) {
          return null;
        }
        if (typeof key === "number") {
          !Array.isArray(result) && invariant(false, "Relay: Expected an array when extracting value at path. If you're seeing this, this is likely a bug in Relay.");
          result = result[key];
        } else {
          !(typeof result === "object" && !Array.isArray(result)) && invariant(false, "Relay: Expected an object when extracting value at path. If you're seeing this, this is likely a bug in Relay.");
          result = result[key];
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return result;
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var invariant = require_browser();
  module.exports = getValueAtPath;
});

// node_modules/relay-runtime/lib/util/RelayProfiler.js
var require_RelayProfiler = __commonJS((exports, module) => {
  var removeFromArray = function(array, element) {
    var index = array.indexOf(element);
    if (index !== -1) {
      array.splice(index, 1);
    }
  };
  var profileHandlersByName = {};
  var defaultProfiler = {
    stop: function stop() {
    }
  };
  var RelayProfiler = {
    profile: function profile(name, state) {
      var handlers = profileHandlersByName[name];
      if (handlers && handlers.length > 0) {
        var stopHandlers = [];
        for (var ii = handlers.length - 1;ii >= 0; ii--) {
          var stopHandler = handlers[ii](name, state);
          stopHandlers.unshift(stopHandler);
        }
        return {
          stop: function stop(error) {
            stopHandlers.forEach(function(stopHandler2) {
              return stopHandler2(error);
            });
          }
        };
      }
      return defaultProfiler;
    },
    attachProfileHandler: function attachProfileHandler(name, handler) {
      if (!profileHandlersByName.hasOwnProperty(name)) {
        profileHandlersByName[name] = [];
      }
      profileHandlersByName[name].push(handler);
    },
    detachProfileHandler: function detachProfileHandler(name, handler) {
      if (profileHandlersByName.hasOwnProperty(name)) {
        removeFromArray(profileHandlersByName[name], handler);
      }
    }
  };
  module.exports = RelayProfiler;
});

// node_modules/relay-runtime/lib/index.js
var require_lib = __commonJS((exports, module) => {
  var ConnectionHandler = require_ConnectionHandler();
  var ConnectionInterface = require_ConnectionInterface();
  var MutationHandlers = require_MutationHandlers();
  var RelayDefaultHandlerProvider = require_RelayDefaultHandlerProvider();
  var applyOptimisticMutation = require_applyOptimisticMutation();
  var commitLocalUpdate = require_commitLocalUpdate();
  var commitMutation = require_commitMutation();
  var RelayDeclarativeMutationConfig = require_RelayDeclarativeMutationConfig();
  var RelayNetwork = require_RelayNetwork();
  var RelayObservable = require_RelayObservable();
  var RelayQueryResponseCache = require_RelayQueryResponseCache();
  var fetchQuery = require_fetchQuery();
  var fetchQuery_DEPRECATED = require_fetchQuery_DEPRECATED();
  var fetchQueryInternal = require_fetchQueryInternal();
  var GraphQLTag = require_GraphQLTag();
  var PreloadableQueryRegistry = require_PreloadableQueryRegistry();
  var _require = require_ClientID();
  var generateClientID = _require.generateClientID;
  var generateUniqueClientID = _require.generateUniqueClientID;
  var isClientID = _require.isClientID;
  var createFragmentSpecResolver = require_createFragmentSpecResolver();
  var createRelayContext = require_createRelayContext();
  var _require2 = require_LiveResolverSuspenseSentinel();
  var suspenseSentinel = _require2.suspenseSentinel;
  var isRelayModernEnvironment = require_isRelayModernEnvironment();
  var normalizeResponse = require_normalizeResponse();
  var readInlineData = require_readInlineData();
  var RelayConcreteVariables = require_RelayConcreteVariables();
  var RelayModernEnvironment = require_RelayModernEnvironment();
  var RelayModernOperationDescriptor = require_RelayModernOperationDescriptor();
  var RelayModernRecord = require_RelayModernRecord();
  var RelayModernSelector = require_RelayModernSelector();
  var RelayModernStore = require_RelayModernStore();
  var RelayOperationTracker = require_RelayOperationTracker();
  var RelayRecordSource = require_RelayRecordSource();
  var RelayStoreUtils = require_RelayStoreUtils();
  var ResolverFragments = require_ResolverFragments();
  var ViewerPattern = require_ViewerPattern();
  var requestSubscription = require_requestSubscription();
  var createPayloadFor3DField = require_createPayloadFor3DField();
  var deepFreeze = require_deepFreeze();
  var getFragmentIdentifier = require_getFragmentIdentifier();
  var getPaginationMetadata = require_getPaginationMetadata();
  var getPaginationVariables = require_getPaginationVariables();
  var getPendingOperationsForFragment = require_getPendingOperationsForFragment();
  var getRefetchMetadata = require_getRefetchMetadata();
  var getRelayHandleKey = require_getRelayHandleKey();
  var getRequestIdentifier = require_getRequestIdentifier();
  var getValueAtPath = require_getValueAtPath();
  var handlePotentialSnapshotErrors = require_handlePotentialSnapshotErrors();
  var isPromise = require_isPromise();
  var isScalarAndEqual = require_isScalarAndEqual();
  var recycleNodesInto = require_recycleNodesInto();
  var RelayConcreteNode = require_RelayConcreteNode();
  var RelayDefaultHandleKey = require_RelayDefaultHandleKey();
  var RelayError = require_RelayError();
  var RelayFeatureFlags = require_RelayFeatureFlags();
  var RelayProfiler = require_RelayProfiler();
  var RelayReplaySubject = require_RelayReplaySubject();
  var stableCopy = require_stableCopy();
  var withProvidedVariables = require_withProvidedVariables();
  if (true) {
    mapStr = typeof Map !== "function" ? "Map" : null;
    setStr = typeof Set !== "function" ? "Set" : null;
    promiseStr = typeof Promise !== "function" ? "Promise" : null;
    objStr = typeof Object.assign !== "function" ? "Object.assign" : null;
    if (mapStr || setStr || promiseStr || objStr) {
      throw new Error("relay-runtime requires ".concat([mapStr, setStr, promiseStr, objStr].filter(Boolean).join(", and "), " to exist. ") + "Use a polyfill to provide these for older browsers.");
    }
  }
  var mapStr;
  var setStr;
  var promiseStr;
  var objStr;
  module.exports = {
    Environment: RelayModernEnvironment,
    Network: RelayNetwork,
    Observable: RelayObservable,
    QueryResponseCache: RelayQueryResponseCache,
    RecordSource: RelayRecordSource,
    Record: RelayModernRecord,
    ReplaySubject: RelayReplaySubject,
    Store: RelayModernStore,
    areEqualSelectors: RelayModernSelector.areEqualSelectors,
    createFragmentSpecResolver,
    createNormalizationSelector: RelayModernSelector.createNormalizationSelector,
    createOperationDescriptor: RelayModernOperationDescriptor.createOperationDescriptor,
    createReaderSelector: RelayModernSelector.createReaderSelector,
    createRequestDescriptor: RelayModernOperationDescriptor.createRequestDescriptor,
    getArgumentValues: RelayStoreUtils.getArgumentValues,
    getDataIDsFromFragment: RelayModernSelector.getDataIDsFromFragment,
    getDataIDsFromObject: RelayModernSelector.getDataIDsFromObject,
    getNode: GraphQLTag.getNode,
    getFragment: GraphQLTag.getFragment,
    getInlineDataFragment: GraphQLTag.getInlineDataFragment,
    getModuleComponentKey: RelayStoreUtils.getModuleComponentKey,
    getModuleOperationKey: RelayStoreUtils.getModuleOperationKey,
    getPaginationFragment: GraphQLTag.getPaginationFragment,
    getPluralSelector: RelayModernSelector.getPluralSelector,
    getRefetchableFragment: GraphQLTag.getRefetchableFragment,
    getRequest: GraphQLTag.getRequest,
    getRequestIdentifier,
    getSelector: RelayModernSelector.getSelector,
    getSelectorsFromObject: RelayModernSelector.getSelectorsFromObject,
    getSingularSelector: RelayModernSelector.getSingularSelector,
    getStorageKey: RelayStoreUtils.getStorageKey,
    getVariablesFromFragment: RelayModernSelector.getVariablesFromFragment,
    getVariablesFromObject: RelayModernSelector.getVariablesFromObject,
    getVariablesFromPluralFragment: RelayModernSelector.getVariablesFromPluralFragment,
    getVariablesFromSingularFragment: RelayModernSelector.getVariablesFromSingularFragment,
    handlePotentialSnapshotErrors,
    graphql: GraphQLTag.graphql,
    isFragment: GraphQLTag.isFragment,
    isInlineDataFragment: GraphQLTag.isInlineDataFragment,
    suspenseSentinel,
    isRequest: GraphQLTag.isRequest,
    readInlineData,
    MutationTypes: RelayDeclarativeMutationConfig.MutationTypes,
    RangeOperations: RelayDeclarativeMutationConfig.RangeOperations,
    DefaultHandlerProvider: RelayDefaultHandlerProvider,
    ConnectionHandler,
    MutationHandlers,
    VIEWER_ID: ViewerPattern.VIEWER_ID,
    VIEWER_TYPE: ViewerPattern.VIEWER_TYPE,
    applyOptimisticMutation,
    commitLocalUpdate,
    commitMutation,
    fetchQuery,
    fetchQuery_DEPRECATED,
    isRelayModernEnvironment,
    requestSubscription,
    ConnectionInterface,
    PreloadableQueryRegistry,
    RelayProfiler,
    createPayloadFor3DField,
    RelayConcreteNode,
    RelayError,
    RelayFeatureFlags,
    DEFAULT_HANDLE_KEY: RelayDefaultHandleKey.DEFAULT_HANDLE_KEY,
    FRAGMENTS_KEY: RelayStoreUtils.FRAGMENTS_KEY,
    FRAGMENT_OWNER_KEY: RelayStoreUtils.FRAGMENT_OWNER_KEY,
    ID_KEY: RelayStoreUtils.ID_KEY,
    REF_KEY: RelayStoreUtils.REF_KEY,
    REFS_KEY: RelayStoreUtils.REFS_KEY,
    ROOT_ID: RelayStoreUtils.ROOT_ID,
    ROOT_TYPE: RelayStoreUtils.ROOT_TYPE,
    TYPENAME_KEY: RelayStoreUtils.TYPENAME_KEY,
    deepFreeze,
    generateClientID,
    generateUniqueClientID,
    getRelayHandleKey,
    isClientID,
    isPromise,
    isScalarAndEqual,
    recycleNodesInto,
    stableCopy,
    getFragmentIdentifier,
    getRefetchMetadata,
    getPaginationMetadata,
    getPaginationVariables,
    getPendingOperationsForFragment,
    getValueAtPath,
    __internal: {
      ResolverFragments,
      OperationTracker: RelayOperationTracker,
      createRelayContext,
      getOperationVariables: RelayConcreteVariables.getOperationVariables,
      getLocalVariables: RelayConcreteVariables.getLocalVariables,
      fetchQuery: fetchQueryInternal.fetchQuery,
      fetchQueryDeduped: fetchQueryInternal.fetchQueryDeduped,
      getPromiseForActiveRequest: fetchQueryInternal.getPromiseForActiveRequest,
      getObservableForActiveRequest: fetchQueryInternal.getObservableForActiveRequest,
      normalizeResponse,
      withProvidedVariables
    }
  };
});

// node_modules/react-relay/lib/ReactRelayContext.js
var require_ReactRelayContext = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  var _require = require_lib();
  var createRelayContext = _require.__internal.createRelayContext;
  module.exports = createRelayContext(React);
});

// node_modules/@babel/runtime/helpers/assertThisInitialized.js
var require_assertThisInitialized = __commonJS((exports, module) => {
  var _assertThisInitialized = function(self) {
    if (self === undefined) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  };
  module.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/@babel/runtime/helpers/setPrototypeOf.js
var require_setPrototypeOf = __commonJS((exports, module) => {
  var _setPrototypeOf = function(o, p) {
    module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _setPrototypeOf(o, p);
  };
  module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/@babel/runtime/helpers/inheritsLoose.js
var require_inheritsLoose = __commonJS((exports, module) => {
  var _inheritsLoose = function(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    setPrototypeOf(subClass, superClass);
  };
  var setPrototypeOf = require_setPrototypeOf();
  module.exports = _inheritsLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/@babel/runtime/helpers/extends.js
var require_extends = __commonJS((exports, module) => {
  var _extends = function() {
    module.exports = _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1;i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    }, module.exports.__esModule = true, module.exports["default"] = module.exports;
    return _extends.apply(this, arguments);
  };
  module.exports = _extends, module.exports.__esModule = true, module.exports["default"] = module.exports;
});

// node_modules/react-relay/lib/assertFragmentMap.js
var require_assertFragmentMap = __commonJS((exports, module) => {
  var assertFragmentMap = function(componentName, fragmentSpec) {
    !(fragmentSpec && typeof fragmentSpec === "object") && invariant(false, "Could not create Relay Container for `%s`. Expected a set of GraphQL fragments, got `%s` instead.", componentName, fragmentSpec);
    for (var key in fragmentSpec) {
      if (fragmentSpec.hasOwnProperty(key)) {
        var fragment = fragmentSpec[key];
        !(fragment && (typeof fragment === "object" || typeof fragment === "function")) && invariant(false, "Could not create Relay Container for `%s`. The value of fragment `%s` was expected to be a fragment, got `%s` instead.", componentName, key, fragment);
      }
    }
  };
  var invariant = require_browser();
  module.exports = assertFragmentMap;
});

// node_modules/react-relay/lib/ReactRelayContainerUtils.js
var require_ReactRelayContainerUtils = __commonJS((exports, module) => {
  var getComponentName = function(component) {
    return component.displayName || component.name || "Component";
  };
  var getContainerName = function(Component) {
    return "Relay(" + getComponentName(Component) + ")";
  };
  module.exports = {
    getComponentName,
    getContainerName
  };
});

// node_modules/react-relay/lib/ReactRelayQueryRendererContext.js
var require_ReactRelayQueryRendererContext = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  module.exports = React.createContext({
    rootIsQueryRenderer: false
  });
});

// node_modules/react-relay/lib/buildReactRelayContainer.js
var require_buildReactRelayContainer = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  var buildReactRelayContainer = function(ComponentClass, fragmentSpec, createContainerWithFragments) {
    var containerName = getContainerName(ComponentClass);
    assertFragmentMap(getComponentName(ComponentClass), fragmentSpec);
    var fragments = {};
    for (var key in fragmentSpec) {
      fragments[key] = getFragment(fragmentSpec[key]);
    }
    var Container = createContainerWithFragments(ComponentClass, fragments);
    Container.displayName = containerName;
    function forwardRef2(props, ref) {
      var _queryRendererContext;
      var context = useContext(ReactRelayContext);
      !(context != null) && invariant(false, "`%s` tried to render a context that was not valid this means that `%s` was rendered outside of a query renderer.", containerName, containerName);
      var queryRendererContext = useContext(ReactRelayQueryRendererContext);
      return React.createElement(Container, (0, _extends2["default"])({}, props, {
        __relayContext: context,
        __rootIsQueryRenderer: (_queryRendererContext = queryRendererContext === null || queryRendererContext === undefined ? undefined : queryRendererContext.rootIsQueryRenderer) !== null && _queryRendererContext !== undefined ? _queryRendererContext : false,
        componentRef: props.componentRef || ref
      }));
    }
    forwardRef2.displayName = containerName;
    var ForwardContainer = React.forwardRef(forwardRef2);
    if (true) {
      ForwardContainer.__ComponentClass = ComponentClass;
      ForwardContainer.displayName = containerName;
    }
    return ForwardContainer;
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _extends2 = _interopRequireDefault(require_extends());
  var assertFragmentMap = require_assertFragmentMap();
  var _require = require_ReactRelayContainerUtils();
  var getComponentName = _require.getComponentName;
  var getContainerName = _require.getContainerName;
  var ReactRelayContext = require_ReactRelayContext();
  var ReactRelayQueryRendererContext = require_ReactRelayQueryRendererContext();
  var invariant = require_browser();
  var _require2 = require_lib();
  var getFragment = _require2.getFragment;
  var useContext = React.useContext;
  module.exports = buildReactRelayContainer;
});

// node_modules/react-relay/lib/isRelayEnvironment.js
var require_isRelayEnvironment = __commonJS((exports, module) => {
  var isRelayEnvironment = function(environment) {
    return typeof environment === "object" && environment !== null && typeof environment.check === "function" && typeof environment.lookup === "function" && typeof environment.retain === "function" && typeof environment.execute === "function" && typeof environment.subscribe === "function";
  };
  module.exports = isRelayEnvironment;
});

// node_modules/react-relay/lib/RelayContext.js
var require_RelayContext = __commonJS((exports, module) => {
  var assertRelayContext = function(relay) {
    !isRelayContext(relay) && invariant(false, "RelayContext: Expected `context.relay` to be an object conforming to the `RelayContext` interface, got `%s`.", relay);
    return relay;
  };
  var isRelayContext = function(context) {
    return typeof context === "object" && context !== null && !Array.isArray(context) && isRelayEnvironment(context.environment);
  };
  var isRelayEnvironment = require_isRelayEnvironment();
  var invariant = require_browser();
  module.exports = {
    assertRelayContext,
    isRelayContext
  };
});

// node_modules/react-relay/lib/ReactRelayFragmentContainer.js
var require_ReactRelayFragmentContainer = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  var createContainerWithFragments = function(Component2, fragments) {
    var _class;
    var containerName = getContainerName(Component2);
    return _class = function(_React$Component) {
      (0, _inheritsLoose2["default"])(_class2, _React$Component);
      function _class2(props) {
        var _props$__rootIsQueryR, _this;
        _this = _React$Component.call(this, props) || this;
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_handleFragmentDataUpdate", function() {
          var resolverFromThisUpdate = _this.state.resolver;
          _this.setState(function(updatedState) {
            return resolverFromThisUpdate === updatedState.resolver ? {
              data: updatedState.resolver.resolve(),
              relayProp: getRelayProp(updatedState.relayProp.environment)
            } : null;
          });
        });
        var relayContext = assertRelayContext(props.__relayContext);
        var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== undefined ? _props$__rootIsQueryR : false;
        var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);
        _this.state = {
          data: resolver.resolve(),
          prevProps: props,
          prevPropsContext: relayContext,
          relayProp: getRelayProp(relayContext.environment),
          resolver
        };
        return _this;
      }
      _class2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
        var _nextProps$__rootIsQu;
        var prevProps = prevState.prevProps;
        var relayContext = assertRelayContext(nextProps.__relayContext);
        var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== undefined ? _nextProps$__rootIsQu : false;
        var prevIDs = getDataIDsFromObject(fragments, prevProps);
        var nextIDs = getDataIDsFromObject(fragments, nextProps);
        var resolver = prevState.resolver;
        if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevIDs, nextIDs)) {
          resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);
          return {
            data: resolver.resolve(),
            prevPropsContext: relayContext,
            prevProps: nextProps,
            relayProp: getRelayProp(relayContext.environment),
            resolver
          };
        } else {
          resolver.setProps(nextProps);
          var data = resolver.resolve();
          if (data !== prevState.data) {
            return {
              data,
              prevProps: nextProps,
              prevPropsContext: relayContext,
              relayProp: getRelayProp(relayContext.environment)
            };
          }
        }
        return null;
      };
      var _proto = _class2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
      };
      _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
        if (this.state.resolver !== prevState.resolver) {
          prevState.resolver.dispose();
          this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
        } else {
          this._rerenderIfStoreHasChanged();
        }
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.state.resolver.dispose();
      };
      _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
        if (nextState.data !== this.state.data) {
          return true;
        }
        var keys = Object.keys(nextProps);
        for (var ii = 0;ii < keys.length; ii++) {
          var key = keys[ii];
          if (key === "__relayContext") {
            if (nextState.prevPropsContext.environment !== this.state.prevPropsContext.environment) {
              return true;
            }
          } else {
            if (!fragments.hasOwnProperty(key) && !isScalarAndEqual(nextProps[key], this.props[key])) {
              return true;
            }
          }
        }
        return false;
      };
      _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {
        var _this$state = this.state, data = _this$state.data, resolver = _this$state.resolver;
        var maybeNewData = resolver.resolve();
        if (data !== maybeNewData) {
          this.setState({
            data: maybeNewData
          });
        }
      };
      _proto._subscribeToNewResolverAndRerenderIfStoreHasChanged = function _subscribeToNewResolverAndRerenderIfStoreHasChanged() {
        var _this$state2 = this.state, data = _this$state2.data, resolver = _this$state2.resolver;
        var maybeNewData = resolver.resolve();
        resolver.setCallback(this.props, this._handleFragmentDataUpdate);
        if (data !== maybeNewData) {
          this.setState({
            data: maybeNewData
          });
        }
      };
      _proto.render = function render() {
        var _this$props = this.props, componentRef = _this$props.componentRef, __relayContext = _this$props.__relayContext, __rootIsQueryRenderer = _this$props.__rootIsQueryRenderer, props = (0, _objectWithoutPropertiesLoose2["default"])(_this$props, _excluded);
        return React.createElement(Component2, (0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, props), this.state.data), {}, {
          ref: componentRef,
          relay: this.state.relayProp
        }));
      };
      return _class2;
    }(React.Component), (0, _defineProperty2["default"])(_class, "displayName", containerName), _class;
  };
  var getRelayProp = function(environment) {
    return {
      environment
    };
  };
  var createContainer = function(Component2, fragmentSpec) {
    return buildReactRelayContainer(Component2, fragmentSpec, createContainerWithFragments);
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
  var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
  var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
  var _defineProperty2 = _interopRequireDefault(require_defineProperty());
  var _excluded = ["componentRef", "__relayContext", "__rootIsQueryRenderer"];
  var buildReactRelayContainer = require_buildReactRelayContainer();
  var _require = require_ReactRelayContainerUtils();
  var getContainerName = _require.getContainerName;
  var _require2 = require_RelayContext();
  var assertRelayContext = _require2.assertRelayContext;
  var areEqual = require_areEqual();
  var _require3 = require_lib();
  var createFragmentSpecResolver = _require3.createFragmentSpecResolver;
  var getDataIDsFromObject = _require3.getDataIDsFromObject;
  var isScalarAndEqual = _require3.isScalarAndEqual;
  module.exports = {
    createContainer
  };
});

// node_modules/react-relay/lib/ReactRelayLocalQueryRenderer.js
var require_ReactRelayLocalQueryRenderer = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  var useDeepCompare = function(value) {
    var latestValue = React.useRef(value);
    if (!areEqual(latestValue.current, value)) {
      if (true) {
        deepFreeze(value);
      }
      latestValue.current = value;
    }
    return latestValue.current;
  };
  var ReactRelayLocalQueryRenderer = function(props) {
    var { environment, query, variables, render } = props;
    var latestVariables = useDeepCompare(variables);
    var operation = useMemo(function() {
      var request = getRequest(query);
      return createOperationDescriptor(request, latestVariables);
    }, [query, latestVariables]);
    var relayContext = useMemo(function() {
      return {
        environment
      };
    }, [environment]);
    var dataRef = useRef(null);
    var _useState = useState(null), forceUpdate = _useState[1];
    var cleanupFnRef = useRef(null);
    var snapshot = useMemo(function() {
      environment.check(operation);
      var res = environment.lookup(operation.fragment);
      dataRef.current = res.data;
      var retainDisposable = environment.retain(operation);
      var subscribeDisposable = environment.subscribe(res, function(newSnapshot) {
        dataRef.current = newSnapshot.data;
        forceUpdate(dataRef.current);
      });
      var disposed = false;
      function nextCleanupFn() {
        if (!disposed) {
          disposed = true;
          cleanupFnRef.current = null;
          retainDisposable.dispose();
          subscribeDisposable.dispose();
        }
      }
      if (cleanupFnRef.current) {
        cleanupFnRef.current();
      }
      cleanupFnRef.current = nextCleanupFn;
      return res;
    }, [environment, operation]);
    useLayoutEffect(function() {
      var cleanupFn = cleanupFnRef.current;
      return function() {
        cleanupFn && cleanupFn();
      };
    }, [snapshot]);
    return React.createElement(ReactRelayContext.Provider, {
      value: relayContext
    }, React.createElement(ReactRelayQueryRendererContext.Provider, {
      value: queryRendererContext
    }, render({
      props: dataRef.current
    })));
  };
  var ReactRelayContext = require_ReactRelayContext();
  var ReactRelayQueryRendererContext = require_ReactRelayQueryRendererContext();
  var areEqual = require_areEqual();
  var _require = require_lib();
  var createOperationDescriptor = _require.createOperationDescriptor;
  var deepFreeze = _require.deepFreeze;
  var getRequest = _require.getRequest;
  var useLayoutEffect = React.useLayoutEffect;
  var useState = React.useState;
  var useRef = React.useRef;
  var useMemo = React.useMemo;
  var queryRendererContext = {
    rootIsQueryRenderer: true
  };
  module.exports = ReactRelayLocalQueryRenderer;
});

// node_modules/react-relay/lib/getRootVariablesForFragments.js
var require_getRootVariablesForFragments = __commonJS((exports, module) => {
  var getRootVariablesForFragments = function(fragments, props) {
    var rootVariables = {};
    Object.keys(fragments).forEach(function(key) {
      var _selector$selectors$, _selector$selectors$2, _selector$owner$varia;
      var fragmentNode = fragments[key];
      var fragmentRef = props[key];
      var selector = getSelector(fragmentNode, fragmentRef);
      var fragmentOwnerVariables = selector != null && selector.kind === "PluralReaderSelector" ? (_selector$selectors$ = (_selector$selectors$2 = selector.selectors[0]) === null || _selector$selectors$2 === undefined ? undefined : _selector$selectors$2.owner.variables) !== null && _selector$selectors$ !== undefined ? _selector$selectors$ : {} : (_selector$owner$varia = selector === null || selector === undefined ? undefined : selector.owner.variables) !== null && _selector$owner$varia !== undefined ? _selector$owner$varia : {};
      rootVariables = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, rootVariables), fragmentOwnerVariables);
    });
    return rootVariables;
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var _require = require_lib();
  var getSelector = _require.getSelector;
  module.exports = getRootVariablesForFragments;
});

// node_modules/react-relay/lib/ReactRelayQueryFetcher.js
var require_ReactRelayQueryFetcher = __commonJS((exports, module) => {
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _defineProperty2 = _interopRequireDefault(require_defineProperty());
  var invariant = require_browser();
  var _require = require_lib();
  var fetchQuery = _require.__internal.fetchQuery;
  var createOperationDescriptor = _require.createOperationDescriptor;
  var isRelayModernEnvironment = _require.isRelayModernEnvironment;
  var ReactRelayQueryFetcher = function() {
    function ReactRelayQueryFetcher2(args) {
      (0, _defineProperty2["default"])(this, "_selectionReferences", []);
      (0, _defineProperty2["default"])(this, "_didFetchFinish", false);
      if (args != null) {
        this._cacheSelectionReference = args.cacheSelectionReference;
        this._selectionReferences = args.selectionReferences;
      }
    }
    var _proto = ReactRelayQueryFetcher2.prototype;
    _proto.getSelectionReferences = function getSelectionReferences() {
      return {
        cacheSelectionReference: this._cacheSelectionReference,
        selectionReferences: this._selectionReferences
      };
    };
    _proto.lookupInStore = function lookupInStore(environment, operation, fetchPolicy) {
      if (fetchPolicy === "store-and-network" || fetchPolicy === "store-or-network") {
        if (environment.check(operation).status === "available") {
          this._retainCachedOperation(environment, operation);
          return environment.lookup(operation.fragment);
        }
      }
      return null;
    };
    _proto.getFetchResult = function getFetchResult() {
      if (this._didFetchFinish) {
        if (this._error != null) {
          return {
            error: this._error
          };
        } else if (this._snapshot != null) {
          return {
            snapshot: this._snapshot
          };
        }
      } else {
        return null;
      }
    };
    _proto.execute = function execute(_ref) {
      var _this = this;
      var { environment, operation, preservePreviousReferences: _ref$preservePrevious } = _ref, preservePreviousReferences = _ref$preservePrevious === undefined ? false : _ref$preservePrevious;
      var reference = environment.retain(operation);
      var error = function error() {
        _this._selectionReferences = _this._selectionReferences.concat(reference);
      };
      var complete = function complete() {
        if (!preservePreviousReferences) {
          _this.disposeSelectionReferences();
        }
        _this._selectionReferences = _this._selectionReferences.concat(reference);
      };
      var unsubscribe = function unsubscribe() {
        _this._selectionReferences = _this._selectionReferences.concat(reference);
      };
      if (!isRelayModernEnvironment(environment)) {
        return environment.execute({
          operation
        })["do"]({
          error,
          complete,
          unsubscribe
        });
      }
      return fetchQuery(environment, operation)["do"]({
        error,
        complete,
        unsubscribe
      });
    };
    _proto.setOnDataChange = function setOnDataChange(onDataChange) {
      !this._fetchOptions && invariant(false, "ReactRelayQueryFetcher: `setOnDataChange` should have been called after having called `fetch`");
      if (typeof onDataChange === "function") {
        this._fetchOptions.onDataChangeCallbacks = this._fetchOptions.onDataChangeCallbacks || [];
        this._fetchOptions.onDataChangeCallbacks.push(onDataChange);
        if (this._didFetchFinish) {
          if (this._error != null) {
            onDataChange({
              error: this._error
            });
          } else if (this._snapshot != null) {
            onDataChange({
              snapshot: this._snapshot
            });
          }
        }
      }
    };
    _proto.fetch = function fetch(fetchOptions, cacheConfigOverride) {
      var _this2 = this;
      var { environment, operation, onDataChange } = fetchOptions;
      var fetchHasReturned = false;
      var _error;
      this.disposeRequest();
      var oldOnDataChangeCallbacks = this._fetchOptions && this._fetchOptions.onDataChangeCallbacks;
      this._fetchOptions = {
        environment,
        onDataChangeCallbacks: oldOnDataChangeCallbacks || [],
        operation
      };
      if (onDataChange && this._fetchOptions.onDataChangeCallbacks.indexOf(onDataChange) === -1) {
        this._fetchOptions.onDataChangeCallbacks.push(onDataChange);
      }
      var operationOverride = cacheConfigOverride ? createOperationDescriptor(operation.request.node, operation.request.variables, cacheConfigOverride) : operation;
      var request = this.execute({
        environment,
        operation: operationOverride
      })["finally"](function() {
        _this2._pendingRequest = null;
      }).subscribe({
        next: function next() {
          _this2._didFetchFinish = true;
          _this2._error = null;
          _this2._onQueryDataAvailable({
            notifyFirstResult: fetchHasReturned
          });
        },
        error: function error(err) {
          _this2._didFetchFinish = true;
          _this2._error = err;
          _this2._snapshot = null;
          var onDataChangeCallbacks = _this2._fetchOptions && _this2._fetchOptions.onDataChangeCallbacks;
          if (fetchHasReturned) {
            if (onDataChangeCallbacks) {
              onDataChangeCallbacks.forEach(function(onDataChange2) {
                onDataChange2({
                  error: err
                });
              });
            }
          } else {
            _error = err;
          }
        }
      });
      this._pendingRequest = {
        dispose: function dispose() {
          request.unsubscribe();
        }
      };
      fetchHasReturned = true;
      if (_error) {
        throw _error;
      }
      return this._snapshot;
    };
    _proto.retry = function retry(cacheConfigOverride) {
      !this._fetchOptions && invariant(false, "ReactRelayQueryFetcher: `retry` should be called after having called `fetch`");
      return this.fetch({
        environment: this._fetchOptions.environment,
        operation: this._fetchOptions.operation,
        onDataChange: null
      }, cacheConfigOverride);
    };
    _proto.dispose = function dispose() {
      this.disposeRequest();
      this.disposeSelectionReferences();
    };
    _proto.disposeRequest = function disposeRequest() {
      this._error = null;
      this._snapshot = null;
      if (this._pendingRequest) {
        this._pendingRequest.dispose();
      }
      if (this._rootSubscription) {
        this._rootSubscription.dispose();
        this._rootSubscription = null;
      }
    };
    _proto._retainCachedOperation = function _retainCachedOperation(environment, operation) {
      this._disposeCacheSelectionReference();
      this._cacheSelectionReference = environment.retain(operation);
    };
    _proto._disposeCacheSelectionReference = function _disposeCacheSelectionReference() {
      this._cacheSelectionReference && this._cacheSelectionReference.dispose();
      this._cacheSelectionReference = null;
    };
    _proto.disposeSelectionReferences = function disposeSelectionReferences() {
      this._disposeCacheSelectionReference();
      this._selectionReferences.forEach(function(r) {
        return r.dispose();
      });
      this._selectionReferences = [];
    };
    _proto._onQueryDataAvailable = function _onQueryDataAvailable(_ref2) {
      var _this3 = this;
      var notifyFirstResult = _ref2.notifyFirstResult;
      !this._fetchOptions && invariant(false, "ReactRelayQueryFetcher: `_onQueryDataAvailable` should have been called after having called `fetch`");
      var _this$_fetchOptions = this._fetchOptions, environment = _this$_fetchOptions.environment, onDataChangeCallbacks = _this$_fetchOptions.onDataChangeCallbacks, operation = _this$_fetchOptions.operation;
      if (this._snapshot) {
        return;
      }
      this._snapshot = environment.lookup(operation.fragment);
      this._rootSubscription = environment.subscribe(this._snapshot, function(snapshot2) {
        if (_this3._fetchOptions != null) {
          var maybeNewOnDataChangeCallbacks = _this3._fetchOptions.onDataChangeCallbacks;
          if (Array.isArray(maybeNewOnDataChangeCallbacks)) {
            maybeNewOnDataChangeCallbacks.forEach(function(onDataChange) {
              return onDataChange({
                snapshot: snapshot2
              });
            });
          }
        }
      });
      if (this._snapshot && notifyFirstResult && Array.isArray(onDataChangeCallbacks)) {
        var snapshot = this._snapshot;
        onDataChangeCallbacks.forEach(function(onDataChange) {
          return onDataChange({
            snapshot
          });
        });
      }
    };
    return ReactRelayQueryFetcher2;
  }();
  module.exports = ReactRelayQueryFetcher;
});

// node_modules/react-relay/lib/ReactRelayPaginationContainer.js
var require_ReactRelayPaginationContainer = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  var createGetConnectionFromProps = function(metadata) {
    var path = metadata.path;
    !path && invariant(false, "ReactRelayPaginationContainer: Unable to synthesize a getConnectionFromProps function.");
    return function(props) {
      var data = props[metadata.fragmentName];
      for (var i = 0;i < path.length; i++) {
        if (!data || typeof data !== "object") {
          return null;
        }
        data = data[path[i]];
      }
      return data;
    };
  };
  var createGetFragmentVariables = function(metadata) {
    var countVariable = metadata.count;
    !countVariable && invariant(false, "ReactRelayPaginationContainer: Unable to synthesize a getFragmentVariables function.");
    return function(prevVars, totalCount) {
      return (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, prevVars), {}, (0, _defineProperty2["default"])({}, countVariable, totalCount));
    };
  };
  var findConnectionMetadata = function(fragments) {
    var foundConnectionMetadata = null;
    var isRelayModern = false;
    for (var fragmentName in fragments) {
      var fragment = fragments[fragmentName];
      var connectionMetadata = fragment.metadata && fragment.metadata.connection;
      if (fragment.metadata !== undefined) {
        isRelayModern = true;
      }
      if (connectionMetadata) {
        !(connectionMetadata.length === 1) && invariant(false, "ReactRelayPaginationContainer: Only a single @connection is supported, `%s` has %s.", fragmentName, connectionMetadata.length);
        foundConnectionMetadata && invariant(false, "ReactRelayPaginationContainer: Only a single fragment with @connection is supported.");
        foundConnectionMetadata = (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, connectionMetadata[0]), {}, {
          fragmentName
        });
      }
    }
    !(!isRelayModern || foundConnectionMetadata !== null) && invariant(false, "ReactRelayPaginationContainer: A @connection directive must be present.");
    return foundConnectionMetadata || {};
  };
  var toObserver = function(observerOrCallback) {
    return typeof observerOrCallback === "function" ? {
      error: observerOrCallback,
      complete: observerOrCallback,
      unsubscribe: function unsubscribe(subscription) {
        typeof observerOrCallback === "function" && observerOrCallback();
      }
    } : observerOrCallback || {};
  };
  var createContainerWithFragments = function(Component2, fragments, connectionConfig) {
    var _class;
    var componentName = getComponentName(Component2);
    var containerName = getContainerName(Component2);
    var metadata = findConnectionMetadata(fragments);
    var getConnectionFromProps = connectionConfig.getConnectionFromProps || createGetConnectionFromProps(metadata);
    var direction = connectionConfig.direction || metadata.direction;
    !direction && invariant(false, "ReactRelayPaginationContainer: Unable to infer direction of the connection, possibly because both first and last are provided.");
    var getFragmentVariables = connectionConfig.getFragmentVariables || createGetFragmentVariables(metadata);
    return _class = function(_React$Component) {
      (0, _inheritsLoose2["default"])(_class2, _React$Component);
      function _class2(props) {
        var _props$__rootIsQueryR, _this;
        _this = _React$Component.call(this, props) || this;
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_handleFragmentDataUpdate", function() {
          _this.setState({
            data: _this._resolver.resolve()
          });
        });
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_hasMore", function() {
          var connectionData = _this._getConnectionData();
          return !!(connectionData && connectionData.hasMore && connectionData.cursor);
        });
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_isLoading", function() {
          return !!_this._refetchSubscription;
        });
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_refetchConnection", function(totalCount, observerOrCallback, refetchVariables) {
          if (!_this._canFetchPage("refetchConnection")) {
            return {
              dispose: function dispose() {
              }
            };
          }
          _this._refetchVariables = refetchVariables;
          var paginatingVariables = {
            count: totalCount,
            cursor: null,
            totalCount
          };
          var fetch2 = _this._fetchPage(paginatingVariables, toObserver(observerOrCallback), {
            force: true
          });
          return {
            dispose: fetch2.unsubscribe
          };
        });
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_loadMore", function(pageSize, observerOrCallback, options) {
          if (!_this._canFetchPage("loadMore")) {
            return {
              dispose: function dispose() {
              }
            };
          }
          var observer = toObserver(observerOrCallback);
          var connectionData = _this._getConnectionData();
          if (!connectionData) {
            Observable.create(function(sink) {
              return sink.complete();
            }).subscribe(observer);
            return null;
          }
          var totalCount = connectionData.edgeCount + pageSize;
          if (options && options.force) {
            return _this._refetchConnection(totalCount, observerOrCallback);
          }
          var _ConnectionInterface$ = ConnectionInterface.get(), END_CURSOR = _ConnectionInterface$.END_CURSOR, START_CURSOR = _ConnectionInterface$.START_CURSOR;
          var cursor = connectionData.cursor;
          warning(cursor != null && cursor !== "", "ReactRelayPaginationContainer: Cannot `loadMore` without valid `%s` (got `%s`)", direction === FORWARD ? END_CURSOR : START_CURSOR, cursor);
          var paginatingVariables = {
            count: pageSize,
            cursor,
            totalCount
          };
          var fetch2 = _this._fetchPage(paginatingVariables, observer, options);
          return {
            dispose: fetch2.unsubscribe
          };
        });
        var relayContext = assertRelayContext(props.__relayContext);
        var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== undefined ? _props$__rootIsQueryR : false;
        _this._isARequestInFlight = false;
        _this._refetchSubscription = null;
        _this._refetchVariables = null;
        if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
          _this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);
        } else {
          _this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer, _this._handleFragmentDataUpdate);
        }
        _this.state = {
          data: _this._resolver.resolve(),
          prevContext: relayContext,
          contextForChildren: relayContext,
          relayProp: _this._buildRelayProp(relayContext),
          resolverGeneration: 0
        };
        _this._isUnmounted = false;
        _this._hasFetched = false;
        return _this;
      }
      var _proto = _class2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this._isUnmounted = false;
        if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
          this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
        }
      };
      _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
        if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
          if (prevState.resolverGeneration !== this.state.resolverGeneration) {
            this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
          } else {
            this._rerenderIfStoreHasChanged();
          }
        }
      };
      _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {
        var _this2 = this;
        var _nextProps$__rootIsQu;
        var relayContext = assertRelayContext(nextProps.__relayContext);
        var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== undefined ? _nextProps$__rootIsQu : false;
        var prevIDs = getDataIDsFromObject(fragments, this.props);
        var nextIDs = getDataIDsFromObject(fragments, nextProps);
        var prevRootVariables = getRootVariablesForFragments(fragments, this.props);
        var nextRootVariables = getRootVariablesForFragments(fragments, nextProps);
        if (relayContext.environment !== this.state.prevContext.environment || !areEqual(prevRootVariables, nextRootVariables) || !areEqual(prevIDs, nextIDs)) {
          this._cleanup();
          if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
            this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);
          } else {
            this._resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer, this._handleFragmentDataUpdate);
          }
          this.setState(function(prevState) {
            return {
              prevContext: relayContext,
              contextForChildren: relayContext,
              relayProp: _this2._buildRelayProp(relayContext),
              resolverGeneration: prevState.resolverGeneration + 1
            };
          });
        } else if (!this._hasFetched) {
          this._resolver.setProps(nextProps);
        }
        var data = this._resolver.resolve();
        if (data !== this.state.data) {
          this.setState({
            data
          });
        }
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this._isUnmounted = true;
        this._cleanup();
      };
      _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
        if (nextState.data !== this.state.data || nextState.relayProp !== this.state.relayProp || nextState.resolverGeneration !== this.state.resolverGeneration) {
          return true;
        }
        var keys = Object.keys(nextProps);
        for (var ii = 0;ii < keys.length; ii++) {
          var key = keys[ii];
          if (key === "__relayContext") {
            if (nextState.prevContext.environment !== this.state.prevContext.environment) {
              return true;
            }
          } else {
            if (!fragments.hasOwnProperty(key) && !isScalarAndEqual(nextProps[key], this.props[key])) {
              return true;
            }
          }
        }
        return false;
      };
      _proto._buildRelayProp = function _buildRelayProp(relayContext) {
        return {
          hasMore: this._hasMore,
          isLoading: this._isLoading,
          loadMore: this._loadMore,
          refetchConnection: this._refetchConnection,
          environment: relayContext.environment
        };
      };
      _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {
        var data = this.state.data;
        var maybeNewData = this._resolver.resolve();
        if (data !== maybeNewData) {
          this.setState({
            data: maybeNewData
          });
        }
      };
      _proto._subscribeToNewResolverAndRerenderIfStoreHasChanged = function _subscribeToNewResolverAndRerenderIfStoreHasChanged() {
        var data = this.state.data;
        var maybeNewData = this._resolver.resolve();
        this._resolver.setCallback(this.props, this._handleFragmentDataUpdate);
        if (data !== maybeNewData) {
          this.setState({
            data: maybeNewData
          });
        }
      };
      _proto._getConnectionData = function _getConnectionData() {
        var _this$props = this.props, _ = _this$props.componentRef, restProps = (0, _objectWithoutPropertiesLoose2["default"])(_this$props, _excluded);
        var props = (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, restProps), this.state.data);
        var connectionData = getConnectionFromProps(props);
        if (connectionData == null) {
          return null;
        }
        var _ConnectionInterface$2 = ConnectionInterface.get(), EDGES = _ConnectionInterface$2.EDGES, PAGE_INFO = _ConnectionInterface$2.PAGE_INFO, HAS_NEXT_PAGE = _ConnectionInterface$2.HAS_NEXT_PAGE, HAS_PREV_PAGE = _ConnectionInterface$2.HAS_PREV_PAGE, END_CURSOR = _ConnectionInterface$2.END_CURSOR, START_CURSOR = _ConnectionInterface$2.START_CURSOR;
        !(typeof connectionData === "object") && invariant(false, "ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`to return `null` or a plain object with %s and %s properties, got `%s`.", componentName, EDGES, PAGE_INFO, connectionData);
        var edges = connectionData[EDGES];
        var pageInfo = connectionData[PAGE_INFO];
        if (edges == null || pageInfo == null) {
          return null;
        }
        !Array.isArray(edges) && invariant(false, "ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`to return an object with %s: Array, got `%s`.", componentName, EDGES, edges);
        !(typeof pageInfo === "object") && invariant(false, "ReactRelayPaginationContainer: Expected `getConnectionFromProps()` in `%s`to return an object with %s: Object, got `%s`.", componentName, PAGE_INFO, pageInfo);
        var hasMore = direction === FORWARD ? pageInfo[HAS_NEXT_PAGE] : pageInfo[HAS_PREV_PAGE];
        var cursor = direction === FORWARD ? pageInfo[END_CURSOR] : pageInfo[START_CURSOR];
        if (typeof hasMore !== "boolean" || edges.length !== 0 && typeof cursor === "undefined") {
          warning(false, "ReactRelayPaginationContainer: Cannot paginate without %s fields in `%s`. Be sure to fetch %s (got `%s`) and %s (got `%s`).", PAGE_INFO, componentName, direction === FORWARD ? HAS_NEXT_PAGE : HAS_PREV_PAGE, hasMore, direction === FORWARD ? END_CURSOR : START_CURSOR, cursor);
          return null;
        }
        return {
          cursor,
          edgeCount: edges.length,
          hasMore
        };
      };
      _proto._getQueryFetcher = function _getQueryFetcher() {
        if (!this._queryFetcher) {
          this._queryFetcher = new ReactRelayQueryFetcher;
        }
        return this._queryFetcher;
      };
      _proto._canFetchPage = function _canFetchPage(method) {
        if (this._isUnmounted) {
          warning(false, "ReactRelayPaginationContainer: Unexpected call of `%s` on unmounted container `%s`. It looks like some instances of your container still trying to fetch data but they already unmounted. Please make sure you clear all timers, intervals, async calls, etc that may trigger `%s` call.", method, containerName, method);
          return false;
        }
        return true;
      };
      _proto._fetchPage = function _fetchPage(paginatingVariables, observer, options) {
        var _this3 = this;
        var _assertRelayContext = assertRelayContext(this.props.__relayContext), environment = _assertRelayContext.environment;
        var _this$props2 = this.props, _ = _this$props2.componentRef, __relayContext = _this$props2.__relayContext, __rootIsQueryRenderer = _this$props2.__rootIsQueryRenderer, restProps = (0, _objectWithoutPropertiesLoose2["default"])(_this$props2, _excluded2);
        var props = (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, restProps), this.state.data);
        var fragmentVariables;
        var rootVariables = getRootVariablesForFragments(fragments, restProps);
        fragmentVariables = getVariablesFromObject(fragments, restProps);
        fragmentVariables = (0, _objectSpread3["default"])((0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, rootVariables), fragmentVariables), this._refetchVariables);
        var fetchVariables = connectionConfig.getVariables(props, {
          count: paginatingVariables.count,
          cursor: paginatingVariables.cursor
        }, fragmentVariables);
        !(typeof fetchVariables === "object" && fetchVariables !== null) && invariant(false, "ReactRelayPaginationContainer: Expected `getVariables()` to return an object, got `%s` in `%s`.", fetchVariables, componentName);
        fetchVariables = (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, fetchVariables), this._refetchVariables);
        fragmentVariables = (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, fetchVariables), fragmentVariables);
        var cacheConfig = options ? {
          force: !!options.force
        } : undefined;
        if (cacheConfig != null && (options === null || options === undefined ? undefined : options.metadata) != null) {
          cacheConfig.metadata = options === null || options === undefined ? undefined : options.metadata;
        }
        var request = getRequest(connectionConfig.query);
        var operation = createOperationDescriptor(request, fetchVariables, cacheConfig);
        var refetchSubscription = null;
        if (this._refetchSubscription) {
          this._refetchSubscription.unsubscribe();
        }
        this._hasFetched = true;
        var onNext = function onNext(payload, complete) {
          var prevData = _this3._resolver.resolve();
          _this3._resolver.setVariables(getFragmentVariables(fragmentVariables, paginatingVariables.totalCount), operation.request.node);
          var nextData = _this3._resolver.resolve();
          if (!areEqual(prevData, nextData)) {
            _this3.setState({
              data: nextData,
              contextForChildren: {
                environment: _this3.props.__relayContext.environment
              }
            }, complete);
          } else {
            complete();
          }
        };
        var cleanup = function cleanup() {
          if (_this3._refetchSubscription === refetchSubscription) {
            _this3._refetchSubscription = null;
            _this3._isARequestInFlight = false;
          }
        };
        this._isARequestInFlight = true;
        refetchSubscription = this._getQueryFetcher().execute({
          environment,
          operation,
          preservePreviousReferences: true
        }).mergeMap(function(payload) {
          return Observable.create(function(sink) {
            onNext(payload, function() {
              sink.next();
              sink.complete();
            });
          });
        })["do"]({
          error: cleanup,
          complete: cleanup,
          unsubscribe: cleanup
        }).subscribe(observer || {});
        this._refetchSubscription = this._isARequestInFlight ? refetchSubscription : null;
        return refetchSubscription;
      };
      _proto._cleanup = function _cleanup() {
        this._resolver.dispose();
        this._refetchVariables = null;
        this._hasFetched = false;
        if (this._refetchSubscription) {
          this._refetchSubscription.unsubscribe();
          this._refetchSubscription = null;
          this._isARequestInFlight = false;
        }
        if (this._queryFetcher) {
          this._queryFetcher.dispose();
        }
      };
      _proto.render = function render() {
        var _this$props3 = this.props, componentRef = _this$props3.componentRef, __relayContext = _this$props3.__relayContext, __rootIsQueryRenderer = _this$props3.__rootIsQueryRenderer, props = (0, _objectWithoutPropertiesLoose2["default"])(_this$props3, _excluded3);
        return React.createElement(ReactRelayContext.Provider, {
          value: this.state.contextForChildren
        }, React.createElement(Component2, (0, _extends2["default"])({}, props, this.state.data, {
          ref: componentRef,
          relay: this.state.relayProp
        })));
      };
      return _class2;
    }(React.Component), (0, _defineProperty2["default"])(_class, "displayName", containerName), _class;
  };
  var createContainer = function(Component2, fragmentSpec, connectionConfig) {
    return buildReactRelayContainer(Component2, fragmentSpec, function(ComponentClass, fragments) {
      return createContainerWithFragments(ComponentClass, fragments, connectionConfig);
    });
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _extends2 = _interopRequireDefault(require_extends());
  var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
  var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
  var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
  var _defineProperty2 = _interopRequireDefault(require_defineProperty());
  var _objectSpread3 = _interopRequireDefault(require_objectSpread2());
  var _excluded = ["componentRef"];
  var _excluded2 = ["componentRef", "__relayContext", "__rootIsQueryRenderer"];
  var _excluded3 = ["componentRef", "__relayContext", "__rootIsQueryRenderer"];
  var buildReactRelayContainer = require_buildReactRelayContainer();
  var getRootVariablesForFragments = require_getRootVariablesForFragments();
  var _require = require_ReactRelayContainerUtils();
  var getComponentName = _require.getComponentName;
  var getContainerName = _require.getContainerName;
  var ReactRelayContext = require_ReactRelayContext();
  var ReactRelayQueryFetcher = require_ReactRelayQueryFetcher();
  var _require2 = require_RelayContext();
  var assertRelayContext = _require2.assertRelayContext;
  var areEqual = require_areEqual();
  var invariant = require_browser();
  var _require3 = require_lib();
  var ConnectionInterface = _require3.ConnectionInterface;
  var Observable = _require3.Observable;
  var RelayFeatureFlags = _require3.RelayFeatureFlags;
  var createFragmentSpecResolver = _require3.createFragmentSpecResolver;
  var createOperationDescriptor = _require3.createOperationDescriptor;
  var getDataIDsFromObject = _require3.getDataIDsFromObject;
  var getRequest = _require3.getRequest;
  var getVariablesFromObject = _require3.getVariablesFromObject;
  var isScalarAndEqual = _require3.isScalarAndEqual;
  var warning = require_warning();
  var FORWARD = "forward";
  module.exports = {
    createContainer
  };
});

// node_modules/react-relay/lib/ReactRelayQueryRenderer.js
var require_ReactRelayQueryRenderer = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  var getLoadingRenderProps = function() {
    return {
      error: null,
      props: null,
      retry: null
    };
  };
  var getEmptyRenderProps = function() {
    return {
      error: null,
      props: {},
      retry: null
    };
  };
  var getRenderProps = function(error, snapshot, queryFetcher, retryCallbacks) {
    return {
      error: error ? error : null,
      props: snapshot ? snapshot.data : null,
      retry: function retry(cacheConfigOverride) {
        var syncSnapshot = queryFetcher.retry(cacheConfigOverride);
        if (syncSnapshot && typeof retryCallbacks.handleDataChange === "function") {
          retryCallbacks.handleDataChange({
            snapshot: syncSnapshot
          });
        } else if (error && typeof retryCallbacks.handleRetryAfterError === "function") {
          retryCallbacks.handleRetryAfterError(error);
        }
      }
    };
  };
  var getRequestCacheKey = function(request, variables) {
    return JSON.stringify({
      id: request.cacheID ? request.cacheID : request.id,
      variables
    });
  };
  var resetQueryStateForUpdate = function(props, prevState) {
    var query = props.query;
    var prevSelectionReferences = prevState.queryFetcher.getSelectionReferences();
    prevState.queryFetcher.disposeRequest();
    var queryFetcher;
    if (query) {
      var request = getRequest(query);
      var requestCacheKey = getRequestCacheKey(request.params, props.variables);
      queryFetcher = requestCache[requestCacheKey] ? requestCache[requestCacheKey].queryFetcher : new ReactRelayQueryFetcher(prevSelectionReferences);
    } else {
      queryFetcher = new ReactRelayQueryFetcher(prevSelectionReferences);
    }
    return (0, _objectSpread2["default"])({
      prevQuery: props.query,
      prevPropsEnvironment: props.environment,
      prevPropsVariables: props.variables,
      queryFetcher
    }, fetchQueryAndComputeStateFromProps(props, queryFetcher, prevState.retryCallbacks));
  };
  var fetchQueryAndComputeStateFromProps = function(props, queryFetcher, retryCallbacks, requestCacheKey) {
    var { environment, query, variables, cacheConfig } = props;
    var genericEnvironment = environment;
    if (query) {
      var request = getRequest(query);
      var operation = createOperationDescriptor(request, variables, cacheConfig);
      var relayContext = {
        environment: genericEnvironment
      };
      if (typeof requestCacheKey === "string" && requestCache[requestCacheKey]) {
        var snapshot = requestCache[requestCacheKey].snapshot;
        if (snapshot) {
          return {
            error: null,
            relayContext,
            renderProps: getRenderProps(null, snapshot, queryFetcher, retryCallbacks),
            snapshot,
            requestCacheKey
          };
        } else {
          return {
            error: null,
            relayContext,
            renderProps: getLoadingRenderProps(),
            snapshot: null,
            requestCacheKey
          };
        }
      }
      try {
        var storeSnapshot = queryFetcher.lookupInStore(genericEnvironment, operation, props.fetchPolicy);
        var querySnapshot = queryFetcher.fetch({
          environment: genericEnvironment,
          onDataChange: null,
          operation
        });
        var _snapshot = querySnapshot || storeSnapshot;
        requestCacheKey = requestCacheKey || getRequestCacheKey(request.params, props.variables);
        requestCache[requestCacheKey] = {
          queryFetcher,
          snapshot: _snapshot
        };
        if (!_snapshot) {
          return {
            error: null,
            relayContext,
            renderProps: getLoadingRenderProps(),
            snapshot: null,
            requestCacheKey
          };
        }
        return {
          error: null,
          relayContext,
          renderProps: getRenderProps(null, _snapshot, queryFetcher, retryCallbacks),
          snapshot: _snapshot,
          requestCacheKey
        };
      } catch (error) {
        return {
          error,
          relayContext,
          renderProps: getRenderProps(error, null, queryFetcher, retryCallbacks),
          snapshot: null,
          requestCacheKey
        };
      }
    } else {
      queryFetcher.dispose();
      var _relayContext = {
        environment: genericEnvironment
      };
      return {
        error: null,
        relayContext: _relayContext,
        renderProps: getEmptyRenderProps(),
        requestCacheKey: null
      };
    }
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
  var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
  var _defineProperty2 = _interopRequireDefault(require_defineProperty());
  var ReactRelayContext = require_ReactRelayContext();
  var ReactRelayQueryFetcher = require_ReactRelayQueryFetcher();
  var ReactRelayQueryRendererContext = require_ReactRelayQueryRendererContext();
  var areEqual = require_areEqual();
  var _require = require_lib();
  var createOperationDescriptor = _require.createOperationDescriptor;
  var deepFreeze = _require.deepFreeze;
  var getRequest = _require.getRequest;
  var requestCache = {};
  var queryRendererContext = {
    rootIsQueryRenderer: true
  };
  var ReactRelayQueryRenderer = function(_React$Component) {
    (0, _inheritsLoose2["default"])(ReactRelayQueryRenderer2, _React$Component);
    function ReactRelayQueryRenderer2(props) {
      var _this;
      _this = _React$Component.call(this, props) || this;
      (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_handleDataChange", function(params) {
        var error = params.error == null ? null : params.error;
        var snapshot = params.snapshot == null ? null : params.snapshot;
        _this.setState(function(prevState) {
          var prevRequestCacheKey = prevState.requestCacheKey;
          if (prevRequestCacheKey) {
            delete requestCache[prevRequestCacheKey];
          }
          if (snapshot === prevState.snapshot && error === prevState.error) {
            return null;
          }
          return {
            renderProps: getRenderProps(error, snapshot, prevState.queryFetcher, prevState.retryCallbacks),
            snapshot,
            requestCacheKey: null
          };
        });
      });
      var retryCallbacks = {
        handleDataChange: null,
        handleRetryAfterError: null
      };
      var queryFetcher;
      var requestCacheKey;
      if (props.query) {
        var query = props.query;
        var request = getRequest(query);
        requestCacheKey = getRequestCacheKey(request.params, props.variables);
        queryFetcher = requestCache[requestCacheKey] ? requestCache[requestCacheKey].queryFetcher : new ReactRelayQueryFetcher;
      } else {
        queryFetcher = new ReactRelayQueryFetcher;
      }
      _this._maybeHiddenOrFastRefresh = false;
      _this.state = (0, _objectSpread2["default"])({
        prevPropsEnvironment: props.environment,
        prevPropsVariables: props.variables,
        prevQuery: props.query,
        queryFetcher,
        retryCallbacks
      }, fetchQueryAndComputeStateFromProps(props, queryFetcher, retryCallbacks, requestCacheKey));
      return _this;
    }
    ReactRelayQueryRenderer2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
      if (prevState.prevQuery !== nextProps.query || prevState.prevPropsEnvironment !== nextProps.environment || !areEqual(prevState.prevPropsVariables, nextProps.variables)) {
        return resetQueryStateForUpdate(nextProps, prevState);
      }
      return null;
    };
    var _proto = ReactRelayQueryRenderer2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      var _this2 = this;
      if (this._maybeHiddenOrFastRefresh === true) {
        this._maybeHiddenOrFastRefresh = false;
        this.setState(function(prevState) {
          var newState = resetQueryStateForUpdate(_this2.props, prevState);
          var { requestCacheKey: requestCacheKey2, queryFetcher: queryFetcher2 } = newState;
          if (requestCacheKey2 != null && requestCache[requestCacheKey2] != null) {
            queryFetcher2.setOnDataChange(_this2._handleDataChange);
          }
          return newState;
        });
        return;
      }
      var _this$state = this.state, retryCallbacks = _this$state.retryCallbacks, queryFetcher = _this$state.queryFetcher, requestCacheKey = _this$state.requestCacheKey;
      if (requestCacheKey) {
        delete requestCache[requestCacheKey];
      }
      retryCallbacks.handleDataChange = this._handleDataChange;
      retryCallbacks.handleRetryAfterError = function(error) {
        return _this2.setState(function(prevState) {
          var prevRequestCacheKey = prevState.requestCacheKey;
          if (prevRequestCacheKey) {
            delete requestCache[prevRequestCacheKey];
          }
          return {
            renderProps: getLoadingRenderProps(),
            requestCacheKey: null
          };
        });
      };
      if (this.props.query) {
        queryFetcher.setOnDataChange(this._handleDataChange);
      }
    };
    _proto.componentDidUpdate = function componentDidUpdate(_prevProps, prevState) {
      var _this$state2 = this.state, queryFetcher = _this$state2.queryFetcher, requestCacheKey = _this$state2.requestCacheKey;
      if (requestCacheKey) {
        delete requestCache[requestCacheKey];
        delete this.state.requestCacheKey;
      }
      if (this.props.query && queryFetcher !== prevState.queryFetcher) {
        queryFetcher.setOnDataChange(this._handleDataChange);
      }
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.state.queryFetcher.dispose();
      this._maybeHiddenOrFastRefresh = true;
    };
    _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
      return nextProps.render !== this.props.render || nextState.renderProps !== this.state.renderProps;
    };
    _proto.render = function render() {
      var _this$state3 = this.state, renderProps = _this$state3.renderProps, relayContext = _this$state3.relayContext;
      if (true) {
        deepFreeze(renderProps);
      }
      return React.createElement(ReactRelayContext.Provider, {
        value: relayContext
      }, React.createElement(ReactRelayQueryRendererContext.Provider, {
        value: queryRendererContext
      }, this.props.render(renderProps)));
    };
    return ReactRelayQueryRenderer2;
  }(React.Component);
  module.exports = ReactRelayQueryRenderer;
});

// node_modules/react-relay/lib/ReactRelayRefetchContainer.js
var require_ReactRelayRefetchContainer = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  var createContainerWithFragments = function(Component2, fragments, taggedNode) {
    var _class;
    var containerName = getContainerName(Component2);
    return _class = function(_React$Component) {
      (0, _inheritsLoose2["default"])(_class2, _React$Component);
      function _class2(props) {
        var _props$__rootIsQueryR, _this;
        _this = _React$Component.call(this, props) || this;
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_handleFragmentDataUpdate", function() {
          var resolverFromThisUpdate = _this.state.resolver;
          _this.setState(function(updatedState) {
            return resolverFromThisUpdate === updatedState.resolver ? {
              data: updatedState.resolver.resolve()
            } : null;
          });
        });
        (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "_refetch", function(refetchVariables, renderVariables, observerOrCallback, options) {
          if (_this._isUnmounted) {
            warning(false, "ReactRelayRefetchContainer: Unexpected call of `refetch` on unmounted container `%s`. It looks like some instances of your container still trying to refetch the data but they already unmounted. Please make sure you clear all timers, intervals, async calls, etc that may trigger `refetch`.", containerName);
            return {
              dispose: function dispose() {
              }
            };
          }
          var _assertRelayContext = assertRelayContext(_this.props.__relayContext), environment = _assertRelayContext.environment;
          var rootVariables = getRootVariablesForFragments(fragments, _this.props);
          var fetchVariables = typeof refetchVariables === "function" ? refetchVariables(_this._getFragmentVariables()) : refetchVariables;
          fetchVariables = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, rootVariables), fetchVariables);
          var fragmentVariables = renderVariables ? (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, fetchVariables), renderVariables) : fetchVariables;
          var cacheConfig = options ? {
            force: !!options.force
          } : undefined;
          if (cacheConfig != null && (options === null || options === undefined ? undefined : options.metadata) != null) {
            cacheConfig.metadata = options === null || options === undefined ? undefined : options.metadata;
          }
          var observer = typeof observerOrCallback === "function" ? {
            next: observerOrCallback,
            error: observerOrCallback
          } : observerOrCallback || {};
          var query = getRequest(taggedNode);
          var operation = createOperationDescriptor(query, fetchVariables, cacheConfig);
          _this.state.localVariables = fetchVariables;
          _this._refetchSubscription && _this._refetchSubscription.unsubscribe();
          var refetchSubscription;
          var storeSnapshot = _this._getQueryFetcher().lookupInStore(environment, operation, options === null || options === undefined ? undefined : options.fetchPolicy);
          if (storeSnapshot != null) {
            _this.state.resolver.setVariables(fragmentVariables, operation.request.node);
            _this.setState(function(latestState) {
              return {
                data: latestState.resolver.resolve(),
                contextForChildren: {
                  environment: _this.props.__relayContext.environment
                }
              };
            }, function() {
              observer.next && observer.next();
              observer.complete && observer.complete();
            });
            return {
              dispose: function dispose() {
              }
            };
          }
          _this._getQueryFetcher().execute({
            environment,
            operation,
            preservePreviousReferences: true
          }).mergeMap(function(response) {
            _this.state.resolver.setVariables(fragmentVariables, operation.request.node);
            return Observable.create(function(sink) {
              return _this.setState(function(latestState) {
                return {
                  data: latestState.resolver.resolve(),
                  contextForChildren: {
                    environment: _this.props.__relayContext.environment
                  }
                };
              }, function() {
                sink.next();
                sink.complete();
              });
            });
          })["finally"](function() {
            if (_this._refetchSubscription === refetchSubscription) {
              _this._refetchSubscription = null;
            }
          }).subscribe((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, observer), {}, {
            start: function start(subscription) {
              _this._refetchSubscription = refetchSubscription = subscription;
              observer.start && observer.start(subscription);
            }
          }));
          return {
            dispose: function dispose() {
              refetchSubscription && refetchSubscription.unsubscribe();
            }
          };
        });
        var relayContext = assertRelayContext(props.__relayContext);
        var rootIsQueryRenderer = (_props$__rootIsQueryR = props.__rootIsQueryRenderer) !== null && _props$__rootIsQueryR !== undefined ? _props$__rootIsQueryR : false;
        _this._refetchSubscription = null;
        var resolver = createFragmentSpecResolver(relayContext, containerName, fragments, props, rootIsQueryRenderer);
        _this.state = {
          data: resolver.resolve(),
          localVariables: null,
          prevProps: props,
          prevPropsContext: relayContext,
          contextForChildren: relayContext,
          relayProp: getRelayProp(relayContext.environment, _this._refetch),
          resolver
        };
        _this._isUnmounted = false;
        return _this;
      }
      var _proto = _class2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this._isUnmounted = false;
        this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
      };
      _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
        if (this.state.resolver !== prevState.resolver) {
          prevState.resolver.dispose();
          this._queryFetcher && this._queryFetcher.dispose();
          this._refetchSubscription && this._refetchSubscription.unsubscribe();
          this._subscribeToNewResolverAndRerenderIfStoreHasChanged();
        } else {
          this._rerenderIfStoreHasChanged();
        }
      };
      _class2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, prevState) {
        var _nextProps$__rootIsQu;
        var prevProps = prevState.prevProps;
        var relayContext = assertRelayContext(nextProps.__relayContext);
        var rootIsQueryRenderer = (_nextProps$__rootIsQu = nextProps.__rootIsQueryRenderer) !== null && _nextProps$__rootIsQu !== undefined ? _nextProps$__rootIsQu : false;
        var prevIDs = getDataIDsFromObject(fragments, prevProps);
        var nextIDs = getDataIDsFromObject(fragments, nextProps);
        var prevRootVariables = getRootVariablesForFragments(fragments, prevProps);
        var nextRootVariables = getRootVariablesForFragments(fragments, nextProps);
        var resolver = prevState.resolver;
        if (prevState.prevPropsContext.environment !== relayContext.environment || !areEqual(prevRootVariables, nextRootVariables) || !areEqual(prevIDs, nextIDs)) {
          resolver = createFragmentSpecResolver(relayContext, containerName, fragments, nextProps, rootIsQueryRenderer);
          return {
            data: resolver.resolve(),
            localVariables: null,
            prevProps: nextProps,
            prevPropsContext: relayContext,
            contextForChildren: relayContext,
            relayProp: getRelayProp(relayContext.environment, prevState.relayProp.refetch),
            resolver
          };
        } else if (!prevState.localVariables) {
          resolver.setProps(nextProps);
        }
        var data = resolver.resolve();
        if (data !== prevState.data) {
          return {
            data,
            prevProps: nextProps
          };
        }
        return null;
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this._isUnmounted = true;
        this.state.resolver.dispose();
        this._queryFetcher && this._queryFetcher.dispose();
        this._refetchSubscription && this._refetchSubscription.unsubscribe();
      };
      _proto.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
        if (nextState.data !== this.state.data || nextState.relayProp !== this.state.relayProp) {
          return true;
        }
        var keys = Object.keys(nextProps);
        for (var ii = 0;ii < keys.length; ii++) {
          var key = keys[ii];
          if (key === "__relayContext") {
            if (this.state.prevPropsContext.environment !== nextState.prevPropsContext.environment) {
              return true;
            }
          } else {
            if (!fragments.hasOwnProperty(key) && !isScalarAndEqual(nextProps[key], this.props[key])) {
              return true;
            }
          }
        }
        return false;
      };
      _proto._rerenderIfStoreHasChanged = function _rerenderIfStoreHasChanged() {
        var _this$state = this.state, data = _this$state.data, resolver = _this$state.resolver;
        var maybeNewData = resolver.resolve();
        if (data !== maybeNewData) {
          this.setState({
            data: maybeNewData
          });
        }
      };
      _proto._subscribeToNewResolverAndRerenderIfStoreHasChanged = function _subscribeToNewResolverAndRerenderIfStoreHasChanged() {
        var _this$state2 = this.state, data = _this$state2.data, resolver = _this$state2.resolver;
        var maybeNewData = resolver.resolve();
        resolver.setCallback(this.props, this._handleFragmentDataUpdate);
        if (data !== maybeNewData) {
          this.setState({
            data: maybeNewData
          });
        }
      };
      _proto._getFragmentVariables = function _getFragmentVariables() {
        return getVariablesFromObject(fragments, this.props);
      };
      _proto._getQueryFetcher = function _getQueryFetcher() {
        if (!this._queryFetcher) {
          this._queryFetcher = new ReactRelayQueryFetcher;
        }
        return this._queryFetcher;
      };
      _proto.render = function render() {
        var _this$props = this.props, componentRef = _this$props.componentRef, __relayContext = _this$props.__relayContext, __rootIsQueryRenderer = _this$props.__rootIsQueryRenderer, props = (0, _objectWithoutPropertiesLoose2["default"])(_this$props, _excluded);
        var _this$state3 = this.state, relayProp = _this$state3.relayProp, contextForChildren = _this$state3.contextForChildren;
        return React.createElement(ReactRelayContext.Provider, {
          value: contextForChildren
        }, React.createElement(Component2, (0, _extends2["default"])({}, props, this.state.data, {
          ref: componentRef,
          relay: relayProp
        })));
      };
      return _class2;
    }(React.Component), (0, _defineProperty2["default"])(_class, "displayName", containerName), _class;
  };
  var getRelayProp = function(environment, refetch) {
    return {
      environment,
      refetch
    };
  };
  var createContainer = function(Component2, fragmentSpec, taggedNode) {
    return buildReactRelayContainer(Component2, fragmentSpec, function(ComponentClass, fragments) {
      return createContainerWithFragments(ComponentClass, fragments, taggedNode);
    });
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _extends2 = _interopRequireDefault(require_extends());
  var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var _assertThisInitialized2 = _interopRequireDefault(require_assertThisInitialized());
  var _inheritsLoose2 = _interopRequireDefault(require_inheritsLoose());
  var _defineProperty2 = _interopRequireDefault(require_defineProperty());
  var _excluded = ["componentRef", "__relayContext", "__rootIsQueryRenderer"];
  var buildReactRelayContainer = require_buildReactRelayContainer();
  var getRootVariablesForFragments = require_getRootVariablesForFragments();
  var _require = require_ReactRelayContainerUtils();
  var getContainerName = _require.getContainerName;
  var ReactRelayContext = require_ReactRelayContext();
  var ReactRelayQueryFetcher = require_ReactRelayQueryFetcher();
  var _require2 = require_RelayContext();
  var assertRelayContext = _require2.assertRelayContext;
  var areEqual = require_areEqual();
  var _require3 = require_lib();
  var Observable = _require3.Observable;
  var createFragmentSpecResolver = _require3.createFragmentSpecResolver;
  var createOperationDescriptor = _require3.createOperationDescriptor;
  var getDataIDsFromObject = _require3.getDataIDsFromObject;
  var getRequest = _require3.getRequest;
  var getVariablesFromObject = _require3.getVariablesFromObject;
  var isScalarAndEqual = _require3.isScalarAndEqual;
  var warning = require_warning();
  module.exports = {
    createContainer
  };
});

// node_modules/react-relay/lib/relay-hooks/ProfilerContext.js
var require_ProfilerContext = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  var ProfilerContext = React.createContext({
    wrapPrepareQueryResource: function wrapPrepareQueryResource(cb) {
      return cb();
    }
  });
  module.exports = ProfilerContext;
});

// node_modules/react-relay/lib/relay-hooks/useRelayEnvironment.js
var require_useRelayEnvironment = __commonJS((exports, module) => {
  var _require = __toESM(require_react(), 1);
  var useRelayEnvironment = function() {
    var context = useContext(ReactRelayContext);
    !(context != null) && invariant(false, "useRelayEnvironment: Expected to have found a Relay environment provided by a `RelayEnvironmentProvider` component. This usually means that useRelayEnvironment was used in a component that is not a descendant of a `RelayEnvironmentProvider`. Please make sure a `RelayEnvironmentProvider` has been rendered somewhere as a parent or ancestor of your component.");
    return context.environment;
  };
  var ReactRelayContext = require_ReactRelayContext();
  var invariant = require_browser();
  var useContext = _require.useContext;
  module.exports = useRelayEnvironment;
});

// node_modules/react-relay/lib/relay-hooks/EntryPointContainer.react.js
var require_EntryPointContainer_react = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  var _require = __toESM(require_react(), 1);
  var EntryPointContainer = function(_ref) {
    var { entryPointReference, props } = _ref;
    warning(entryPointReference.isDisposed === false, "<EntryPointContainer>: Expected entryPointReference to not be disposed yet. This is because disposing the entrypoint marks it for future garbage collection, and as such may no longer be present in the Relay store. In the future, this will become a hard error.");
    var { getComponent, queries, entryPoints, extraProps, rootModuleID } = entryPointReference;
    var Component = getComponent();
    var profilerContext = useContext(ProfilerContext);
    var environment = useRelayEnvironment();
    useEffect(function() {
      environment.__log({
        name: "entrypoint.root.consume",
        profilerContext,
        rootModuleID
      });
    }, [environment, profilerContext, rootModuleID]);
    return React.createElement(Component, {
      entryPoints,
      extraProps,
      props,
      queries
    });
  };
  var ProfilerContext = require_ProfilerContext();
  var useRelayEnvironment = require_useRelayEnvironment();
  var useContext = _require.useContext;
  var useEffect = _require.useEffect;
  var warning = require_warning();
  module.exports = EntryPointContainer;
});

// node_modules/react-relay/lib/relay-hooks/loadQuery.js
var require_loadQuery = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  var useTrackLoadQueryInRender = function() {
    if (RenderDispatcher === null) {
      var _React$__SECRET_INTER, _React$__SECRET_INTER2;
      RenderDispatcher = (_React$__SECRET_INTER = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React$__SECRET_INTER === undefined ? undefined : (_React$__SECRET_INTER2 = _React$__SECRET_INTER.ReactCurrentDispatcher) === null || _React$__SECRET_INTER2 === undefined ? undefined : _React$__SECRET_INTER2.current;
    }
  };
  var loadQuery = function(environment, preloadableRequest, variables, options, environmentProviderOptions) {
    var _React$__SECRET_INTER3, _React$__SECRET_INTER4, _options$__nameForWar, _options$fetchPolicy;
    var CurrentDispatcher = (_React$__SECRET_INTER3 = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) === null || _React$__SECRET_INTER3 === undefined ? undefined : (_React$__SECRET_INTER4 = _React$__SECRET_INTER3.ReactCurrentDispatcher) === null || _React$__SECRET_INTER4 === undefined ? undefined : _React$__SECRET_INTER4.current;
    warning(RenderDispatcher == null || CurrentDispatcher !== RenderDispatcher, "Relay: `%s` should not be called inside a React render function.", (_options$__nameForWar = options === null || options === undefined ? undefined : options.__nameForWarning) !== null && _options$__nameForWar !== undefined ? _options$__nameForWar : "loadQuery");
    fetchKey++;
    var fetchPolicy = (_options$fetchPolicy = options === null || options === undefined ? undefined : options.fetchPolicy) !== null && _options$fetchPolicy !== undefined ? _options$fetchPolicy : "store-or-network";
    var networkCacheConfig = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, options === null || options === undefined ? undefined : options.networkCacheConfig), {}, {
      force: true
    });
    var retainReference;
    var didExecuteNetworkSource = false;
    var executeWithNetworkSource = function executeWithNetworkSource(operation, networkObservable2) {
      didExecuteNetworkSource = true;
      return environment.executeWithSource({
        operation,
        source: networkObservable2
      });
    };
    var executionSubject = new ReplaySubject;
    var returnedObservable = Observable.create(function(sink) {
      return executionSubject.subscribe(sink);
    });
    var unsubscribeFromNetworkRequest;
    var networkError = null;
    var didMakeNetworkRequest = false;
    var makeNetworkRequest = function makeNetworkRequest(params2) {
      didMakeNetworkRequest = true;
      var observable;
      var subject = new ReplaySubject;
      if (RelayFeatureFlags.ENABLE_LOAD_QUERY_REQUEST_DEDUPING === true) {
        var identifier = "raw-network-request-" + getRequestIdentifier(params2, variables);
        observable = fetchQueryDeduped(environment, identifier, function() {
          var network2 = environment.getNetwork();
          return network2.execute(params2, variables, networkCacheConfig);
        });
      } else {
        var network = environment.getNetwork();
        observable = network.execute(params2, variables, networkCacheConfig);
      }
      var _observable$subscribe = observable.subscribe({
        error: function error(err) {
          networkError = err;
          subject.error(err);
        },
        next: function next(data) {
          subject.next(data);
        },
        complete: function complete() {
          subject.complete();
        }
      }), unsubscribe = _observable$subscribe.unsubscribe;
      unsubscribeFromNetworkRequest = unsubscribe;
      return Observable.create(function(sink) {
        var subjectSubscription = subject.subscribe(sink);
        return function() {
          subjectSubscription.unsubscribe();
          unsubscribeFromNetworkRequest();
        };
      });
    };
    var unsubscribeFromExecution;
    var executeDeduped = function executeDeduped(operation, fetchFn) {
      if (RelayFeatureFlags.ENABLE_LOAD_QUERY_REQUEST_DEDUPING === true) {
        didMakeNetworkRequest = true;
      }
      var _fetchQueryDeduped$su = fetchQueryDeduped(environment, operation.request.identifier, fetchFn).subscribe({
        error: function error(err) {
          executionSubject.error(err);
        },
        next: function next(data) {
          executionSubject.next(data);
        },
        complete: function complete() {
          executionSubject.complete();
        }
      });
      unsubscribeFromExecution = _fetchQueryDeduped$su.unsubscribe;
    };
    var checkAvailabilityAndExecute = function checkAvailabilityAndExecute(concreteRequest) {
      var operation = createOperationDescriptor(concreteRequest, variables, networkCacheConfig);
      retainReference = environment.retain(operation);
      if (fetchPolicy === "store-only") {
        return;
      }
      var shouldFetch = fetchPolicy !== "store-or-network" || environment.check(operation).status !== "available";
      if (shouldFetch) {
        executeDeduped(operation, function() {
          var networkObservable2 = makeNetworkRequest(concreteRequest.params);
          var executeObservable = executeWithNetworkSource(operation, networkObservable2);
          return executeObservable;
        });
      }
    };
    var params;
    var cancelOnLoadCallback;
    var queryId;
    if (preloadableRequest.kind === "PreloadableConcreteRequest") {
      var preloadableConcreteRequest = preloadableRequest;
      params = preloadableConcreteRequest.params;
      var _params = params;
      queryId = _params.id;
      !(queryId !== null) && invariant(false, "Relay: `loadQuery` requires that preloadable query `%s` has a persisted query id", params.name);
      var _module = PreloadableQueryRegistry.get(queryId);
      if (_module != null) {
        checkAvailabilityAndExecute(_module);
      } else {
        var networkObservable = fetchPolicy === "store-only" ? null : makeNetworkRequest(params);
        var _PreloadableQueryRegi = PreloadableQueryRegistry.onLoad(queryId, function(preloadedModule) {
          cancelOnLoadCallback();
          var operation = createOperationDescriptor(preloadedModule, variables, networkCacheConfig);
          retainReference = environment.retain(operation);
          if (networkObservable != null) {
            executeDeduped(operation, function() {
              return executeWithNetworkSource(operation, networkObservable);
            });
          }
        });
        cancelOnLoadCallback = _PreloadableQueryRegi.dispose;
      }
    } else {
      var graphQlTaggedNode = preloadableRequest;
      var request = getRequest(graphQlTaggedNode);
      params = request.params;
      queryId = params.cacheID != null ? params.cacheID : params.id;
      checkAvailabilityAndExecute(request);
    }
    var isDisposed = false;
    var isReleased = false;
    var isNetworkRequestCancelled = false;
    var releaseQuery = function releaseQuery() {
      if (isReleased) {
        return;
      }
      retainReference && retainReference.dispose();
      isReleased = true;
    };
    var cancelNetworkRequest = function cancelNetworkRequest() {
      if (isNetworkRequestCancelled) {
        return;
      }
      if (didExecuteNetworkSource) {
        unsubscribeFromExecution && unsubscribeFromExecution();
      } else {
        unsubscribeFromNetworkRequest && unsubscribeFromNetworkRequest();
      }
      cancelOnLoadCallback && cancelOnLoadCallback();
      isNetworkRequestCancelled = true;
    };
    return {
      kind: "PreloadedQuery",
      environment,
      environmentProviderOptions,
      dispose: function dispose() {
        if (isDisposed) {
          return;
        }
        releaseQuery();
        cancelNetworkRequest();
        isDisposed = true;
      },
      releaseQuery,
      cancelNetworkRequest,
      fetchKey,
      id: queryId,
      get isDisposed() {
        return isDisposed || isReleased;
      },
      get networkError() {
        return networkError;
      },
      name: params.name,
      networkCacheConfig,
      fetchPolicy,
      source: didMakeNetworkRequest ? returnedObservable : undefined,
      variables
    };
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var invariant = require_browser();
  var _require = require_lib();
  var fetchQueryDeduped = _require.__internal.fetchQueryDeduped;
  var Observable = _require.Observable;
  var PreloadableQueryRegistry = _require.PreloadableQueryRegistry;
  var RelayFeatureFlags = _require.RelayFeatureFlags;
  var ReplaySubject = _require.ReplaySubject;
  var createOperationDescriptor = _require.createOperationDescriptor;
  var getRequest = _require.getRequest;
  var getRequestIdentifier = _require.getRequestIdentifier;
  var warning = require_warning();
  var RenderDispatcher = null;
  var fetchKey = 100001;
  module.exports = {
    loadQuery,
    useTrackLoadQueryInRender
  };
});

// node_modules/react-relay/lib/relay-hooks/loadEntryPoint.js
var require_loadEntryPoint = __commonJS((exports, module) => {
  var loadEntryPoint = function(environmentProvider, entryPoint, entryPointParams) {
    var loadingPromise = null;
    if (entryPoint.root.getModuleIfRequired() == null) {
      loadingPromise = entryPoint.root.load();
    }
    var preloadProps = entryPoint.getPreloadProps(entryPointParams);
    var { queries, entryPoints, extraProps } = preloadProps;
    var preloadedQueries = {};
    var preloadedEntryPoints = {};
    if (queries != null) {
      var queriesPropNames = Object.keys(queries);
      queriesPropNames.forEach(function(queryPropName) {
        var _queries$queryPropNam = queries[queryPropName], environmentProviderOptions = _queries$queryPropNam.environmentProviderOptions, options = _queries$queryPropNam.options, parameters = _queries$queryPropNam.parameters, variables = _queries$queryPropNam.variables;
        var environment = environmentProvider.getEnvironment(environmentProviderOptions);
        preloadedQueries[queryPropName] = loadQuery(environment, parameters, variables, {
          fetchPolicy: options === null || options === undefined ? undefined : options.fetchPolicy,
          networkCacheConfig: options === null || options === undefined ? undefined : options.networkCacheConfig,
          __nameForWarning: "loadEntryPoint"
        }, environmentProviderOptions);
      });
    }
    if (entryPoints != null) {
      var entryPointPropNames = Object.keys(entryPoints);
      entryPointPropNames.forEach(function(entryPointPropName) {
        var entryPointDescription = entryPoints[entryPointPropName];
        if (entryPointDescription == null) {
          return;
        }
        var { entryPoint: nestedEntryPoint, entryPointParams: nestedParams } = entryPointDescription;
        preloadedEntryPoints[entryPointPropName] = loadEntryPoint(environmentProvider, nestedEntryPoint, nestedParams);
      });
    }
    var isDisposed = false;
    return {
      dispose: function dispose() {
        if (isDisposed) {
          return;
        }
        if (preloadedQueries != null) {
          Object.values(preloadedQueries).forEach(function(_ref) {
            var innerDispose = _ref.dispose;
            innerDispose();
          });
        }
        if (preloadedEntryPoints != null) {
          Object.values(preloadedEntryPoints).forEach(function(_ref2) {
            var innerDispose = _ref2.dispose;
            innerDispose();
          });
        }
        isDisposed = true;
      },
      entryPoints: preloadedEntryPoints,
      extraProps: extraProps !== null && extraProps !== undefined ? extraProps : null,
      getComponent: function getComponent() {
        var componentModule = entryPoint.root.getModuleIfRequired();
        if (componentModule == null) {
          var _loadingPromise;
          loadingPromise = (_loadingPromise = loadingPromise) !== null && _loadingPromise !== undefined ? _loadingPromise : entryPoint.root.load();
          throw loadingPromise;
        }
        var component = componentModule["default"] != null ? componentModule["default"] : componentModule;
        return component;
      },
      get isDisposed() {
        return isDisposed;
      },
      queries: preloadedQueries,
      rootModuleID: entryPoint.root.getModuleId()
    };
  };
  var _require = require_loadQuery();
  var loadQuery = _require.loadQuery;
  module.exports = loadEntryPoint;
});

// node_modules/react-relay/lib/relay-hooks/RelayEnvironmentProvider.js
var require_RelayEnvironmentProvider = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  var RelayEnvironmentProvider = function(props) {
    var { children, environment, getEnvironmentForActor } = props;
    var context = useMemo(function() {
      return {
        environment,
        getEnvironmentForActor
      };
    }, [environment, getEnvironmentForActor]);
    return React.createElement(ReactRelayContext.Provider, {
      value: context
    }, children);
  };
  var ReactRelayContext = require_ReactRelayContext();
  var useMemo = React.useMemo;
  module.exports = RelayEnvironmentProvider;
});

// node_modules/react-relay/lib/relay-hooks/HooksImplementation.js
var require_HooksImplementation = __commonJS((exports, module) => {
  var inject = function(impl) {
    warning(implementation === null, "Relay HooksImplementation was injected twice.");
    implementation = impl;
  };
  var get = function() {
    return implementation;
  };
  var warning = require_warning();
  var implementation = null;
  module.exports = {
    inject,
    get
  };
});

// node_modules/react-relay/lib/relay-hooks/LRUCache.js
var require_LRUCache = __commonJS((exports, module) => {
  var create = function(capacity) {
    return new LRUCache(capacity);
  };
  var invariant = require_browser();
  var LRUCache = function() {
    function LRUCache2(capacity) {
      this._capacity = capacity;
      !(this._capacity > 0) && invariant(false, "LRUCache: Unable to create instance of cache with zero or negative capacity.");
      this._map = new Map;
    }
    var _proto = LRUCache2.prototype;
    _proto.set = function set(key, value) {
      this._map["delete"](key);
      this._map.set(key, value);
      if (this._map.size > this._capacity) {
        var firstKey = this._map.keys().next();
        if (!firstKey.done) {
          this._map["delete"](firstKey.value);
        }
      }
    };
    _proto.get = function get(key) {
      var value = this._map.get(key);
      if (value != null) {
        this._map["delete"](key);
        this._map.set(key, value);
      }
      return value;
    };
    _proto.has = function has(key) {
      return this._map.has(key);
    };
    _proto["delete"] = function _delete(key) {
      this._map["delete"](key);
    };
    _proto.size = function size() {
      return this._map.size;
    };
    _proto.capacity = function capacity() {
      return this._capacity - this._map.size;
    };
    _proto.clear = function clear() {
      this._map.clear();
    };
    return LRUCache2;
  }();
  module.exports = {
    create
  };
});

// node_modules/react-relay/lib/relay-hooks/SuspenseResource.js
var require_SuspenseResource = __commonJS((exports, module) => {
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _defineProperty2 = _interopRequireDefault(require_defineProperty());
  var invariant = require_browser();
  var TEMPORARY_RETAIN_DURATION_MS = 5 * 60 * 1000;
  var SuspenseResource = function() {
    function SuspenseResource2(retain) {
      var _this = this;
      (0, _defineProperty2["default"])(this, "_retainCount", 0);
      (0, _defineProperty2["default"])(this, "_retainDisposable", null);
      (0, _defineProperty2["default"])(this, "_releaseTemporaryRetain", null);
      this._retain = function(environment) {
        _this._retainCount++;
        if (_this._retainCount === 1) {
          _this._retainDisposable = retain(environment);
        }
        return {
          dispose: function dispose() {
            _this._retainCount = Math.max(0, _this._retainCount - 1);
            if (_this._retainCount === 0) {
              !(_this._retainDisposable != null) && invariant(false, "Relay: Expected disposable to release query to be defined.If you're seeing this, this is likely a bug in Relay.");
              _this._retainDisposable.dispose();
              _this._retainDisposable = null;
            }
          }
        };
      };
    }
    var _proto = SuspenseResource2.prototype;
    _proto.temporaryRetain = function temporaryRetain(environment) {
      var _this2 = this;
      var _this$_releaseTempora;
      if (environment.isServer()) {
        return {
          dispose: function dispose() {
          }
        };
      }
      var retention = this._retain(environment);
      var releaseQueryTimeout = null;
      var releaseTemporaryRetain = function releaseTemporaryRetain() {
        clearTimeout(releaseQueryTimeout);
        releaseQueryTimeout = null;
        _this2._releaseTemporaryRetain = null;
        retention.dispose();
      };
      releaseQueryTimeout = setTimeout(releaseTemporaryRetain, TEMPORARY_RETAIN_DURATION_MS);
      (_this$_releaseTempora = this._releaseTemporaryRetain) === null || _this$_releaseTempora === undefined || _this$_releaseTempora.call(this);
      this._releaseTemporaryRetain = releaseTemporaryRetain;
      return {
        dispose: function dispose() {
          var _this$_releaseTempora2;
          (_this$_releaseTempora2 = _this2._releaseTemporaryRetain) === null || _this$_releaseTempora2 === undefined || _this$_releaseTempora2.call(_this2);
        }
      };
    };
    _proto.permanentRetain = function permanentRetain(environment) {
      var disposable = this._retain(environment);
      this.releaseTemporaryRetain();
      return disposable;
    };
    _proto.releaseTemporaryRetain = function releaseTemporaryRetain() {
      var _this$_releaseTempora3;
      (_this$_releaseTempora3 = this._releaseTemporaryRetain) === null || _this$_releaseTempora3 === undefined || _this$_releaseTempora3.call(this);
      this._releaseTemporaryRetain = null;
    };
    _proto.getRetainCount = function getRetainCount() {
      return this._retainCount;
    };
    return SuspenseResource2;
  }();
  module.exports = SuspenseResource;
});

// node_modules/react-relay/lib/relay-hooks/QueryResource.js
var require_QueryResource = __commonJS((exports, module) => {
  var operationIsLiveQuery = function(operation) {
    return operation.request.node.params.metadata.live !== undefined;
  };
  var getQueryCacheIdentifier = function(environment, operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker) {
    var fetchPolicy = maybeFetchPolicy !== null && maybeFetchPolicy !== undefined ? maybeFetchPolicy : operationIsLiveQuery(operation) ? DEFAULT_LIVE_FETCH_POLICY : DEFAULT_FETCH_POLICY;
    var renderPolicy = maybeRenderPolicy !== null && maybeRenderPolicy !== undefined ? maybeRenderPolicy : environment.UNSTABLE_getDefaultRenderPolicy();
    var cacheIdentifier = "".concat(fetchPolicy, "-").concat(renderPolicy, "-").concat(operation.request.identifier);
    if (cacheBreaker != null) {
      return "".concat(cacheIdentifier, "-").concat(cacheBreaker);
    }
    return cacheIdentifier;
  };
  var getQueryResult = function(operation, cacheIdentifier) {
    var rootFragmentRef = {
      __id: operation.fragment.dataID,
      __fragments: (0, _defineProperty2["default"])({}, operation.fragment.node.name, operation.request.variables),
      __fragmentOwner: operation.request
    };
    return {
      cacheIdentifier,
      fragmentNode: operation.request.node.fragment,
      fragmentRef: rootFragmentRef,
      operation
    };
  };
  var createCacheEntry = function(cacheIdentifier, operation, operationAvailability, value, networkSubscription, onDispose) {
    var isLiveQuery = operationIsLiveQuery(operation);
    var currentValue = value;
    var currentNetworkSubscription = networkSubscription;
    var suspenseResource = new SuspenseResource(function(environment) {
      var retention = environment.retain(operation);
      return {
        dispose: function dispose() {
          if (isLiveQuery && currentNetworkSubscription != null) {
            currentNetworkSubscription.unsubscribe();
          }
          retention.dispose();
          onDispose(cacheEntry);
        }
      };
    });
    var cacheEntry = {
      cacheIdentifier,
      id: nextID++,
      processedPayloadsCount: 0,
      operationAvailability,
      getValue: function getValue() {
        return currentValue;
      },
      setValue: function setValue(val) {
        currentValue = val;
      },
      setNetworkSubscription: function setNetworkSubscription(subscription) {
        if (isLiveQuery && currentNetworkSubscription != null) {
          currentNetworkSubscription.unsubscribe();
        }
        currentNetworkSubscription = subscription;
      },
      temporaryRetain: function temporaryRetain(environment) {
        return suspenseResource.temporaryRetain(environment);
      },
      permanentRetain: function permanentRetain(environment) {
        return suspenseResource.permanentRetain(environment);
      },
      releaseTemporaryRetain: function releaseTemporaryRetain() {
        suspenseResource.releaseTemporaryRetain();
      }
    };
    return cacheEntry;
  };
  var createQueryResource = function(environment) {
    return new QueryResourceImpl(environment);
  };
  var getQueryResourceForEnvironment = function(environment) {
    var cached = dataResources.get(environment);
    if (cached) {
      return cached;
    }
    var newDataResource = createQueryResource(environment);
    dataResources.set(environment, newDataResource);
    return newDataResource;
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var _defineProperty2 = _interopRequireDefault(require_defineProperty());
  var LRUCache = require_LRUCache();
  var SuspenseResource = require_SuspenseResource();
  var invariant = require_browser();
  var _require = require_lib();
  var isPromise = _require.isPromise;
  var warning = require_warning();
  var CACHE_CAPACITY = 1000;
  var DEFAULT_FETCH_POLICY = "store-or-network";
  var DEFAULT_LIVE_FETCH_POLICY = "store-and-network";
  var WEAKMAP_SUPPORTED = typeof WeakMap === "function";
  var nextID = 200000;
  var QueryResourceImpl = function() {
    function QueryResourceImpl2(environment) {
      var _this = this;
      (0, _defineProperty2["default"])(this, "_clearCacheEntry", function(cacheEntry) {
        _this._cache["delete"](cacheEntry.cacheIdentifier);
      });
      this._environment = environment;
      this._cache = LRUCache.create(CACHE_CAPACITY);
    }
    var _proto = QueryResourceImpl2.prototype;
    _proto.prepare = function prepare(operation, fetchObservable, maybeFetchPolicy, maybeRenderPolicy, observer, cacheBreaker, profilerContext) {
      var cacheIdentifier = getQueryCacheIdentifier(this._environment, operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker);
      return this.prepareWithIdentifier(cacheIdentifier, operation, fetchObservable, maybeFetchPolicy, maybeRenderPolicy, observer, profilerContext);
    };
    _proto.prepareWithIdentifier = function prepareWithIdentifier(cacheIdentifier, operation, fetchObservable, maybeFetchPolicy, maybeRenderPolicy, observer, profilerContext) {
      var environment = this._environment;
      var fetchPolicy = maybeFetchPolicy !== null && maybeFetchPolicy !== undefined ? maybeFetchPolicy : operationIsLiveQuery(operation) ? DEFAULT_LIVE_FETCH_POLICY : DEFAULT_FETCH_POLICY;
      var renderPolicy = maybeRenderPolicy !== null && maybeRenderPolicy !== undefined ? maybeRenderPolicy : environment.UNSTABLE_getDefaultRenderPolicy();
      var cacheEntry = this._cache.get(cacheIdentifier);
      var temporaryRetainDisposable = null;
      var entryWasCached = cacheEntry != null;
      if (cacheEntry == null) {
        cacheEntry = this._fetchAndSaveQuery(cacheIdentifier, operation, fetchObservable, fetchPolicy, renderPolicy, profilerContext, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, observer), {}, {
          unsubscribe: function unsubscribe(subscription) {
            if (temporaryRetainDisposable != null) {
              temporaryRetainDisposable.dispose();
            }
            var observerUnsubscribe = observer === null || observer === undefined ? undefined : observer.unsubscribe;
            observerUnsubscribe && observerUnsubscribe(subscription);
          }
        }));
      }
      temporaryRetainDisposable = cacheEntry.temporaryRetain(environment);
      var cachedValue = cacheEntry.getValue();
      if (isPromise(cachedValue)) {
        environment.__log({
          name: "suspense.query",
          fetchPolicy,
          isPromiseCached: entryWasCached,
          operation,
          queryAvailability: cacheEntry.operationAvailability,
          renderPolicy
        });
        throw cachedValue;
      }
      if (cachedValue instanceof Error) {
        throw cachedValue;
      }
      return cachedValue;
    };
    _proto.retain = function retain(queryResult, profilerContext) {
      var environment = this._environment;
      var { cacheIdentifier, operation } = queryResult;
      var cacheEntry = this._getOrCreateCacheEntry(cacheIdentifier, operation, null, queryResult, null);
      var disposable = cacheEntry.permanentRetain(environment);
      environment.__log({
        name: "queryresource.retain",
        profilerContext,
        resourceID: cacheEntry.id
      });
      return {
        dispose: function dispose() {
          disposable.dispose();
        }
      };
    };
    _proto.releaseTemporaryRetain = function releaseTemporaryRetain(queryResult) {
      var cacheEntry = this._cache.get(queryResult.cacheIdentifier);
      if (cacheEntry != null) {
        cacheEntry.releaseTemporaryRetain();
      }
    };
    _proto.TESTS_ONLY__getCacheEntry = function TESTS_ONLY__getCacheEntry(operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker) {
      var environment = this._environment;
      var cacheIdentifier = getQueryCacheIdentifier(environment, operation, maybeFetchPolicy, maybeRenderPolicy, cacheBreaker);
      return this._cache.get(cacheIdentifier);
    };
    _proto._getOrCreateCacheEntry = function _getOrCreateCacheEntry(cacheIdentifier, operation, operationAvailability, value, networkSubscription) {
      var cacheEntry = this._cache.get(cacheIdentifier);
      if (cacheEntry == null) {
        cacheEntry = createCacheEntry(cacheIdentifier, operation, operationAvailability, value, networkSubscription, this._clearCacheEntry);
        this._cache.set(cacheIdentifier, cacheEntry);
      }
      return cacheEntry;
    };
    _proto._fetchAndSaveQuery = function _fetchAndSaveQuery(cacheIdentifier, operation, fetchObservable, fetchPolicy, renderPolicy, profilerContext, observer) {
      var _this2 = this;
      var environment = this._environment;
      var queryAvailability = environment.check(operation);
      var queryStatus = queryAvailability.status;
      var hasFullQuery = queryStatus === "available";
      var canPartialRender = hasFullQuery || renderPolicy === "partial" && queryStatus !== "stale";
      var shouldFetch;
      var shouldAllowRender;
      var resolveNetworkPromise = function resolveNetworkPromise() {
      };
      switch (fetchPolicy) {
        case "store-only": {
          shouldFetch = false;
          shouldAllowRender = true;
          break;
        }
        case "store-or-network": {
          shouldFetch = !hasFullQuery;
          shouldAllowRender = canPartialRender;
          break;
        }
        case "store-and-network": {
          shouldFetch = true;
          shouldAllowRender = canPartialRender;
          break;
        }
        case "network-only":
        default: {
          shouldFetch = true;
          shouldAllowRender = false;
          break;
        }
      }
      if (shouldAllowRender) {
        var queryResult = getQueryResult(operation, cacheIdentifier);
        var _cacheEntry = createCacheEntry(cacheIdentifier, operation, queryAvailability, queryResult, null, this._clearCacheEntry);
        this._cache.set(cacheIdentifier, _cacheEntry);
      }
      if (shouldFetch) {
        var _queryResult = getQueryResult(operation, cacheIdentifier);
        var networkSubscription;
        fetchObservable.subscribe({
          start: function start(subscription) {
            networkSubscription = subscription;
            var cacheEntry2 = _this2._cache.get(cacheIdentifier);
            if (cacheEntry2) {
              cacheEntry2.setNetworkSubscription(networkSubscription);
            }
            var observerStart = observer === null || observer === undefined ? undefined : observer.start;
            if (observerStart) {
              var subscriptionWithConditionalCancelation = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, subscription), {}, {
                unsubscribe: function unsubscribe() {
                  if (operationIsLiveQuery(operation)) {
                    subscription.unsubscribe();
                  }
                }
              });
              observerStart(subscriptionWithConditionalCancelation);
            }
          },
          next: function next() {
            var cacheEntry2 = _this2._getOrCreateCacheEntry(cacheIdentifier, operation, queryAvailability, _queryResult, networkSubscription);
            cacheEntry2.processedPayloadsCount += 1;
            cacheEntry2.setValue(_queryResult);
            resolveNetworkPromise();
            var observerNext = observer === null || observer === undefined ? undefined : observer.next;
            if (observerNext != null) {
              var snapshot = environment.lookup(operation.fragment);
              observerNext(snapshot);
            }
          },
          error: function error(_error) {
            var cacheEntry2 = _this2._getOrCreateCacheEntry(cacheIdentifier, operation, queryAvailability, _error, networkSubscription);
            if (cacheEntry2.processedPayloadsCount === 0) {
              cacheEntry2.setValue(_error);
            } else {
              warning(false, "QueryResource: An incremental payload for query `%s` returned an error: `%s`.", operation.fragment.node.name, String(_error.message));
            }
            resolveNetworkPromise();
            networkSubscription = null;
            cacheEntry2.setNetworkSubscription(null);
            var observerError = observer === null || observer === undefined ? undefined : observer.error;
            observerError && observerError(_error);
          },
          complete: function complete() {
            resolveNetworkPromise();
            networkSubscription = null;
            var cacheEntry2 = _this2._cache.get(cacheIdentifier);
            if (cacheEntry2) {
              cacheEntry2.setNetworkSubscription(null);
            }
            var observerComplete2 = observer === null || observer === undefined ? undefined : observer.complete;
            observerComplete2 && observerComplete2();
          },
          unsubscribe: observer === null || observer === undefined ? undefined : observer.unsubscribe
        });
        var _cacheEntry2 = this._cache.get(cacheIdentifier);
        if (!_cacheEntry2) {
          var networkPromise = new Promise(function(resolve) {
            resolveNetworkPromise = resolve;
          });
          networkPromise.displayName = "Relay(" + operation.fragment.node.name + ")";
          _cacheEntry2 = createCacheEntry(cacheIdentifier, operation, queryAvailability, networkPromise, networkSubscription, this._clearCacheEntry);
          this._cache.set(cacheIdentifier, _cacheEntry2);
        }
      } else {
        var observerComplete = observer === null || observer === undefined ? undefined : observer.complete;
        observerComplete && observerComplete();
      }
      var cacheEntry = this._cache.get(cacheIdentifier);
      !(cacheEntry != null) && invariant(false, "Relay: Expected to have cached a result when attempting to fetch query.If you're seeing this, this is likely a bug in Relay.");
      environment.__log({
        name: "queryresource.fetch",
        resourceID: cacheEntry.id,
        operation,
        profilerContext,
        fetchPolicy,
        renderPolicy,
        queryAvailability,
        shouldFetch
      });
      return cacheEntry;
    };
    return QueryResourceImpl2;
  }();
  var dataResources = WEAKMAP_SUPPORTED ? new WeakMap : new Map;
  module.exports = {
    createQueryResource,
    getQueryResourceForEnvironment,
    getQueryCacheIdentifier
  };
});

// node_modules/react-relay/lib/relay-hooks/useUnsafeRef_DEPRECATED.js
var require_useUnsafeRef_DEPRECATED = __commonJS((exports, module) => {
  var _require = __toESM(require_react(), 1);
  var useUnsafeRef_DEPRECATED = function(init) {
    return useMemo(function() {
      return {
        current: init
      };
    }, []);
  };
  var useMemo = _require.useMemo;
  module.exports = useUnsafeRef_DEPRECATED;
});

// node_modules/react-relay/lib/relay-hooks/useFetchTrackingRef.js
var require_useFetchTrackingRef = __commonJS((exports, module) => {
  var _require = __toESM(require_react(), 1);
  var useFetchTrackingRef = function() {
    var subscriptionRef = useUnsafeRef_DEPRECATED(null);
    var isFetchingRef = useUnsafeRef_DEPRECATED(false);
    var disposeFetch = useCallback(function() {
      if (subscriptionRef.current != null) {
        subscriptionRef.current.unsubscribe();
        subscriptionRef.current = null;
      }
      isFetchingRef.current = false;
    }, []);
    var startFetch = useCallback(function(subscription) {
      subscriptionRef.current = subscription;
      isFetchingRef.current = true;
    }, []);
    var completeFetch = useCallback(function() {
      subscriptionRef.current = null;
      isFetchingRef.current = false;
    }, []);
    useEffect(function() {
      return disposeFetch;
    }, [disposeFetch]);
    return {
      isFetchingRef,
      startFetch,
      disposeFetch,
      completeFetch
    };
  };
  var useUnsafeRef_DEPRECATED = require_useUnsafeRef_DEPRECATED();
  var useCallback = _require.useCallback;
  var useEffect = _require.useEffect;
  module.exports = useFetchTrackingRef;
});

// node_modules/react-relay/lib/relay-hooks/FragmentResource.js
var require_FragmentResource = __commonJS((exports, module) => {
  var isMissingData = function(snapshot) {
    if (Array.isArray(snapshot)) {
      return snapshot.some(function(s) {
        return s.isMissingData;
      });
    }
    return snapshot.isMissingData;
  };
  var hasMissingClientEdges = function(snapshot) {
    var _snapshot$missingClie, _snapshot$missingClie2;
    if (Array.isArray(snapshot)) {
      return snapshot.some(function(s) {
        var _s$missingClientEdges, _s$missingClientEdges2;
        return ((_s$missingClientEdges = (_s$missingClientEdges2 = s.missingClientEdges) === null || _s$missingClientEdges2 === undefined ? undefined : _s$missingClientEdges2.length) !== null && _s$missingClientEdges !== undefined ? _s$missingClientEdges : 0) > 0;
      });
    }
    return ((_snapshot$missingClie = (_snapshot$missingClie2 = snapshot.missingClientEdges) === null || _snapshot$missingClie2 === undefined ? undefined : _snapshot$missingClie2.length) !== null && _snapshot$missingClie !== undefined ? _snapshot$missingClie : 0) > 0;
  };
  var missingLiveResolverFields = function(snapshot) {
    if (Array.isArray(snapshot)) {
      return snapshot.map(function(s) {
        return s.missingLiveResolverFields;
      }).filter(Boolean).flat();
    }
    return snapshot.missingLiveResolverFields;
  };
  var singularOrPluralForEach = function(snapshot, f) {
    if (Array.isArray(snapshot)) {
      snapshot.forEach(f);
    } else {
      f(snapshot);
    }
  };
  var getFragmentResult = function(cacheKey, snapshot, storeEpoch) {
    if (Array.isArray(snapshot)) {
      return {
        cacheKey,
        snapshot,
        data: snapshot.map(function(s) {
          return s.data;
        }),
        isMissingData: isMissingData(snapshot),
        storeEpoch
      };
    }
    return {
      cacheKey,
      snapshot,
      data: snapshot.data,
      isMissingData: isMissingData(snapshot),
      storeEpoch
    };
  };
  var reportInvalidCachedData = function(nodeName) {
    invariant(false, "Relay: Expected to find cached data for plural fragment `%s` when receiving a subscription. If you're seeing this, this is likely a bug in Relay.", nodeName);
  };
  var createFragmentResource = function(environment) {
    return new FragmentResourceImpl(environment);
  };
  var getFragmentResourceForEnvironment = function(environment) {
    var cached = dataResources.get(environment);
    if (cached) {
      return cached;
    }
    var newDataResource = createFragmentResource(environment);
    dataResources.set(environment, newDataResource);
    return newDataResource;
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var _defineProperty2 = _interopRequireDefault(require_defineProperty());
  var _toConsumableArray2 = _interopRequireDefault(require_toConsumableArray());
  var LRUCache = require_LRUCache();
  var _require = require_QueryResource();
  var getQueryResourceForEnvironment = _require.getQueryResourceForEnvironment;
  var SuspenseResource = require_SuspenseResource();
  var invariant = require_browser();
  var _require2 = require_lib();
  var _require2$__internal = _require2.__internal;
  var fetchQuery = _require2$__internal.fetchQuery;
  var getPromiseForActiveRequest = _require2$__internal.getPromiseForActiveRequest;
  var RelayFeatureFlags = _require2.RelayFeatureFlags;
  var createOperationDescriptor = _require2.createOperationDescriptor;
  var getFragmentIdentifier = _require2.getFragmentIdentifier;
  var getPendingOperationsForFragment = _require2.getPendingOperationsForFragment;
  var getSelector = _require2.getSelector;
  var getVariablesFromFragment = _require2.getVariablesFromFragment;
  var handlePotentialSnapshotErrors = _require2.handlePotentialSnapshotErrors;
  var isPromise = _require2.isPromise;
  var recycleNodesInto = _require2.recycleNodesInto;
  var WEAKMAP_SUPPORTED = typeof WeakMap === "function";
  var CACHE_CAPACITY = 1e6;
  var CONSTANT_READONLY_EMPTY_ARRAY = Object.freeze([]);
  var ClientEdgeQueryResultsCache = function() {
    function ClientEdgeQueryResultsCache2(environment) {
      (0, _defineProperty2["default"])(this, "_cache", new Map);
      (0, _defineProperty2["default"])(this, "_retainCounts", new Map);
      this._environment = environment;
    }
    var _proto = ClientEdgeQueryResultsCache2.prototype;
    _proto.get = function get(fragmentIdentifier) {
      var _this$_cache$get$, _this$_cache$get;
      return (_this$_cache$get$ = (_this$_cache$get = this._cache.get(fragmentIdentifier)) === null || _this$_cache$get === undefined ? undefined : _this$_cache$get[0]) !== null && _this$_cache$get$ !== undefined ? _this$_cache$get$ : undefined;
    };
    _proto.recordQueryResults = function recordQueryResults(fragmentIdentifier, value) {
      var _this = this;
      var existing = this._cache.get(fragmentIdentifier);
      if (!existing) {
        var suspenseResource = new SuspenseResource(function() {
          return _this._retain(fragmentIdentifier);
        });
        this._cache.set(fragmentIdentifier, [value, suspenseResource]);
        suspenseResource.temporaryRetain(this._environment);
      } else {
        var existingResults = existing[0], _suspenseResource = existing[1];
        value.forEach(function(queryResult) {
          existingResults.push(queryResult);
        });
        _suspenseResource.temporaryRetain(this._environment);
      }
    };
    _proto._retain = function _retain(id) {
      var _this2 = this;
      var _this$_retainCounts$g;
      var retainCount = ((_this$_retainCounts$g = this._retainCounts.get(id)) !== null && _this$_retainCounts$g !== undefined ? _this$_retainCounts$g : 0) + 1;
      this._retainCounts.set(id, retainCount);
      return {
        dispose: function dispose() {
          var _this$_retainCounts$g2;
          var newRetainCount = ((_this$_retainCounts$g2 = _this2._retainCounts.get(id)) !== null && _this$_retainCounts$g2 !== undefined ? _this$_retainCounts$g2 : 0) - 1;
          if (newRetainCount > 0) {
            _this2._retainCounts.set(id, newRetainCount);
          } else {
            _this2._retainCounts["delete"](id);
            _this2._cache["delete"](id);
          }
        }
      };
    };
    return ClientEdgeQueryResultsCache2;
  }();
  var FragmentResourceImpl = function() {
    function FragmentResourceImpl2(environment) {
      this._environment = environment;
      this._cache = LRUCache.create(CACHE_CAPACITY);
      if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
        this._clientEdgeQueryResultsCache = new ClientEdgeQueryResultsCache(environment);
      }
    }
    var _proto2 = FragmentResourceImpl2.prototype;
    _proto2.read = function read(fragmentNode, fragmentRef, componentDisplayName, fragmentKey) {
      return this.readWithIdentifier(fragmentNode, fragmentRef, getFragmentIdentifier(fragmentNode, fragmentRef), componentDisplayName, fragmentKey);
    };
    _proto2.readWithIdentifier = function readWithIdentifier(fragmentNode, fragmentRef, fragmentIdentifier, componentDisplayName, fragmentKey) {
      var _this3 = this;
      var _fragmentNode$metadat, _fragmentNode$metadat2, _missingLiveResolverF2, _missingLiveResolverF3;
      var environment = this._environment;
      if (fragmentRef == null) {
        return {
          cacheKey: fragmentIdentifier,
          data: null,
          isMissingData: false,
          snapshot: null,
          storeEpoch: 0
        };
      }
      var storeEpoch = environment.getStore().getEpoch();
      if ((fragmentNode === null || fragmentNode === undefined ? undefined : (_fragmentNode$metadat = fragmentNode.metadata) === null || _fragmentNode$metadat === undefined ? undefined : _fragmentNode$metadat.plural) === true) {
        !Array.isArray(fragmentRef) && invariant(false, "Relay: Expected fragment pointer%s for fragment `%s` to be an array, instead got `%s`. Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.", fragmentKey != null ? " for key `".concat(fragmentKey, "`") : "", fragmentNode.name, typeof fragmentRef, fragmentNode.name);
        if (fragmentRef.length === 0) {
          return {
            cacheKey: fragmentIdentifier,
            data: CONSTANT_READONLY_EMPTY_ARRAY,
            isMissingData: false,
            snapshot: CONSTANT_READONLY_EMPTY_ARRAY,
            storeEpoch
          };
        }
      }
      var cachedValue = this._cache.get(fragmentIdentifier);
      if (cachedValue != null) {
        var _missingLiveResolverF;
        if (cachedValue.kind === "pending" && isPromise(cachedValue.promise)) {
          environment.__log({
            name: "suspense.fragment",
            data: cachedValue.result.data,
            fragment: fragmentNode,
            isRelayHooks: true,
            isMissingData: cachedValue.result.isMissingData,
            isPromiseCached: true,
            pendingOperations: cachedValue.pendingOperations
          });
          throw cachedValue.promise;
        }
        if (cachedValue.kind === "done" && cachedValue.result.snapshot && !((_missingLiveResolverF = missingLiveResolverFields(cachedValue.result.snapshot)) !== null && _missingLiveResolverF !== undefined && _missingLiveResolverF.length)) {
          this._throwOrLogErrorsInSnapshot(cachedValue.result.snapshot);
          if (cachedValue.result.isMissingData) {
            environment.__log({
              name: "fragmentresource.missing_data",
              data: cachedValue.result.data,
              fragment: fragmentNode,
              isRelayHooks: true,
              cached: true
            });
          }
          return cachedValue.result;
        }
      }
      var fragmentSelector = getSelector(fragmentNode, fragmentRef);
      !(fragmentSelector != null) && invariant(false, "Relay: Expected to receive an object where `...%s` was spread, but the fragment reference was not found`. This is most likely the result of:\n- Forgetting to spread `%s` in `%s`'s parent's fragment.\n- Conditionally fetching `%s` but unconditionally passing %s prop to `%s`. If the parent fragment only fetches the fragment conditionally - with e.g. `@include`, `@skip`, or inside a `... on SomeType { }` spread  - then the fragment reference will not exist. In this case, pass `null` if the conditions for evaluating the fragment are not met (e.g. if the `@include(if)` value is false.)", fragmentNode.name, fragmentNode.name, componentDisplayName, fragmentNode.name, fragmentKey == null ? "a fragment reference" : "the `".concat(fragmentKey, "`"), componentDisplayName);
      var fragmentResult = null;
      var snapshot = null;
      if (RelayFeatureFlags.ENABLE_RELAY_OPERATION_TRACKER_SUSPENSE && cachedValue != null && cachedValue.kind === "missing") {
        fragmentResult = cachedValue.result;
        snapshot = cachedValue.snapshot;
      } else {
        snapshot = fragmentSelector.kind === "PluralReaderSelector" ? fragmentSelector.selectors.map(function(s) {
          return environment.lookup(s);
        }) : environment.lookup(fragmentSelector);
        fragmentResult = getFragmentResult(fragmentIdentifier, snapshot, storeEpoch);
      }
      if (!fragmentResult.isMissingData) {
        this._throwOrLogErrorsInSnapshot(snapshot);
        this._cache.set(fragmentIdentifier, {
          kind: "done",
          result: fragmentResult
        });
        return fragmentResult;
      }
      var clientEdgeRequests = null;
      if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && ((_fragmentNode$metadat2 = fragmentNode.metadata) === null || _fragmentNode$metadat2 === undefined ? undefined : _fragmentNode$metadat2.hasClientEdges) === true && hasMissingClientEdges(snapshot)) {
        clientEdgeRequests = [];
        var queryResource = getQueryResourceForEnvironment(this._environment);
        var queryResults = [];
        singularOrPluralForEach(snapshot, function(snap) {
          var _snap$missingClientEd;
          (_snap$missingClientEd = snap.missingClientEdges) === null || _snap$missingClientEd === undefined || _snap$missingClientEd.forEach(function(_ref) {
            var _clientEdgeRequests;
            var { request, clientEdgeDestinationID } = _ref;
            var _this3$_performClient = _this3._performClientEdgeQuery(queryResource, fragmentNode, fragmentRef, request, clientEdgeDestinationID), queryResult = _this3$_performClient.queryResult, requestDescriptor = _this3$_performClient.requestDescriptor;
            queryResults.push(queryResult);
            (_clientEdgeRequests = clientEdgeRequests) === null || _clientEdgeRequests === undefined || _clientEdgeRequests.push(requestDescriptor);
          });
        });
        !(this._clientEdgeQueryResultsCache != null) && invariant(false, "Client edge query result cache should exist when ENABLE_CLIENT_EDGES is on.");
        this._clientEdgeQueryResultsCache.recordQueryResults(fragmentIdentifier, queryResults);
      }
      var clientEdgePromises = [];
      if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && clientEdgeRequests) {
        clientEdgePromises = clientEdgeRequests.map(function(request) {
          return getPromiseForActiveRequest(_this3._environment, request);
        }).filter(Boolean);
      }
      var fragmentOwner = fragmentSelector.kind === "PluralReaderSelector" ? fragmentSelector.selectors[0].owner : fragmentSelector.owner;
      var parentQueryPromiseResult = this._getAndSavePromiseForFragmentRequestInFlight(fragmentIdentifier, fragmentNode, fragmentOwner, fragmentResult);
      var parentQueryPromiseResultPromise = parentQueryPromiseResult === null || parentQueryPromiseResult === undefined ? undefined : parentQueryPromiseResult.promise;
      var missingResolverFieldPromises = (_missingLiveResolverF2 = (_missingLiveResolverF3 = missingLiveResolverFields(snapshot)) === null || _missingLiveResolverF3 === undefined ? undefined : _missingLiveResolverF3.map(function(_ref2) {
        var liveStateID = _ref2.liveStateID;
        var store = environment.getStore();
        return store.getLiveResolverPromise(liveStateID);
      })) !== null && _missingLiveResolverF2 !== undefined ? _missingLiveResolverF2 : [];
      if (clientEdgePromises.length || missingResolverFieldPromises.length || isPromise(parentQueryPromiseResultPromise)) {
        var _parentQueryPromiseRe, _clientEdgeRequests2;
        environment.__log({
          name: "suspense.fragment",
          data: fragmentResult.data,
          fragment: fragmentNode,
          isRelayHooks: true,
          isPromiseCached: false,
          isMissingData: fragmentResult.isMissingData,
          pendingOperations: [].concat((0, _toConsumableArray2["default"])((_parentQueryPromiseRe = parentQueryPromiseResult === null || parentQueryPromiseResult === undefined ? undefined : parentQueryPromiseResult.pendingOperations) !== null && _parentQueryPromiseRe !== undefined ? _parentQueryPromiseRe : []), (0, _toConsumableArray2["default"])((_clientEdgeRequests2 = clientEdgeRequests) !== null && _clientEdgeRequests2 !== undefined ? _clientEdgeRequests2 : []))
        });
        var promises = [];
        if (clientEdgePromises.length > 0) {
          promises = promises.concat(clientEdgePromises);
        }
        if (missingResolverFieldPromises.length > 0) {
          promises = promises.concat(missingResolverFieldPromises);
        }
        if (promises.length > 0) {
          if (parentQueryPromiseResultPromise) {
            promises.push(parentQueryPromiseResultPromise);
          }
          throw Promise.all(promises);
        }
        if (parentQueryPromiseResultPromise) {
          throw parentQueryPromiseResultPromise;
        }
      }
      if (RelayFeatureFlags.ENABLE_RELAY_OPERATION_TRACKER_SUSPENSE && fragmentResult.isMissingData) {
        this._cache.set(fragmentIdentifier, {
          kind: "done",
          result: fragmentResult
        });
      }
      this._throwOrLogErrorsInSnapshot(snapshot);
      environment.__log({
        name: "fragmentresource.missing_data",
        data: fragmentResult.data,
        fragment: fragmentNode,
        isRelayHooks: true,
        cached: false
      });
      return getFragmentResult(fragmentIdentifier, snapshot, storeEpoch);
    };
    _proto2._performClientEdgeQuery = function _performClientEdgeQuery(queryResource, fragmentNode, fragmentRef, request, clientEdgeDestinationID) {
      var originalVariables = getVariablesFromFragment(fragmentNode, fragmentRef);
      var variables = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, originalVariables), {}, {
        id: clientEdgeDestinationID
      });
      var operation = createOperationDescriptor(request, variables, {});
      var fetchObservable = fetchQuery(this._environment, operation);
      var queryResult = queryResource.prepare(operation, fetchObservable);
      return {
        requestDescriptor: operation.request,
        queryResult
      };
    };
    _proto2._throwOrLogErrorsInSnapshot = function _throwOrLogErrorsInSnapshot(snapshot) {
      var _this4 = this;
      if (Array.isArray(snapshot)) {
        snapshot.forEach(function(s) {
          handlePotentialSnapshotErrors(_this4._environment, s.missingRequiredFields, s.relayResolverErrors);
        });
      } else {
        handlePotentialSnapshotErrors(this._environment, snapshot.missingRequiredFields, snapshot.relayResolverErrors);
      }
    };
    _proto2.readSpec = function readSpec(fragmentNodes, fragmentRefs, componentDisplayName) {
      var result = {};
      for (var key in fragmentNodes) {
        result[key] = this.read(fragmentNodes[key], fragmentRefs[key], componentDisplayName, key);
      }
      return result;
    };
    _proto2.subscribe = function subscribe(fragmentResult, callback) {
      var _this5 = this;
      var environment = this._environment;
      var cacheKey = fragmentResult.cacheKey;
      var renderedSnapshot = fragmentResult.snapshot;
      if (!renderedSnapshot) {
        return {
          dispose: function dispose() {
          }
        };
      }
      var _this$checkMissedUpda = this.checkMissedUpdates(fragmentResult), didMissUpdates = _this$checkMissedUpda[0], currentSnapshot = _this$checkMissedUpda[1];
      if (didMissUpdates) {
        callback();
      }
      var disposables = [];
      if (Array.isArray(renderedSnapshot)) {
        !Array.isArray(currentSnapshot) && invariant(false, "Relay: Expected snapshots to be plural. If you're seeing this, this is likely a bug in Relay.");
        currentSnapshot.forEach(function(snapshot, idx) {
          disposables.push(environment.subscribe(snapshot, function(latestSnapshot) {
            var storeEpoch = environment.getStore().getEpoch();
            _this5._updatePluralSnapshot(cacheKey, currentSnapshot, latestSnapshot, idx, storeEpoch);
            callback();
          }));
        });
      } else {
        !(currentSnapshot != null && !Array.isArray(currentSnapshot)) && invariant(false, "Relay: Expected snapshot to be singular. If you're seeing this, this is likely a bug in Relay.");
        disposables.push(environment.subscribe(currentSnapshot, function(latestSnapshot) {
          var storeEpoch = environment.getStore().getEpoch();
          var result = getFragmentResult(cacheKey, latestSnapshot, storeEpoch);
          if (RelayFeatureFlags.ENABLE_RELAY_OPERATION_TRACKER_SUSPENSE && result.isMissingData) {
            _this5._cache.set(cacheKey, {
              kind: "missing",
              result,
              snapshot: latestSnapshot
            });
          } else {
            _this5._cache.set(cacheKey, {
              kind: "done",
              result: getFragmentResult(cacheKey, latestSnapshot, storeEpoch)
            });
          }
          callback();
        }));
      }
      if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
        var _this$_clientEdgeQuer, _this$_clientEdgeQuer2;
        var clientEdgeQueryResults = (_this$_clientEdgeQuer = (_this$_clientEdgeQuer2 = this._clientEdgeQueryResultsCache) === null || _this$_clientEdgeQuer2 === undefined ? undefined : _this$_clientEdgeQuer2.get(cacheKey)) !== null && _this$_clientEdgeQuer !== undefined ? _this$_clientEdgeQuer : undefined;
        if (clientEdgeQueryResults !== null && clientEdgeQueryResults !== undefined && clientEdgeQueryResults.length) {
          var queryResource = getQueryResourceForEnvironment(this._environment);
          clientEdgeQueryResults.forEach(function(queryResult) {
            disposables.push(queryResource.retain(queryResult));
          });
        }
      }
      return {
        dispose: function dispose() {
          disposables.forEach(function(s) {
            return s.dispose();
          });
          _this5._cache["delete"](cacheKey);
        }
      };
    };
    _proto2.subscribeSpec = function subscribeSpec(fragmentResults, callback) {
      var _this6 = this;
      var disposables = Object.keys(fragmentResults).map(function(key) {
        return _this6.subscribe(fragmentResults[key], callback);
      });
      return {
        dispose: function dispose() {
          disposables.forEach(function(disposable) {
            disposable.dispose();
          });
        }
      };
    };
    _proto2.checkMissedUpdates = function checkMissedUpdates(fragmentResult) {
      var environment = this._environment;
      var renderedSnapshot = fragmentResult.snapshot;
      if (!renderedSnapshot) {
        return [false, null];
      }
      var storeEpoch = null;
      storeEpoch = environment.getStore().getEpoch();
      if (fragmentResult.storeEpoch === storeEpoch) {
        return [false, fragmentResult.snapshot];
      }
      var cacheKey = fragmentResult.cacheKey;
      if (Array.isArray(renderedSnapshot)) {
        var didMissUpdates = false;
        var currentSnapshots = [];
        renderedSnapshot.forEach(function(snapshot, idx) {
          var currentSnapshot2 = environment.lookup(snapshot.selector);
          var renderData2 = snapshot.data;
          var currentData2 = currentSnapshot2.data;
          var updatedData2 = recycleNodesInto(renderData2, currentData2);
          if (updatedData2 !== renderData2) {
            currentSnapshot2 = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, currentSnapshot2), {}, {
              data: updatedData2
            });
            didMissUpdates = true;
          }
          currentSnapshots[idx] = currentSnapshot2;
        });
        if (didMissUpdates) {
          var result = getFragmentResult(cacheKey, currentSnapshots, storeEpoch);
          if (RelayFeatureFlags.ENABLE_RELAY_OPERATION_TRACKER_SUSPENSE && result.isMissingData) {
            this._cache.set(cacheKey, {
              kind: "missing",
              result,
              snapshot: currentSnapshots
            });
          } else {
            this._cache.set(cacheKey, {
              kind: "done",
              result
            });
          }
        }
        return [didMissUpdates, currentSnapshots];
      }
      var currentSnapshot = environment.lookup(renderedSnapshot.selector);
      var renderData = renderedSnapshot.data;
      var currentData = currentSnapshot.data;
      var updatedData = recycleNodesInto(renderData, currentData);
      var updatedCurrentSnapshot = {
        data: updatedData,
        isMissingData: currentSnapshot.isMissingData,
        missingClientEdges: currentSnapshot.missingClientEdges,
        missingLiveResolverFields: currentSnapshot.missingLiveResolverFields,
        seenRecords: currentSnapshot.seenRecords,
        selector: currentSnapshot.selector,
        missingRequiredFields: currentSnapshot.missingRequiredFields,
        relayResolverErrors: currentSnapshot.relayResolverErrors
      };
      if (updatedData !== renderData) {
        var _result = getFragmentResult(cacheKey, updatedCurrentSnapshot, storeEpoch);
        if (RelayFeatureFlags.ENABLE_RELAY_OPERATION_TRACKER_SUSPENSE && _result.isMissingData) {
          this._cache.set(cacheKey, {
            kind: "missing",
            result: _result,
            snapshot: updatedCurrentSnapshot
          });
        } else {
          this._cache.set(cacheKey, {
            kind: "done",
            result: _result
          });
        }
      }
      return [updatedData !== renderData, updatedCurrentSnapshot];
    };
    _proto2.checkMissedUpdatesSpec = function checkMissedUpdatesSpec(fragmentResults) {
      var _this7 = this;
      return Object.keys(fragmentResults).some(function(key) {
        return _this7.checkMissedUpdates(fragmentResults[key])[0];
      });
    };
    _proto2._getAndSavePromiseForFragmentRequestInFlight = function _getAndSavePromiseForFragmentRequestInFlight(cacheKey, fragmentNode, fragmentOwner, fragmentResult) {
      var _this8 = this;
      var pendingOperationsResult = getPendingOperationsForFragment(this._environment, fragmentNode, fragmentOwner);
      if (pendingOperationsResult == null) {
        return null;
      }
      var networkPromise = pendingOperationsResult.promise;
      var pendingOperations = pendingOperationsResult.pendingOperations;
      var promise = networkPromise.then(function() {
        _this8._cache["delete"](cacheKey);
      })["catch"](function(error) {
        _this8._cache["delete"](cacheKey);
      });
      promise.displayName = networkPromise.displayName;
      this._cache.set(cacheKey, {
        kind: "pending",
        pendingOperations,
        promise,
        result: fragmentResult
      });
      return {
        promise,
        pendingOperations
      };
    };
    _proto2._updatePluralSnapshot = function _updatePluralSnapshot(cacheKey, baseSnapshots, latestSnapshot, idx, storeEpoch) {
      var _currentFragmentResul;
      var currentFragmentResult = this._cache.get(cacheKey);
      if (isPromise(currentFragmentResult)) {
        reportInvalidCachedData(latestSnapshot.selector.node.name);
        return;
      }
      var currentSnapshot = currentFragmentResult === null || currentFragmentResult === undefined ? undefined : (_currentFragmentResul = currentFragmentResult.result) === null || _currentFragmentResul === undefined ? undefined : _currentFragmentResul.snapshot;
      if (currentSnapshot && !Array.isArray(currentSnapshot)) {
        reportInvalidCachedData(latestSnapshot.selector.node.name);
        return;
      }
      var nextSnapshots = currentSnapshot ? (0, _toConsumableArray2["default"])(currentSnapshot) : (0, _toConsumableArray2["default"])(baseSnapshots);
      nextSnapshots[idx] = latestSnapshot;
      var result = getFragmentResult(cacheKey, nextSnapshots, storeEpoch);
      if (RelayFeatureFlags.ENABLE_RELAY_OPERATION_TRACKER_SUSPENSE && result.isMissingData) {
        this._cache.set(cacheKey, {
          kind: "missing",
          result,
          snapshot: nextSnapshots
        });
      } else {
        this._cache.set(cacheKey, {
          kind: "done",
          result
        });
      }
    };
    return FragmentResourceImpl2;
  }();
  var dataResources = WEAKMAP_SUPPORTED ? new WeakMap : new Map;
  module.exports = {
    createFragmentResource,
    getFragmentResourceForEnvironment
  };
});

// node_modules/react-relay/lib/relay-hooks/useFragmentNode.js
var require_useFragmentNode = __commonJS((exports, module) => {
  var _require2 = __toESM(require_react(), 1);
  var useFragmentNode = function(fragmentNode, fragmentRef, componentDisplayName) {
    var environment = useRelayEnvironment();
    var FragmentResource = getFragmentResourceForEnvironment(environment);
    var isMountedRef = useUnsafeRef_DEPRECATED(false);
    var _useState = useState(0), forceUpdate = _useState[1];
    var fragmentIdentifier = getFragmentIdentifier(fragmentNode, fragmentRef);
    var fragmentResult = FragmentResource.readWithIdentifier(fragmentNode, fragmentRef, fragmentIdentifier, componentDisplayName);
    var isListeningForUpdatesRef = useUnsafeRef_DEPRECATED(true);
    function enableStoreUpdates() {
      isListeningForUpdatesRef.current = true;
      var didMissUpdates = FragmentResource.checkMissedUpdates(fragmentResult)[0];
      if (didMissUpdates) {
        handleDataUpdate();
      }
    }
    function disableStoreUpdates() {
      isListeningForUpdatesRef.current = false;
    }
    function handleDataUpdate() {
      if (isMountedRef.current === false || isListeningForUpdatesRef.current === false) {
        return;
      }
      forceUpdate(function(count) {
        return count + 1;
      });
    }
    useEffect(function() {
      isMountedRef.current = true;
      var disposable = FragmentResource.subscribe(fragmentResult, handleDataUpdate);
      return function() {
        isMountedRef.current = false;
        disposable.dispose();
      };
    }, [environment, fragmentIdentifier]);
    if (RelayFeatureFlags.LOG_MISSING_RECORDS_IN_PROD || true) {
      if (fragmentRef != null && (fragmentResult.data === undefined || Array.isArray(fragmentResult.data) && fragmentResult.data.length > 0 && fragmentResult.data.every(function(data) {
        return data === undefined;
      }))) {
        warning(false, "Relay: Expected to have been able to read non-null data for fragment `%s` declared in `%s`, since fragment reference was non-null. Make sure that that `%s`'s parent isn't holding on to and/or passing a fragment reference for data that has been deleted.", fragmentNode.name, componentDisplayName, componentDisplayName);
      }
    }
    return {
      data: fragmentResult.data,
      disableStoreUpdates,
      enableStoreUpdates
    };
  };
  var _require = require_FragmentResource();
  var getFragmentResourceForEnvironment = _require.getFragmentResourceForEnvironment;
  var useRelayEnvironment = require_useRelayEnvironment();
  var useUnsafeRef_DEPRECATED = require_useUnsafeRef_DEPRECATED();
  var useEffect = _require2.useEffect;
  var useState = _require2.useState;
  var _require3 = require_lib();
  var RelayFeatureFlags = _require3.RelayFeatureFlags;
  var getFragmentIdentifier = _require3.getFragmentIdentifier;
  var warning = require_warning();
  module.exports = useFragmentNode;
});

// node_modules/react-relay/lib/relay-hooks/useLazyLoadQueryNode.js
var require_useLazyLoadQueryNode = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  var useLazyLoadQueryNode = function(_ref) {
    var { query, componentDisplayName, fetchObservable, fetchPolicy, fetchKey, renderPolicy } = _ref;
    var environment = useRelayEnvironment();
    var profilerContext = useContext(ProfilerContext);
    var QueryResource = getQueryResourceForEnvironment(environment);
    var _useState = useState(0), forceUpdateKey = _useState[0], forceUpdate = _useState[1];
    var _useFetchTrackingRef = useFetchTrackingRef(), startFetch = _useFetchTrackingRef.startFetch, completeFetch = _useFetchTrackingRef.completeFetch;
    var cacheBreaker = "".concat(forceUpdateKey, "-").concat(fetchKey !== null && fetchKey !== undefined ? fetchKey : "");
    var cacheIdentifier = getQueryCacheIdentifier(environment, query, fetchPolicy, renderPolicy, cacheBreaker);
    var preparedQueryResult = profilerContext.wrapPrepareQueryResource(function() {
      return QueryResource.prepareWithIdentifier(cacheIdentifier, query, fetchObservable, fetchPolicy, renderPolicy, {
        start: startFetch,
        complete: completeFetch,
        error: completeFetch
      }, profilerContext);
    });
    var maybeHiddenOrFastRefresh = useRef(false);
    useEffect(function() {
      return function() {
        maybeHiddenOrFastRefresh.current = true;
      };
    }, []);
    useEffect(function() {
      if (maybeHiddenOrFastRefresh.current === true) {
        maybeHiddenOrFastRefresh.current = false;
        forceUpdate(function(n) {
          return n + 1;
        });
        return;
      }
      var disposable = QueryResource.retain(preparedQueryResult, profilerContext);
      return function() {
        disposable.dispose();
      };
    }, [environment, cacheIdentifier]);
    useEffect(function() {
      QueryResource.releaseTemporaryRetain(preparedQueryResult);
    });
    var { fragmentNode, fragmentRef } = preparedQueryResult;
    var data = useFragmentNodeImpl(fragmentNode, fragmentRef, componentDisplayName);
    return data;
  };
  var useFragmentNodeImpl = function(fragment, key, componentDisplayName) {
    var impl = HooksImplementation.get();
    if (impl && impl.useFragment__internal) {
      return impl.useFragment__internal(fragment, key, componentDisplayName);
    } else {
      var _useFragmentNode = useFragmentNode(fragment, key, componentDisplayName), data = _useFragmentNode.data;
      return data;
    }
  };
  var HooksImplementation = require_HooksImplementation();
  var ProfilerContext = require_ProfilerContext();
  var _require = require_QueryResource();
  var getQueryCacheIdentifier = _require.getQueryCacheIdentifier;
  var getQueryResourceForEnvironment = _require.getQueryResourceForEnvironment;
  var useFetchTrackingRef = require_useFetchTrackingRef();
  var useFragmentNode = require_useFragmentNode();
  var useRelayEnvironment = require_useRelayEnvironment();
  var useContext = React.useContext;
  var useEffect = React.useEffect;
  var useState = React.useState;
  var useRef = React.useRef;
  module.exports = useLazyLoadQueryNode;
});

// node_modules/react-relay/lib/relay-hooks/useMemoVariables.js
var require_useMemoVariables = __commonJS((exports, module) => {
  var _require = __toESM(require_react(), 1);
  var useMemoVariables = function(variables) {
    var _useState = useState(variables), mirroredVariables = _useState[0], setMirroredVariables = _useState[1];
    if (areEqual(variables, mirroredVariables)) {
      return mirroredVariables;
    } else {
      setMirroredVariables(variables);
      return variables;
    }
  };
  var areEqual = require_areEqual();
  var useState = _require.useState;
  module.exports = useMemoVariables;
});

// node_modules/react-relay/lib/relay-hooks/useMemoOperationDescriptor.js
var require_useMemoOperationDescriptor = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  var useMemoOperationDescriptor = function(gqlQuery, variables, cacheConfig) {
    var memoVariables = useMemoVariables(variables);
    var memoCacheConfig = useMemoVariables(cacheConfig || {});
    return useMemo(function() {
      return createOperationDescriptor(getRequest(gqlQuery), memoVariables, memoCacheConfig);
    }, [gqlQuery, memoVariables, memoCacheConfig]);
  };
  var useMemoVariables = require_useMemoVariables();
  var _require = require_lib();
  var createOperationDescriptor = _require.createOperationDescriptor;
  var getRequest = _require.getRequest;
  var useMemo = React.useMemo;
  module.exports = useMemoOperationDescriptor;
});

// node_modules/react-relay/lib/relay-hooks/useLazyLoadQuery.js
var require_useLazyLoadQuery = __commonJS((exports, module) => {
  var useLazyLoadQuery = function(gqlQuery, variables, options) {
    useTrackLoadQueryInRender();
    var environment = useRelayEnvironment();
    var query = useMemoOperationDescriptor(gqlQuery, variables, options && options.networkCacheConfig ? options.networkCacheConfig : {
      force: true
    });
    var data = useLazyLoadQueryNode({
      componentDisplayName: "useLazyLoadQuery()",
      fetchKey: options === null || options === undefined ? undefined : options.fetchKey,
      fetchObservable: fetchQuery(environment, query),
      fetchPolicy: options === null || options === undefined ? undefined : options.fetchPolicy,
      query,
      renderPolicy: options === null || options === undefined ? undefined : options.UNSTABLE_renderPolicy
    });
    return data;
  };
  var _require = require_loadQuery();
  var useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
  var useLazyLoadQueryNode = require_useLazyLoadQueryNode();
  var useMemoOperationDescriptor = require_useMemoOperationDescriptor();
  var useRelayEnvironment = require_useRelayEnvironment();
  var _require2 = require_lib();
  var fetchQuery = _require2.__internal.fetchQuery;
  module.exports = useLazyLoadQuery;
});

// node_modules/react-relay/lib/relay-hooks/useClientQuery.js
var require_useClientQuery = __commonJS((exports, module) => {
  var useClientQuery = function(gqlQuery, variables, options) {
    var query = gqlQuery;
    return useLazyLoadQuery(query, variables, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, options), {}, {
      fetchPolicy: "store-only"
    }));
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var useLazyLoadQuery = require_useLazyLoadQuery();
  module.exports = useClientQuery;
});

// node_modules/react-relay/lib/relay-hooks/useIsMountedRef.js
var require_useIsMountedRef = __commonJS((exports, module) => {
  var _require = __toESM(require_react(), 1);
  var useIsMountedRef = function() {
    var isMountedRef = useRef(true);
    useEffect(function() {
      isMountedRef.current = true;
      return function() {
        isMountedRef.current = false;
      };
    }, []);
    return isMountedRef;
  };
  var useEffect = _require.useEffect;
  var useRef = _require.useRef;
  module.exports = useIsMountedRef;
});

// node_modules/react-relay/lib/relay-hooks/useEntryPointLoader.js
var require_useEntryPointLoader = __commonJS((exports, module) => {
  var _require2 = __toESM(require_react(), 1);
  var useLoadEntryPoint = function(environmentProvider, entryPoint, options) {
    var _options$TEST_ONLY__i, _options$TEST_ONLY__i2, _options$TEST_ONLY__i3, _options$TEST_ONLY__i4;
    useTrackLoadQueryInRender();
    var initialEntryPointReferenceInternal = (_options$TEST_ONLY__i = options === null || options === undefined ? undefined : (_options$TEST_ONLY__i2 = options.TEST_ONLY__initialEntryPointData) === null || _options$TEST_ONLY__i2 === undefined ? undefined : _options$TEST_ONLY__i2.entryPointReference) !== null && _options$TEST_ONLY__i !== undefined ? _options$TEST_ONLY__i : initialNullEntryPointReferenceState;
    var initialEntryPointParamsInternal = (_options$TEST_ONLY__i3 = options === null || options === undefined ? undefined : (_options$TEST_ONLY__i4 = options.TEST_ONLY__initialEntryPointData) === null || _options$TEST_ONLY__i4 === undefined ? undefined : _options$TEST_ONLY__i4.entryPointParams) !== null && _options$TEST_ONLY__i3 !== undefined ? _options$TEST_ONLY__i3 : null;
    var isMountedRef = useIsMountedRef();
    var undisposedEntryPointReferencesRef = useRef(new Set([initialEntryPointReferenceInternal]));
    var _useState = useState(initialEntryPointReferenceInternal), entryPointReference = _useState[0], setEntryPointReference = _useState[1];
    var _useState2 = useState(initialEntryPointParamsInternal), entryPointParams = _useState2[0], setEntryPointParams = _useState2[1];
    var disposeEntryPoint = useCallback(function() {
      if (isMountedRef.current) {
        var nullEntryPointReference = {
          kind: "NullEntryPointReference"
        };
        undisposedEntryPointReferencesRef.current.add(nullEntryPointReference);
        setEntryPointReference(nullEntryPointReference);
      }
    }, [setEntryPointReference, isMountedRef]);
    var entryPointLoaderCallback = useCallback(function(params) {
      if (isMountedRef.current) {
        var updatedEntryPointReference = loadEntryPoint(environmentProvider, entryPoint, params);
        undisposedEntryPointReferencesRef.current.add(updatedEntryPointReference);
        setEntryPointReference(updatedEntryPointReference);
        setEntryPointParams(params);
      }
    }, [environmentProvider, entryPoint, setEntryPointReference, isMountedRef]);
    var maybeHiddenOrFastRefresh = useRef(false);
    useEffect(function() {
      return function() {
        maybeHiddenOrFastRefresh.current = true;
      };
    }, []);
    useEffect(function() {
      if (maybeHiddenOrFastRefresh.current === true) {
        maybeHiddenOrFastRefresh.current = false;
        if (entryPointReference.kind !== "NullEntryPointReference" && entryPointParams != null) {
          entryPointLoaderCallback(entryPointParams);
        }
        return;
      }
      var undisposedEntryPointReferences = undisposedEntryPointReferencesRef.current;
      if (isMountedRef.current) {
        var _iterator = (0, _createForOfIteratorHelper2["default"])(undisposedEntryPointReferences), _step;
        try {
          for (_iterator.s();!(_step = _iterator.n()).done; ) {
            var undisposedEntryPointReference = _step.value;
            if (undisposedEntryPointReference === entryPointReference) {
              break;
            }
            undisposedEntryPointReferences["delete"](undisposedEntryPointReference);
            if (undisposedEntryPointReference.kind !== "NullEntryPointReference") {
              undisposedEntryPointReference.dispose();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, [entryPointReference, entryPointParams, entryPointLoaderCallback, isMountedRef]);
    useEffect(function() {
      return function disposeAllRemainingEntryPointReferences() {
        var _iterator2 = (0, _createForOfIteratorHelper2["default"])(undisposedEntryPointReferencesRef.current), _step2;
        try {
          for (_iterator2.s();!(_step2 = _iterator2.n()).done; ) {
            var unhandledStateChange = _step2.value;
            if (unhandledStateChange.kind !== "NullEntryPointReference") {
              unhandledStateChange.dispose();
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      };
    }, []);
    return [entryPointReference.kind === "NullEntryPointReference" ? null : entryPointReference, entryPointLoaderCallback, disposeEntryPoint];
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var loadEntryPoint = require_loadEntryPoint();
  var _require = require_loadQuery();
  var useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
  var useIsMountedRef = require_useIsMountedRef();
  var useCallback = _require2.useCallback;
  var useEffect = _require2.useEffect;
  var useRef = _require2.useRef;
  var useState = _require2.useState;
  var initialNullEntryPointReferenceState = {
    kind: "NullEntryPointReference"
  };
  module.exports = useLoadEntryPoint;
});

// node_modules/react-relay/lib/relay-hooks/useStaticFragmentNodeWarning.js
var require_useStaticFragmentNodeWarning = __commonJS((exports, module) => {
  var useStaticFragmentNodeWarning = function(fragmentNode, warningContext) {
    if (true) {
      var initialPropRef = useUnsafeRef_DEPRECATED(fragmentNode.name);
      warning(initialPropRef.current === fragmentNode.name, "Relay: The %s has to remain the same over the lifetime of a component. Changing it is not supported and will result in unexpected behavior.", warningContext);
    }
  };
  var useUnsafeRef_DEPRECATED = require_useUnsafeRef_DEPRECATED();
  var warning = require_warning();
  module.exports = useStaticFragmentNodeWarning;
});

// node_modules/react-relay/lib/relay-hooks/useFragment.js
var require_useFragment = __commonJS((exports, module) => {
  var _require2 = __toESM(require_react(), 1);
  var useFragment_LEGACY = function(fragment, key) {
    useTrackLoadQueryInRender();
    var fragmentNode = getFragment(fragment);
    useStaticFragmentNodeWarning(fragmentNode, "first argument of useFragment()");
    var _useFragmentNode = useFragmentNode(fragmentNode, key, "useFragment()"), data = _useFragmentNode.data;
    if (true) {
      useDebugValue({
        fragment: fragmentNode.name,
        data
      });
    }
    return data;
  };
  var useFragment = function(fragment, key) {
    var impl = HooksImplementation.get();
    if (impl) {
      return impl.useFragment(fragment, key);
    } else {
      return useFragment_LEGACY(fragment, key);
    }
  };
  var HooksImplementation = require_HooksImplementation();
  var _require = require_loadQuery();
  var useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
  var useFragmentNode = require_useFragmentNode();
  var useStaticFragmentNodeWarning = require_useStaticFragmentNodeWarning();
  var useDebugValue = _require2.useDebugValue;
  var _require3 = require_lib();
  var getFragment = _require3.getFragment;
  module.exports = useFragment;
});

// node_modules/react-relay/lib/relay-hooks/useMutation.js
var require_useMutation = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  var useMutation = function(mutation) {
    var commitMutationFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultCommitMutation;
    var environment = useRelayEnvironment();
    var isMountedRef = useIsMountedRef();
    var environmentRef = useRef(environment);
    var mutationRef = useRef(mutation);
    var inFlightMutationsRef = useRef(new Set);
    var _useState = useState(false), isMutationInFlight = _useState[0], setMutationInFlight = _useState[1];
    var cleanup = useCallback(function(disposable) {
      if (environmentRef.current === environment && mutationRef.current === mutation) {
        inFlightMutationsRef.current["delete"](disposable);
        if (isMountedRef.current) {
          setMutationInFlight(inFlightMutationsRef.current.size > 0);
        }
      }
    }, [environment, isMountedRef, mutation]);
    useEffect(function() {
      if (environmentRef.current !== environment || mutationRef.current !== mutation) {
        inFlightMutationsRef.current = new Set;
        if (isMountedRef.current) {
          setMutationInFlight(false);
        }
        environmentRef.current = environment;
        mutationRef.current = mutation;
      }
    }, [environment, isMountedRef, mutation]);
    var commit = useCallback(function(config) {
      if (isMountedRef.current) {
        setMutationInFlight(true);
      }
      var disposable = commitMutationFn(environment, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, config), {}, {
        mutation,
        onCompleted: function onCompleted(response, errors) {
          var _config$onCompleted;
          cleanup(disposable);
          (_config$onCompleted = config.onCompleted) === null || _config$onCompleted === undefined || _config$onCompleted.call(config, response, errors);
        },
        onError: function onError(error) {
          var _config$onError;
          cleanup(disposable);
          (_config$onError = config.onError) === null || _config$onError === undefined || _config$onError.call(config, error);
        },
        onUnsubscribe: function onUnsubscribe() {
          var _config$onUnsubscribe;
          cleanup(disposable);
          (_config$onUnsubscribe = config.onUnsubscribe) === null || _config$onUnsubscribe === undefined || _config$onUnsubscribe.call(config);
        },
        onNext: function onNext() {
          var _config$onNext;
          (_config$onNext = config.onNext) === null || _config$onNext === undefined || _config$onNext.call(config);
        }
      }));
      inFlightMutationsRef.current.add(disposable);
      return disposable;
    }, [cleanup, commitMutationFn, environment, isMountedRef, mutation]);
    return [commit, isMutationInFlight];
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var useIsMountedRef = require_useIsMountedRef();
  var useRelayEnvironment = require_useRelayEnvironment();
  var _require = require_lib();
  var defaultCommitMutation = _require.commitMutation;
  var useState = React.useState;
  var useEffect = React.useEffect;
  var useRef = React.useRef;
  var useCallback = React.useCallback;
  module.exports = useMutation;
});

// node_modules/react-relay/lib/relay-hooks/useIsOperationNodeActive.js
var require_useIsOperationNodeActive = __commonJS((exports, module) => {
  var React = __toESM(require_react(), 1);
  var useIsOperationNodeActive = function(fragmentNode, fragmentRef) {
    var environment = useRelayEnvironment();
    var observable = useMemo(function() {
      var selector = getSelector(fragmentNode, fragmentRef);
      if (selector == null) {
        return null;
      }
      !(selector.kind === "SingularReaderSelector") && invariant(false, "useIsOperationNodeActive: Plural fragments are not supported.");
      return getObservableForActiveRequest(environment, selector.owner);
    }, [environment, fragmentNode, fragmentRef]);
    var _useState = useState(observable != null), isActive = _useState[0], setIsActive = _useState[1];
    useEffect(function() {
      var subscription;
      setIsActive(observable != null);
      if (observable != null) {
        var onCompleteOrError = function onCompleteOrError() {
          setIsActive(false);
        };
        subscription = observable.subscribe({
          complete: onCompleteOrError,
          error: onCompleteOrError
        });
      }
      return function() {
        if (subscription) {
          subscription.unsubscribe();
        }
      };
    }, [observable]);
    return isActive;
  };
  var useRelayEnvironment = require_useRelayEnvironment();
  var invariant = require_browser();
  var _require = require_lib();
  var getObservableForActiveRequest = _require.__internal.getObservableForActiveRequest;
  var getSelector = _require.getSelector;
  var useEffect = React.useEffect;
  var useState = React.useState;
  var useMemo = React.useMemo;
  module.exports = useIsOperationNodeActive;
});

// node_modules/react-relay/lib/relay-hooks/useLoadMoreFunction.js
var require_useLoadMoreFunction = __commonJS((exports, module) => {
  var _require = __toESM(require_react(), 1);
  var useLoadMoreFunction = function(args) {
    var { direction, fragmentNode, fragmentRef, fragmentIdentifier, fragmentData, connectionPathInFragmentData, paginationRequest, paginationMetadata, componentDisplayName, observer, onReset } = args;
    var environment = useRelayEnvironment();
    var _useFetchTrackingRef = useFetchTrackingRef(), isFetchingRef = _useFetchTrackingRef.isFetchingRef, startFetch = _useFetchTrackingRef.startFetch, disposeFetch = _useFetchTrackingRef.disposeFetch, completeFetch = _useFetchTrackingRef.completeFetch;
    var _getRefetchMetadata = getRefetchMetadata(fragmentNode, componentDisplayName), identifierInfo = _getRefetchMetadata.identifierInfo;
    var identifierValue = (identifierInfo === null || identifierInfo === undefined ? undefined : identifierInfo.identifierField) != null && fragmentData != null && typeof fragmentData === "object" ? fragmentData[identifierInfo.identifierField] : null;
    var isMountedRef = useIsMountedRef();
    var _useState = useState(environment), mirroredEnvironment = _useState[0], setMirroredEnvironment = _useState[1];
    var _useState2 = useState(fragmentIdentifier), mirroredFragmentIdentifier = _useState2[0], setMirroredFragmentIdentifier = _useState2[1];
    var isParentQueryActive = useIsOperationNodeActive(fragmentNode, fragmentRef);
    var shouldReset = environment !== mirroredEnvironment || fragmentIdentifier !== mirroredFragmentIdentifier;
    if (shouldReset) {
      disposeFetch();
      onReset();
      setMirroredEnvironment(environment);
      setMirroredFragmentIdentifier(fragmentIdentifier);
    }
    var _getConnectionState = getConnectionState(direction, fragmentNode, fragmentData, connectionPathInFragmentData), cursor = _getConnectionState.cursor, hasMore = _getConnectionState.hasMore;
    useEffect(function() {
      return function() {
        disposeFetch();
      };
    }, [disposeFetch]);
    var loadMore = useCallback(function(count, options) {
      var onComplete = options === null || options === undefined ? undefined : options.onComplete;
      if (isMountedRef.current !== true) {
        warning(false, "Relay: Unexpected fetch on unmounted component for fragment `%s` in `%s`. It looks like some instances of your component are still trying to fetch data but they already unmounted. Please make sure you clear all timers, intervals, async calls, etc that may trigger a fetch.", fragmentNode.name, componentDisplayName);
        return {
          dispose: function dispose() {
          }
        };
      }
      var fragmentSelector = getSelector(fragmentNode, fragmentRef);
      if (isFetchingRef.current === true || fragmentData == null || isParentQueryActive) {
        if (fragmentSelector == null) {
          warning(false, "Relay: Unexpected fetch while using a null fragment ref for fragment `%s` in `%s`. When fetching more items, we expect initial fragment data to be non-null. Please make sure you're passing a valid fragment ref to `%s` before paginating.", fragmentNode.name, componentDisplayName, componentDisplayName);
        }
        if (onComplete) {
          onComplete(null);
        }
        return {
          dispose: function dispose() {
          }
        };
      }
      !(fragmentSelector != null && fragmentSelector.kind !== "PluralReaderSelector") && invariant(false, "Relay: Expected to be able to find a non-plural fragment owner for fragment `%s` when using `%s`. If you're seeing this, this is likely a bug in Relay.", fragmentNode.name, componentDisplayName);
      var parentVariables = fragmentSelector.owner.variables;
      var fragmentVariables = fragmentSelector.variables;
      var extraVariables = options === null || options === undefined ? undefined : options.UNSTABLE_extraVariables;
      var baseVariables = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, parentVariables), fragmentVariables);
      var paginationVariables = getPaginationVariables(direction, count, cursor, baseVariables, (0, _objectSpread2["default"])({}, extraVariables), paginationMetadata);
      if (identifierInfo != null) {
        if (typeof identifierValue !== "string") {
          warning(false, "Relay: Expected result to have a string  `%s` in order to refetch, got `%s`.", identifierInfo.identifierField, identifierValue);
        }
        paginationVariables[identifierInfo.identifierQueryVariableName] = identifierValue;
      }
      var paginationQuery = createOperationDescriptor(paginationRequest, paginationVariables, {
        force: true
      });
      fetchQuery(environment, paginationQuery).subscribe((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, observer), {}, {
        start: function start(subscription) {
          startFetch(subscription);
          observer.start && observer.start(subscription);
        },
        complete: function complete() {
          completeFetch();
          observer.complete && observer.complete();
          onComplete && onComplete(null);
        },
        error: function error(_error) {
          completeFetch();
          observer.error && observer.error(_error);
          onComplete && onComplete(_error);
        }
      }));
      return {
        dispose: disposeFetch
      };
    }, [environment, identifierValue, direction, cursor, startFetch, disposeFetch, completeFetch, isFetchingRef, isParentQueryActive, fragmentData, fragmentNode.name, fragmentRef, componentDisplayName]);
    return [loadMore, hasMore, disposeFetch];
  };
  var getConnectionState = function(direction, fragmentNode, fragmentData, connectionPathInFragmentData) {
    var _pageInfo$END_CURSOR, _pageInfo$START_CURSO;
    var _ConnectionInterface$ = ConnectionInterface.get(), EDGES = _ConnectionInterface$.EDGES, PAGE_INFO = _ConnectionInterface$.PAGE_INFO, HAS_NEXT_PAGE = _ConnectionInterface$.HAS_NEXT_PAGE, HAS_PREV_PAGE = _ConnectionInterface$.HAS_PREV_PAGE, END_CURSOR = _ConnectionInterface$.END_CURSOR, START_CURSOR = _ConnectionInterface$.START_CURSOR;
    var connection = getValueAtPath(fragmentData, connectionPathInFragmentData);
    if (connection == null) {
      return {
        cursor: null,
        hasMore: false
      };
    }
    !(typeof connection === "object") && invariant(false, "Relay: Expected connection in fragment `%s` to have been `null`, or a plain object with %s and %s properties. Instead got `%s`.", fragmentNode.name, EDGES, PAGE_INFO, connection);
    var edges = connection[EDGES];
    var pageInfo = connection[PAGE_INFO];
    if (edges == null || pageInfo == null) {
      return {
        cursor: null,
        hasMore: false
      };
    }
    !Array.isArray(edges) && invariant(false, "Relay: Expected connection in fragment `%s` to have a plural `%s` field. Instead got `%s`.", fragmentNode.name, EDGES, edges);
    !(typeof pageInfo === "object") && invariant(false, "Relay: Expected connection in fragment `%s` to have a `%s` field. Instead got `%s`.", fragmentNode.name, PAGE_INFO, pageInfo);
    var cursor = direction === "forward" ? (_pageInfo$END_CURSOR = pageInfo[END_CURSOR]) !== null && _pageInfo$END_CURSOR !== undefined ? _pageInfo$END_CURSOR : null : (_pageInfo$START_CURSO = pageInfo[START_CURSOR]) !== null && _pageInfo$START_CURSO !== undefined ? _pageInfo$START_CURSO : null;
    !(cursor === null || typeof cursor === "string") && invariant(false, "Relay: Expected page info for connection in fragment `%s` to have a valid `%s`. Instead got `%s`.", fragmentNode.name, START_CURSOR, cursor);
    var hasMore;
    if (direction === "forward") {
      hasMore = cursor != null && pageInfo[HAS_NEXT_PAGE] === true;
    } else {
      hasMore = cursor != null && pageInfo[HAS_PREV_PAGE] === true;
    }
    return {
      cursor,
      hasMore
    };
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var useFetchTrackingRef = require_useFetchTrackingRef();
  var useIsMountedRef = require_useIsMountedRef();
  var useIsOperationNodeActive = require_useIsOperationNodeActive();
  var useRelayEnvironment = require_useRelayEnvironment();
  var invariant = require_browser();
  var useCallback = _require.useCallback;
  var useEffect = _require.useEffect;
  var useState = _require.useState;
  var _require2 = require_lib();
  var fetchQuery = _require2.__internal.fetchQuery;
  var ConnectionInterface = _require2.ConnectionInterface;
  var createOperationDescriptor = _require2.createOperationDescriptor;
  var getPaginationVariables = _require2.getPaginationVariables;
  var getRefetchMetadata = _require2.getRefetchMetadata;
  var getSelector = _require2.getSelector;
  var getValueAtPath = _require2.getValueAtPath;
  var warning = require_warning();
  module.exports = useLoadMoreFunction;
});

// node_modules/react-relay/lib/relay-hooks/useQueryLoader.js
var require_useQueryLoader = __commonJS((exports, module) => {
  var _require2 = __toESM(require_react(), 1);
  var requestIsLiveQuery = function(preloadableRequest) {
    if (preloadableRequest.kind === "PreloadableConcreteRequest") {
      return preloadableRequest.params.metadata.live !== undefined;
    }
    var request = getRequest(preloadableRequest);
    return request.params.metadata.live !== undefined;
  };
  var useQueryLoader = function(preloadableRequest, initialQueryReference) {
    var initialQueryReferenceInternal = initialQueryReference !== null && initialQueryReference !== undefined ? initialQueryReference : initialNullQueryReferenceState;
    var environment = useRelayEnvironment();
    useTrackLoadQueryInRender();
    var isMountedRef = useIsMountedRef();
    var undisposedQueryReferencesRef = useRef(new Set([initialQueryReferenceInternal]));
    var _useState = useState(function() {
      return initialQueryReferenceInternal;
    }), queryReference = _useState[0], setQueryReference = _useState[1];
    var _useState2 = useState(function() {
      return initialQueryReferenceInternal;
    }), previousInitialQueryReference = _useState2[0], setPreviousInitialQueryReference = _useState2[1];
    if (initialQueryReferenceInternal !== previousInitialQueryReference) {
      undisposedQueryReferencesRef.current.add(initialQueryReferenceInternal);
      setPreviousInitialQueryReference(initialQueryReferenceInternal);
      setQueryReference(initialQueryReferenceInternal);
    }
    var disposeQuery = useCallback(function() {
      if (isMountedRef.current) {
        undisposedQueryReferencesRef.current.add(initialNullQueryReferenceState);
        setQueryReference(initialNullQueryReferenceState);
      }
    }, [isMountedRef]);
    var queryLoaderCallback = useCallback(function(variables, options) {
      var mergedOptions = options != null && options.hasOwnProperty("__environment") ? {
        fetchPolicy: options.fetchPolicy,
        networkCacheConfig: options.networkCacheConfig,
        __nameForWarning: options.__nameForWarning
      } : options;
      if (isMountedRef.current) {
        var _options$__environmen;
        var updatedQueryReference = loadQuery((_options$__environmen = options === null || options === undefined ? undefined : options.__environment) !== null && _options$__environmen !== undefined ? _options$__environmen : environment, preloadableRequest, variables, mergedOptions);
        undisposedQueryReferencesRef.current.add(updatedQueryReference);
        setQueryReference(updatedQueryReference);
      }
    }, [environment, preloadableRequest, setQueryReference, isMountedRef]);
    var maybeHiddenOrFastRefresh = useRef(false);
    useEffect(function() {
      return function() {
        maybeHiddenOrFastRefresh.current = true;
      };
    }, []);
    useEffect(function() {
      if (maybeHiddenOrFastRefresh.current === true) {
        maybeHiddenOrFastRefresh.current = false;
        if (queryReference.kind !== "NullQueryReference") {
          queryLoaderCallback(queryReference.variables, {
            fetchPolicy: queryReference.fetchPolicy,
            networkCacheConfig: queryReference.networkCacheConfig
          });
        }
        return;
      }
      var undisposedQueryReferences = undisposedQueryReferencesRef.current;
      if (isMountedRef.current) {
        var _iterator = (0, _createForOfIteratorHelper2["default"])(undisposedQueryReferences), _step;
        try {
          for (_iterator.s();!(_step = _iterator.n()).done; ) {
            var undisposedQueryReference = _step.value;
            if (undisposedQueryReference === queryReference) {
              break;
            }
            undisposedQueryReferences["delete"](undisposedQueryReference);
            if (undisposedQueryReference.kind !== "NullQueryReference") {
              if (requestIsLiveQuery(preloadableRequest)) {
                undisposedQueryReference.dispose && undisposedQueryReference.dispose();
              } else {
                undisposedQueryReference.releaseQuery && undisposedQueryReference.releaseQuery();
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, [queryReference, isMountedRef, queryLoaderCallback, preloadableRequest]);
    useEffect(function() {
      return function disposeAllRemainingQueryReferences() {
        var _iterator2 = (0, _createForOfIteratorHelper2["default"])(undisposedQueryReferencesRef.current), _step2;
        try {
          for (_iterator2.s();!(_step2 = _iterator2.n()).done; ) {
            var undisposedQueryReference = _step2.value;
            if (undisposedQueryReference.kind !== "NullQueryReference") {
              if (requestIsLiveQuery(preloadableRequest)) {
                undisposedQueryReference.dispose && undisposedQueryReference.dispose();
              } else {
                undisposedQueryReference.releaseQuery && undisposedQueryReference.releaseQuery();
              }
            }
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      };
    }, [preloadableRequest]);
    return [queryReference.kind === "NullQueryReference" ? null : queryReference, queryLoaderCallback, disposeQuery];
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _createForOfIteratorHelper2 = _interopRequireDefault(require_createForOfIteratorHelper());
  var _require = require_loadQuery();
  var loadQuery = _require.loadQuery;
  var useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
  var useIsMountedRef = require_useIsMountedRef();
  var useRelayEnvironment = require_useRelayEnvironment();
  var useCallback = _require2.useCallback;
  var useEffect = _require2.useEffect;
  var useRef = _require2.useRef;
  var useState = _require2.useState;
  var _require3 = require_lib();
  var getRequest = _require3.getRequest;
  var initialNullQueryReferenceState = {
    kind: "NullQueryReference"
  };
  module.exports = useQueryLoader;
});

// node_modules/react-relay/lib/relay-hooks/useRefetchableFragmentNode.js
var require_useRefetchableFragmentNode = __commonJS((exports, module) => {
  var _require3 = __toESM(require_react(), 1);
  var reducer = function(state, action) {
    switch (action.type) {
      case "refetch": {
        var _action$refetchEnviro;
        return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, state), {}, {
          fetchPolicy: action.fetchPolicy,
          mirroredEnvironment: (_action$refetchEnviro = action.refetchEnvironment) !== null && _action$refetchEnviro !== undefined ? _action$refetchEnviro : state.mirroredEnvironment,
          onComplete: action.onComplete,
          refetchEnvironment: action.refetchEnvironment,
          refetchQuery: action.refetchQuery,
          renderPolicy: action.renderPolicy
        });
      }
      case "reset": {
        return {
          fetchPolicy: undefined,
          mirroredEnvironment: action.environment,
          mirroredFragmentIdentifier: action.fragmentIdentifier,
          onComplete: undefined,
          refetchQuery: null,
          renderPolicy: undefined
        };
      }
      default: {
        action.type;
        throw new Error("useRefetchableFragmentNode: Unexpected action type");
      }
    }
  };
  var useRefetchableFragmentNode = function(fragmentNode, parentFragmentRef, componentDisplayName) {
    var parentEnvironment = useRelayEnvironment();
    var _getRefetchMetadata = getRefetchMetadata(fragmentNode, componentDisplayName), refetchableRequest = _getRefetchMetadata.refetchableRequest, fragmentRefPathInResponse = _getRefetchMetadata.fragmentRefPathInResponse;
    var fragmentIdentifier = getFragmentIdentifier(fragmentNode, parentFragmentRef);
    var _useReducer = useReducer(reducer, {
      fetchPolicy: undefined,
      mirroredEnvironment: parentEnvironment,
      mirroredFragmentIdentifier: fragmentIdentifier,
      onComplete: undefined,
      refetchEnvironment: null,
      refetchQuery: null,
      renderPolicy: undefined
    }), refetchState = _useReducer[0], dispatch = _useReducer[1];
    var { fetchPolicy, mirroredEnvironment, mirroredFragmentIdentifier, onComplete, refetchEnvironment, refetchQuery, renderPolicy } = refetchState;
    var environment = refetchEnvironment !== null && refetchEnvironment !== undefined ? refetchEnvironment : parentEnvironment;
    var QueryResource = getQueryResourceForEnvironment(environment);
    var FragmentResource = getFragmentResourceForEnvironment(environment);
    var profilerContext = useContext(ProfilerContext);
    var shouldReset = environment !== mirroredEnvironment || fragmentIdentifier !== mirroredFragmentIdentifier;
    var _useQueryLoader = useQueryLoader(refetchableRequest), queryRef = _useQueryLoader[0], loadQuery = _useQueryLoader[1], disposeQuery = _useQueryLoader[2];
    var fragmentRef = parentFragmentRef;
    var _getRefetchMetadata2 = getRefetchMetadata(fragmentNode, componentDisplayName), identifierInfo = _getRefetchMetadata2.identifierInfo;
    if (shouldReset) {
      dispatch({
        type: "reset",
        environment,
        fragmentIdentifier
      });
      disposeQuery();
    } else if (refetchQuery != null && queryRef != null) {
      var debugPreviousIDAndTypename;
      if (true) {
        debugPreviousIDAndTypename = debugFunctions.getInitialIDAndType(refetchQuery.request.variables, fragmentRefPathInResponse, identifierInfo === null || identifierInfo === undefined ? undefined : identifierInfo.identifierQueryVariableName, environment);
      }
      var handleQueryCompleted = function handleQueryCompleted(maybeError) {
        onComplete && onComplete(maybeError !== null && maybeError !== undefined ? maybeError : null);
      };
      var fetchObservable = queryRef.source != null ? queryRef.source : fetchQuery(environment, refetchQuery);
      var queryResult = profilerContext.wrapPrepareQueryResource(function() {
        return QueryResource.prepare(refetchQuery, fetchObservable, fetchPolicy, renderPolicy, {
          error: handleQueryCompleted,
          complete: function complete() {
            if (true) {
              debugFunctions.checkSameTypeAfterRefetch(debugPreviousIDAndTypename, environment, fragmentNode, componentDisplayName);
            }
            handleQueryCompleted();
          }
        }, queryRef.fetchKey, profilerContext);
      });
      var queryData = FragmentResource.read(queryResult.fragmentNode, queryResult.fragmentRef, componentDisplayName).data;
      !(queryData != null) && invariant(false, "Relay: Expected to be able to read refetch query response. If you're seeing this, this is likely a bug in Relay.");
      var refetchedFragmentRef = getValueAtPath(queryData, fragmentRefPathInResponse);
      fragmentRef = refetchedFragmentRef;
      if (true) {
        debugFunctions.checkSameIDAfterRefetch(debugPreviousIDAndTypename, fragmentRef, fragmentNode, componentDisplayName);
      }
    }
    var _useFragmentNode = useFragmentNode(fragmentNode, fragmentRef, componentDisplayName), fragmentData = _useFragmentNode.data, disableStoreUpdates = _useFragmentNode.disableStoreUpdates, enableStoreUpdates = _useFragmentNode.enableStoreUpdates;
    var refetch = useRefetchFunction(componentDisplayName, dispatch, disposeQuery, fragmentData, fragmentIdentifier, fragmentNode, fragmentRefPathInResponse, identifierInfo, loadQuery, parentFragmentRef, refetchableRequest);
    return {
      fragmentData,
      fragmentRef,
      refetch,
      disableStoreUpdates,
      enableStoreUpdates
    };
  };
  var useRefetchFunction = function(componentDisplayName, dispatch, disposeQuery, fragmentData, fragmentIdentifier, fragmentNode, fragmentRefPathInResponse, identifierInfo, loadQuery, parentFragmentRef, refetchableRequest) {
    var isMountedRef = useIsMountedRef();
    var identifierValue = (identifierInfo === null || identifierInfo === undefined ? undefined : identifierInfo.identifierField) != null && fragmentData != null && typeof fragmentData === "object" ? fragmentData[identifierInfo.identifierField] : null;
    return useCallback(function(providedRefetchVariables, options) {
      if (isMountedRef.current !== true) {
        warning(false, "Relay: Unexpected call to `refetch` on unmounted component for fragment `%s` in `%s`. It looks like some instances of your component are still trying to fetch data but they already unmounted. Please make sure you clear all timers, intervals, async calls, etc that may trigger a fetch.", fragmentNode.name, componentDisplayName);
        return {
          dispose: function dispose() {
          }
        };
      }
      if (parentFragmentRef == null) {
        warning(false, "Relay: Unexpected call to `refetch` while using a null fragment ref for fragment `%s` in `%s`. When calling `refetch`, we expect initial fragment data to be non-null. Please make sure you're passing a valid fragment ref to `%s` before calling `refetch`, or make sure you pass all required variables to `refetch`.", fragmentNode.name, componentDisplayName, componentDisplayName);
      }
      var refetchEnvironment = options === null || options === undefined ? undefined : options.__environment;
      var fetchPolicy = options === null || options === undefined ? undefined : options.fetchPolicy;
      var renderPolicy = options === null || options === undefined ? undefined : options.UNSTABLE_renderPolicy;
      var onComplete = options === null || options === undefined ? undefined : options.onComplete;
      var fragmentSelector = getSelector(fragmentNode, parentFragmentRef);
      var parentVariables;
      var fragmentVariables;
      if (fragmentSelector == null) {
        parentVariables = {};
        fragmentVariables = {};
      } else if (fragmentSelector.kind === "PluralReaderSelector") {
        var _fragmentSelector$sel, _fragmentSelector$sel2, _fragmentSelector$sel3, _fragmentSelector$sel4;
        parentVariables = (_fragmentSelector$sel = (_fragmentSelector$sel2 = fragmentSelector.selectors[0]) === null || _fragmentSelector$sel2 === undefined ? undefined : _fragmentSelector$sel2.owner.variables) !== null && _fragmentSelector$sel !== undefined ? _fragmentSelector$sel : {};
        fragmentVariables = (_fragmentSelector$sel3 = (_fragmentSelector$sel4 = fragmentSelector.selectors[0]) === null || _fragmentSelector$sel4 === undefined ? undefined : _fragmentSelector$sel4.variables) !== null && _fragmentSelector$sel3 !== undefined ? _fragmentSelector$sel3 : {};
      } else {
        parentVariables = fragmentSelector.owner.variables;
        fragmentVariables = fragmentSelector.variables;
      }
      var refetchVariables = (0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, parentVariables), fragmentVariables), providedRefetchVariables);
      if (identifierInfo != null && !providedRefetchVariables.hasOwnProperty(identifierInfo.identifierQueryVariableName)) {
        if (typeof identifierValue !== "string") {
          warning(false, "Relay: Expected result to have a string  `%s` in order to refetch, got `%s`.", identifierInfo.identifierField, identifierValue);
        }
        refetchVariables[identifierInfo.identifierQueryVariableName] = identifierValue;
      }
      var refetchQuery = createOperationDescriptor(refetchableRequest, refetchVariables, {
        force: true
      });
      loadQuery(refetchQuery.request.variables, {
        fetchPolicy,
        __environment: refetchEnvironment,
        __nameForWarning: "refetch"
      });
      dispatch({
        type: "refetch",
        fetchPolicy,
        onComplete,
        refetchEnvironment,
        refetchQuery,
        renderPolicy
      });
      return {
        dispose: disposeQuery
      };
    }, [fragmentIdentifier, dispatch, disposeQuery, identifierValue, loadQuery]);
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var _require = require_FragmentResource();
  var getFragmentResourceForEnvironment = _require.getFragmentResourceForEnvironment;
  var ProfilerContext = require_ProfilerContext();
  var _require2 = require_QueryResource();
  var getQueryResourceForEnvironment = _require2.getQueryResourceForEnvironment;
  var useFragmentNode = require_useFragmentNode();
  var useIsMountedRef = require_useIsMountedRef();
  var useQueryLoader = require_useQueryLoader();
  var useRelayEnvironment = require_useRelayEnvironment();
  var invariant = require_browser();
  var useCallback = _require3.useCallback;
  var useContext = _require3.useContext;
  var useReducer = _require3.useReducer;
  var _require4 = require_lib();
  var fetchQuery = _require4.__internal.fetchQuery;
  var createOperationDescriptor = _require4.createOperationDescriptor;
  var getFragmentIdentifier = _require4.getFragmentIdentifier;
  var getRefetchMetadata = _require4.getRefetchMetadata;
  var getSelector = _require4.getSelector;
  var getValueAtPath = _require4.getValueAtPath;
  var warning = require_warning();
  var debugFunctions;
  if (true) {
    debugFunctions = {
      getInitialIDAndType: function getInitialIDAndType(memoRefetchVariables, fragmentRefPathInResponse, identifierQueryVariableName, environment) {
        var _require5 = require_lib(), Record = _require5.Record;
        var id = memoRefetchVariables === null || memoRefetchVariables === undefined ? undefined : memoRefetchVariables[identifierQueryVariableName !== null && identifierQueryVariableName !== undefined ? identifierQueryVariableName : "id"];
        if (fragmentRefPathInResponse.length !== 1 || fragmentRefPathInResponse[0] !== "node" || id == null) {
          return null;
        }
        var recordSource = environment.getStore().getSource();
        var record = recordSource.get(id);
        var typename = record == null ? null : Record.getType(record);
        if (typename == null) {
          return null;
        }
        return {
          id,
          typename
        };
      },
      checkSameTypeAfterRefetch: function checkSameTypeAfterRefetch(previousIDAndType, environment, fragmentNode, componentDisplayName) {
        var _require6 = require_lib(), Record = _require6.Record;
        if (!previousIDAndType) {
          return;
        }
        var recordSource = environment.getStore().getSource();
        var record = recordSource.get(previousIDAndType.id);
        var typename = record && Record.getType(record);
        if (typename !== previousIDAndType.typename) {
          warning(false, "Relay: Call to `refetch` returned data with a different __typename: was `%s`, now `%s`, on `%s` in `%s`. Please make sure the server correctly implementsunique id requirement.", previousIDAndType.typename, typename, fragmentNode.name, componentDisplayName);
        }
      },
      checkSameIDAfterRefetch: function checkSameIDAfterRefetch(previousIDAndTypename, refetchedFragmentRef, fragmentNode, componentDisplayName) {
        if (previousIDAndTypename == null) {
          return;
        }
        var _require7 = require_lib(), ID_KEY = _require7.ID_KEY;
        var resultID = refetchedFragmentRef[ID_KEY];
        if (resultID != null && resultID !== previousIDAndTypename.id) {
          warning(false, "Relay: Call to `refetch` returned a different id, expected `%s`, got `%s`, on `%s` in `%s`. Please make sure the server correctly implements unique id requirement.", resultID, previousIDAndTypename.id, fragmentNode.name, componentDisplayName);
        }
      }
    };
  }
  module.exports = useRefetchableFragmentNode;
});

// node_modules/react-relay/lib/relay-hooks/usePaginationFragment.js
var require_usePaginationFragment = __commonJS((exports, module) => {
  var _require = __toESM(require_react(), 1);
  var usePaginationFragment_LEGACY = function(fragmentInput, parentFragmentRef) {
    var fragmentNode = getFragment(fragmentInput);
    useStaticFragmentNodeWarning(fragmentNode, "first argument of usePaginationFragment()");
    var componentDisplayName = "usePaginationFragment()";
    var _getPaginationMetadat = getPaginationMetadata(fragmentNode, componentDisplayName), connectionPathInFragmentData = _getPaginationMetadat.connectionPathInFragmentData, paginationRequest = _getPaginationMetadat.paginationRequest, paginationMetadata = _getPaginationMetadat.paginationMetadata;
    var _useRefetchableFragme = useRefetchableFragmentNode(fragmentNode, parentFragmentRef, componentDisplayName), fragmentData = _useRefetchableFragme.fragmentData, fragmentRef = _useRefetchableFragme.fragmentRef, refetch = _useRefetchableFragme.refetch;
    var fragmentIdentifier = getFragmentIdentifier(fragmentNode, fragmentRef);
    var _useLoadMore = useLoadMore({
      componentDisplayName,
      connectionPathInFragmentData,
      direction: "backward",
      fragmentData,
      fragmentIdentifier,
      fragmentNode,
      fragmentRef,
      paginationMetadata,
      paginationRequest
    }), loadPrevious = _useLoadMore[0], hasPrevious = _useLoadMore[1], isLoadingPrevious = _useLoadMore[2], disposeFetchPrevious = _useLoadMore[3];
    var _useLoadMore2 = useLoadMore({
      componentDisplayName,
      connectionPathInFragmentData,
      direction: "forward",
      fragmentData,
      fragmentIdentifier,
      fragmentNode,
      fragmentRef,
      paginationMetadata,
      paginationRequest
    }), loadNext = _useLoadMore2[0], hasNext = _useLoadMore2[1], isLoadingNext = _useLoadMore2[2], disposeFetchNext = _useLoadMore2[3];
    var refetchPagination = useCallback(function(variables, options) {
      disposeFetchNext();
      disposeFetchPrevious();
      return refetch(variables, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, options), {}, {
        __environment: undefined
      }));
    }, [disposeFetchNext, disposeFetchPrevious, refetch]);
    if (true) {
      useDebugValue({
        fragment: fragmentNode.name,
        data: fragmentData,
        hasNext,
        isLoadingNext,
        hasPrevious,
        isLoadingPrevious
      });
    }
    return {
      data: fragmentData,
      loadNext,
      loadPrevious,
      hasNext,
      hasPrevious,
      isLoadingNext,
      isLoadingPrevious,
      refetch: refetchPagination
    };
  };
  var useLoadMore = function(args) {
    var _useState = useState(false), isLoadingMore = _useState[0], setIsLoadingMore = _useState[1];
    var observer = {
      start: function start() {
        return setIsLoadingMore(true);
      },
      complete: function complete() {
        return setIsLoadingMore(false);
      },
      error: function error() {
        return setIsLoadingMore(false);
      }
    };
    var handleReset = function handleReset() {
      return setIsLoadingMore(false);
    };
    var _useLoadMoreFunction = useLoadMoreFunction((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, args), {}, {
      observer,
      onReset: handleReset
    })), loadMore = _useLoadMoreFunction[0], hasMore = _useLoadMoreFunction[1], disposeFetch = _useLoadMoreFunction[2];
    return [loadMore, hasMore, isLoadingMore, disposeFetch];
  };
  var usePaginationFragment = function(fragmentInput, parentFragmentRef) {
    var impl = HooksImplementation.get();
    if (impl) {
      return impl.usePaginationFragment(fragmentInput, parentFragmentRef);
    } else {
      return usePaginationFragment_LEGACY(fragmentInput, parentFragmentRef);
    }
  };
  var _interopRequireDefault = require_interopRequireDefault()["default"];
  var _objectSpread2 = _interopRequireDefault(require_objectSpread2());
  var HooksImplementation = require_HooksImplementation();
  var useLoadMoreFunction = require_useLoadMoreFunction();
  var useRefetchableFragmentNode = require_useRefetchableFragmentNode();
  var useStaticFragmentNodeWarning = require_useStaticFragmentNodeWarning();
  var useCallback = _require.useCallback;
  var useDebugValue = _require.useDebugValue;
  var useState = _require.useState;
  var _require2 = require_lib();
  var getFragment = _require2.getFragment;
  var getFragmentIdentifier = _require2.getFragmentIdentifier;
  var getPaginationMetadata = _require2.getPaginationMetadata;
  module.exports = usePaginationFragment;
});

// node_modules/react-relay/lib/relay-hooks/usePreloadedQuery.js
var require_usePreloadedQuery = __commonJS((exports, module) => {
  var _require2 = __toESM(require_react(), 1);
  var usePreloadedQuery = function(gqlQuery, preloadedQuery, options) {
    useTrackLoadQueryInRender();
    var environment = useRelayEnvironment();
    var { fetchKey, fetchPolicy, source, variables, networkCacheConfig } = preloadedQuery;
    var operation = useMemoOperationDescriptor(gqlQuery, variables, networkCacheConfig);
    var useLazyLoadQueryNodeParams;
    if (preloadedQuery.kind === "PreloadedQuery_DEPRECATED") {
      !(operation.request.node.params.name === preloadedQuery.name) && invariant(false, "usePreloadedQuery(): Expected data to be prefetched for query `%s`, got prefetch results for query `%s`.", operation.request.node.params.name, preloadedQuery.name);
      useLazyLoadQueryNodeParams = {
        componentDisplayName: "usePreloadedQuery()",
        fetchKey,
        fetchObservable: fetchQueryDeduped(environment, operation.request.identifier, function() {
          if (environment === preloadedQuery.environment && source != null) {
            return environment.executeWithSource({
              operation,
              source
            });
          } else {
            return environment.execute({
              operation
            });
          }
        }),
        fetchPolicy,
        query: operation,
        renderPolicy: options === null || options === undefined ? undefined : options.UNSTABLE_renderPolicy
      };
    } else {
      warning(preloadedQuery.isDisposed === false, "usePreloadedQuery(): Expected preloadedQuery to not be disposed yet. This is because disposing the query marks it for future garbage collection, and as such query results may no longer be present in the Relay store. In the future, this will become a hard error.");
      var fallbackFetchObservable = fetchQuery(environment, operation);
      var fetchObservable;
      if (source != null && environment === preloadedQuery.environment) {
        fetchObservable = source.ifEmpty(fallbackFetchObservable);
      } else if (environment !== preloadedQuery.environment) {
        warning(false, "usePreloadedQuery(): usePreloadedQuery was passed a preloaded query that was created with a different environment than the one that is currently in context. In the future, this will become a hard error.");
        fetchObservable = fallbackFetchObservable;
      } else {
        fetchObservable = fallbackFetchObservable;
      }
      useLazyLoadQueryNodeParams = {
        componentDisplayName: "usePreloadedQuery()",
        fetchObservable,
        fetchKey,
        fetchPolicy,
        query: operation,
        renderPolicy: options === null || options === undefined ? undefined : options.UNSTABLE_renderPolicy
      };
    }
    var data = useLazyLoadQueryNode(useLazyLoadQueryNodeParams);
    if (true) {
      useDebugValue({
        query: preloadedQuery.name,
        variables: preloadedQuery.variables,
        data,
        fetchKey,
        fetchPolicy,
        renderPolicy: options === null || options === undefined ? undefined : options.UNSTABLE_renderPolicy
      });
    }
    return data;
  };
  var _require = require_loadQuery();
  var useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;
  var useLazyLoadQueryNode = require_useLazyLoadQueryNode();
  var useMemoOperationDescriptor = require_useMemoOperationDescriptor();
  var useRelayEnvironment = require_useRelayEnvironment();
  var invariant = require_browser();
  var useDebugValue = _require2.useDebugValue;
  var _require3 = require_lib();
  var _require3$__internal = _require3.__internal;
  var fetchQueryDeduped = _require3$__internal.fetchQueryDeduped;
  var fetchQuery = _require3$__internal.fetchQuery;
  var warning = require_warning();
  module.exports = usePreloadedQuery;
});

// node_modules/react-relay/lib/relay-hooks/useRefetchableFragment.js
var require_useRefetchableFragment = __commonJS((exports, module) => {
  var _require = __toESM(require_react(), 1);
  var useRefetchableFragment_LEGACY = function(fragmentInput, fragmentRef) {
    var fragmentNode = getFragment(fragmentInput);
    useStaticFragmentNodeWarning(fragmentNode, "first argument of useRefetchableFragment()");
    var _useRefetchableFragme = useRefetchableFragmentNode(fragmentNode, fragmentRef, "useRefetchableFragment()"), fragmentData = _useRefetchableFragme.fragmentData, refetch = _useRefetchableFragme.refetch;
    if (true) {
      useDebugValue({
        fragment: fragmentNode.name,
        data: fragmentData
      });
    }
    return [fragmentData, refetch];
  };
  var useRefetchableFragment = function(fragmentInput, parentFragmentRef) {
    var impl = HooksImplementation.get();
    if (impl) {
      return impl.useRefetchableFragment(fragmentInput, parentFragmentRef);
    } else {
      return useRefetchableFragment_LEGACY(fragmentInput, parentFragmentRef);
    }
  };
  var HooksImplementation = require_HooksImplementation();
  var useRefetchableFragmentNode = require_useRefetchableFragmentNode();
  var useStaticFragmentNodeWarning = require_useStaticFragmentNodeWarning();
  var useDebugValue = _require.useDebugValue;
  var _require2 = require_lib();
  var getFragment = _require2.getFragment;
  module.exports = useRefetchableFragment;
});

// node_modules/react-relay/lib/relay-hooks/useSubscribeToInvalidationState.js
var require_useSubscribeToInvalidationState = __commonJS((exports, module) => {
  var _require = __toESM(require_react(), 1);
  var useSubscribeToInvalidationState = function(dataIDs, callback) {
    var environment = useRelayEnvironment();
    var disposableRef = useRef(null);
    var stableDataIDs = Array.from(dataIDs).sort().join("");
    useEffect(function() {
      var store = environment.getStore();
      var invalidationState = store.lookupInvalidationState(dataIDs);
      var disposable = store.subscribeToInvalidationState(invalidationState, callback);
      disposableRef.current = disposable;
      return function() {
        return disposable.dispose();
      };
    }, [stableDataIDs, callback, environment]);
    return {
      dispose: function dispose() {
        if (disposableRef.current != null) {
          disposableRef.current.dispose();
        }
      }
    };
  };
  var useRelayEnvironment = require_useRelayEnvironment();
  var useEffect = _require.useEffect;
  var useRef = _require.useRef;
  module.exports = useSubscribeToInvalidationState;
});

// node_modules/react-relay/lib/relay-hooks/useSubscription.js
var require_useSubscription = __commonJS((exports, module) => {
  var _require = __toESM(require_react(), 1);
  var useSubscription = function(config, requestSubscriptionFn) {
    var actualRequestSubscription = requestSubscriptionFn !== null && requestSubscriptionFn !== undefined ? requestSubscriptionFn : requestSubscription;
    var environment = useRelayEnvironment();
    useEffect(function() {
      var _actualRequestSubscri = actualRequestSubscription(environment, config), dispose = _actualRequestSubscri.dispose;
      return dispose;
    }, [environment, config, actualRequestSubscription]);
  };
  var useRelayEnvironment = require_useRelayEnvironment();
  var useEffect = _require.useEffect;
  var _require2 = require_lib();
  var requestSubscription = _require2.requestSubscription;
  module.exports = useSubscription;
});

// node_modules/react-relay/lib/index.js
var require_lib2 = __commonJS((exports, module) => {
  var ReactRelayContext = require_ReactRelayContext();
  var ReactRelayFragmentContainer = require_ReactRelayFragmentContainer();
  var ReactRelayLocalQueryRenderer = require_ReactRelayLocalQueryRenderer();
  var ReactRelayPaginationContainer = require_ReactRelayPaginationContainer();
  var ReactRelayQueryRenderer = require_ReactRelayQueryRenderer();
  var ReactRelayRefetchContainer = require_ReactRelayRefetchContainer();
  var EntryPointContainer = require_EntryPointContainer_react();
  var loadEntryPoint = require_loadEntryPoint();
  var _require = require_loadQuery();
  var loadQuery = _require.loadQuery;
  var ProfilerContext = require_ProfilerContext();
  var RelayEnvironmentProvider = require_RelayEnvironmentProvider();
  var useClientQuery = require_useClientQuery();
  var useEntryPointLoader = require_useEntryPointLoader();
  var useFragment = require_useFragment();
  var useLazyLoadQuery = require_useLazyLoadQuery();
  var useMutation = require_useMutation();
  var usePaginationFragment = require_usePaginationFragment();
  var usePreloadedQuery = require_usePreloadedQuery();
  var useQueryLoader = require_useQueryLoader();
  var useRefetchableFragment = require_useRefetchableFragment();
  var useRelayEnvironment = require_useRelayEnvironment();
  var useSubscribeToInvalidationState = require_useSubscribeToInvalidationState();
  var useSubscription = require_useSubscription();
  var RelayRuntime = require_lib();
  module.exports = {
    ConnectionHandler: RelayRuntime.ConnectionHandler,
    QueryRenderer: ReactRelayQueryRenderer,
    LocalQueryRenderer: ReactRelayLocalQueryRenderer,
    MutationTypes: RelayRuntime.MutationTypes,
    RangeOperations: RelayRuntime.RangeOperations,
    ReactRelayContext,
    applyOptimisticMutation: RelayRuntime.applyOptimisticMutation,
    commitLocalUpdate: RelayRuntime.commitLocalUpdate,
    commitMutation: RelayRuntime.commitMutation,
    createFragmentContainer: ReactRelayFragmentContainer.createContainer,
    createPaginationContainer: ReactRelayPaginationContainer.createContainer,
    createRefetchContainer: ReactRelayRefetchContainer.createContainer,
    fetchQuery_DEPRECATED: RelayRuntime.fetchQuery_DEPRECATED,
    graphql: RelayRuntime.graphql,
    readInlineData: RelayRuntime.readInlineData,
    requestSubscription: RelayRuntime.requestSubscription,
    EntryPointContainer,
    RelayEnvironmentProvider,
    ProfilerContext,
    fetchQuery: RelayRuntime.fetchQuery,
    loadQuery,
    loadEntryPoint,
    useClientQuery,
    useFragment,
    useLazyLoadQuery,
    useEntryPointLoader,
    useQueryLoader,
    useMutation,
    usePaginationFragment,
    usePreloadedQuery,
    useRefetchableFragment,
    useRelayEnvironment,
    useSubscribeToInvalidationState,
    useSubscription
  };
});

// node_modules/react/cjs/react-jsx-dev-runtime.development.js
var require_react_jsx_dev_runtime_development = __commonJS((exports) => {
  var React = __toESM(require_react(), 1);
  if (true) {
    (function() {
      var REACT_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== "object") {
          return null;
        }
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === "function") {
          return maybeIterator;
        }
        return null;
      }
      var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function error(format) {
        {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1;_key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
      }
      function printWarning(level, format, args) {
        {
          var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
          var stack = ReactDebugCurrentFrame2.getStackAddendum();
          if (stack !== "") {
            format += "%s";
            args = args.concat([stack]);
          }
          var argsWithFormat = args.map(function(item) {
            return String(item);
          });
          argsWithFormat.unshift("Warning: " + format);
          Function.prototype.apply.call(console[level], console, argsWithFormat);
        }
      }
      var enableScopeAPI = false;
      var enableCacheElement = false;
      var enableTransitionTracing = false;
      var enableLegacyHidden = false;
      var enableDebugTracing = false;
      var REACT_MODULE_REFERENCE;
      {
        REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
      }
      function isValidElementType(type) {
        if (typeof type === "string" || typeof type === "function") {
          return true;
        }
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
          return true;
        }
        if (typeof type === "object" && type !== null) {
          if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
            return true;
          }
        }
        return false;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) {
          return displayName;
        }
        var functionName = innerType.displayName || innerType.name || "";
        return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
      }
      function getContextName(type) {
        return type.displayName || "Context";
      }
      function getComponentNameFromType(type) {
        if (type == null) {
          return null;
        }
        {
          if (typeof type.tag === "number") {
            error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
          }
        }
        if (typeof type === "function") {
          return type.displayName || type.name || null;
        }
        if (typeof type === "string") {
          return type;
        }
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PORTAL_TYPE:
            return "Portal";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type;
              return getContextName(context) + ".Consumer";
            case REACT_PROVIDER_TYPE:
              var provider = type;
              return getContextName(provider._context) + ".Provider";
            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, "ForwardRef");
            case REACT_MEMO_TYPE:
              var outerName = type.displayName || null;
              if (outerName !== null) {
                return outerName;
              }
              return getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }
          }
        }
        return null;
      }
      var assign = Object.assign;
      var disabledDepth = 0;
      var prevLog;
      var prevInfo;
      var prevWarn;
      var prevError;
      var prevGroup;
      var prevGroupCollapsed;
      var prevGroupEnd;
      function disabledLog() {
      }
      disabledLog.__reactDisabledLog = true;
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true
            };
            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props
            });
          }
          disabledDepth++;
        }
      }
      function reenableLogs() {
        {
          disabledDepth--;
          if (disabledDepth === 0) {
            var props = {
              configurable: true,
              enumerable: true,
              writable: true
            };
            Object.defineProperties(console, {
              log: assign({}, props, {
                value: prevLog
              }),
              info: assign({}, props, {
                value: prevInfo
              }),
              warn: assign({}, props, {
                value: prevWarn
              }),
              error: assign({}, props, {
                value: prevError
              }),
              group: assign({}, props, {
                value: prevGroup
              }),
              groupCollapsed: assign({}, props, {
                value: prevGroupCollapsed
              }),
              groupEnd: assign({}, props, {
                value: prevGroupEnd
              })
            });
          }
          if (disabledDepth < 0) {
            error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
          }
        }
      }
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      var prefix;
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            try {
              throw Error();
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/);
              prefix = match && match[1] || "";
            }
          }
          return "\n" + prefix + name;
        }
      }
      var reentry = false;
      var componentFrameCache;
      {
        var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
        componentFrameCache = new PossiblyWeakMap;
      }
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) {
          return "";
        }
        {
          var frame = componentFrameCache.get(fn);
          if (frame !== undefined) {
            return frame;
          }
        }
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        {
          previousDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = null;
          disableLogs();
        }
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x) {
                control = x;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x) {
              control = x;
            }
            fn();
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string") {
            var sampleLines = sample.stack.split("\n");
            var controlLines = control.stack.split("\n");
            var s = sampleLines.length - 1;
            var c = controlLines.length - 1;
            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              c--;
            }
            for (;s >= 1 && c >= 0; s--, c--) {
              if (sampleLines[s] !== controlLines[c]) {
                if (s !== 1 || c !== 1) {
                  do {
                    s--;
                    c--;
                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                      if (fn.displayName && _frame.includes("<anonymous>")) {
                        _frame = _frame.replace("<anonymous>", fn.displayName);
                      }
                      {
                        if (typeof fn === "function") {
                          componentFrameCache.set(fn, _frame);
                        }
                      }
                      return _frame;
                    }
                  } while (s >= 1 && c >= 0);
                }
                break;
              }
            }
          }
        } finally {
          reentry = false;
          {
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
          }
          Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : "";
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
        {
          if (typeof fn === "function") {
            componentFrameCache.set(fn, syntheticFrame);
          }
        }
        return syntheticFrame;
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false);
        }
      }
      function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
      }
      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return "";
        }
        if (typeof type === "function") {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type));
          }
        }
        if (typeof type === "string") {
          return describeBuiltInComponentFrame(type);
        }
        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame("Suspense");
          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame("SuspenseList");
        }
        if (typeof type === "object") {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
              return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE: {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {
              }
            }
          }
        }
        return "";
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var loggedTypeFailures = {};
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame.setExtraStackFrame(null);
          }
        }
      }
      function checkPropTypes(typeSpecs, values, location, componentName, element) {
        {
          var has = Function.call.bind(hasOwnProperty);
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = undefined;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ex) {
                error$1 = ex;
              }
              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
              }
              if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error("Failed %s type: %s", location, error$1.message);
                setCurrentlyValidatingElement(null);
              }
            }
          }
        }
      }
      var isArrayImpl = Array.isArray;
      function isArray(a) {
        return isArrayImpl(a);
      }
      function typeName(value) {
        {
          var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
          var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
          return type;
        }
      }
      function willCoercionThrow(value) {
        {
          try {
            testStringCoercion(value);
            return false;
          } catch (e) {
            return true;
          }
        }
      }
      function testStringCoercion(value) {
        return "" + value;
      }
      function checkKeyStringCoercion(value) {
        {
          if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
          }
        }
      }
      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
      var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
      };
      var specialPropKeyWarningShown;
      var specialPropRefWarningShown;
      var didWarnAboutStringRefs;
      {
        didWarnAboutStringRefs = {};
      }
      function hasValidRef(config) {
        {
          if (hasOwnProperty.call(config, "ref")) {
            var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.ref !== undefined;
      }
      function hasValidKey(config) {
        {
          if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) {
              return false;
            }
          }
        }
        return config.key !== undefined;
      }
      function warnIfStringRefCannotBeAutoConverted(config, self) {
        {
          if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
              error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
              didWarnAboutStringRefs[componentName] = true;
            }
          }
        }
      }
      function defineKeyPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
              specialPropKeyWarningShown = true;
              error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
      }
      function defineRefPropWarningGetter(props, displayName) {
        {
          var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
              specialPropRefWarningShown = true;
              error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
      }
      var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref,
          props,
          _owner: owner
        };
        {
          element._store = {};
          Object.defineProperty(element._store, "validated", {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
          });
          Object.defineProperty(element, "_self", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
          });
          Object.defineProperty(element, "_source", {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
          });
          if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
          }
        }
        return element;
      };
      function jsxDEV(type, config, maybeKey, source, self) {
        {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          if (maybeKey !== undefined) {
            {
              checkKeyStringCoercion(maybeKey);
            }
            key = "" + maybeKey;
          }
          if (hasValidKey(config)) {
            {
              checkKeyStringCoercion(config.key);
            }
            key = "" + config.key;
          }
          if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
          }
          for (propName in config) {
            if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
              props[propName] = config[propName];
            }
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === undefined) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          if (key || ref) {
            var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
            if (key) {
              defineKeyPropWarningGetter(props, displayName);
            }
            if (ref) {
              defineRefPropWarningGetter(props, displayName);
            }
          }
          return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
        }
      }
      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      function setCurrentlyValidatingElement$1(element) {
        {
          if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null);
          }
        }
      }
      var propTypesMisspellWarningShown;
      {
        propTypesMisspellWarningShown = false;
      }
      function isValidElement(object) {
        {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
      }
      function getDeclarationErrorAddendum() {
        {
          if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
      }
      function getSourceInfoErrorAddendum(source) {
        {
          if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
      }
      var ownerHasKeyUseWarning = {};
      function getCurrentComponentErrorInfo(parentType) {
        {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
      }
      function validateExplicitKey(element, parentType) {
        {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
            childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
          }
          setCurrentlyValidatingElement$1(element);
          error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
          setCurrentlyValidatingElement$1(null);
        }
      }
      function validateChildKeys(node2, parentType) {
        {
          if (typeof node2 !== "object") {
            return;
          }
          if (isArray(node2)) {
            for (var i = 0;i < node2.length; i++) {
              var child = node2[i];
              if (isValidElement(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement(node2)) {
            if (node2._store) {
              node2._store.validated = true;
            }
          } else if (node2) {
            var iteratorFn = getIteratorFn(node2);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node2.entries) {
                var iterator = iteratorFn.call(node2);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
      }
      function validatePropTypes(element) {
        {
          var type = element.type;
          if (type === null || type === undefined || typeof type === "string") {
            return;
          }
          var propTypes;
          if (typeof type === "function") {
            propTypes = type.propTypes;
          } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
            propTypes = type.propTypes;
          } else {
            return;
          }
          if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, "prop", name, element);
          } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
          }
          if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
            error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
          }
        }
      }
      function validateFragmentProps(fragment) {
        {
          var keys = Object.keys(fragment.props);
          for (var i = 0;i < keys.length; i++) {
            var key = keys[i];
            if (key !== "children" && key !== "key") {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
              setCurrentlyValidatingElement$1(null);
              break;
            }
          }
          if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error("Invalid attribute `ref` supplied to `React.Fragment`.");
            setCurrentlyValidatingElement$1(null);
          }
        }
      }
      function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        {
          var validType = isValidElementType(type);
          if (!validType) {
            var info = "";
            if (type === undefined || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (isArray(type)) {
              typeString = "array";
            } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
          }
          var element = jsxDEV(type, props, key, source, self);
          if (element == null) {
            return element;
          }
          if (validType) {
            var children = props.children;
            if (children !== undefined) {
              if (isStaticChildren) {
                if (isArray(children)) {
                  for (var i = 0;i < children.length; i++) {
                    validateChildKeys(children[i], type);
                  }
                  if (Object.freeze) {
                    Object.freeze(children);
                  }
                } else {
                  error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                }
              } else {
                validateChildKeys(children, type);
              }
            }
          }
          if (type === REACT_FRAGMENT_TYPE) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
      }
      var jsxDEV$1 = jsxWithValidation;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.jsxDEV = jsxDEV$1;
    })();
  }
});

// node_modules/react/jsx-dev-runtime.js
var require_jsx_dev_runtime = __commonJS((exports, module) => {
  var react_jsx_dev_runtime_development = __toESM(require_react_jsx_dev_runtime_development(), 1);
  if (false) {
  } else {
    module.exports = react_jsx_dev_runtime_development;
  }
});

// src/app.tsx
var client = __toESM(require_client(), 1);
var import_react = __toESM(require_react(), 1);

// src/web/__generated__/AppQuery.graphql.ts
var node = function() {
  var v0 = [
    {
      alias: null,
      args: null,
      concreteType: "User",
      kind: "LinkedField",
      name: "me",
      plural: false,
      selections: [
        {
          alias: null,
          args: null,
          kind: "ScalarField",
          name: "name",
          storageKey: null
        }
      ],
      storageKey: null
    }
  ];
  return {
    fragment: {
      argumentDefinitions: [],
      kind: "Fragment",
      metadata: null,
      name: "AppQuery",
      selections: v0,
      type: "Query",
      abstractKey: null
    },
    kind: "Request",
    operation: {
      argumentDefinitions: [],
      kind: "Operation",
      name: "AppQuery",
      selections: v0
    },
    params: {
      cacheID: "e5e6e9592e8e099d2a573b8130cb3ebd",
      id: null,
      metadata: {},
      name: "AppQuery",
      operationKind: "query",
      text: "query AppQuery {\n  me {\n    name\n  }\n}\n"
    }
  };
}();
node.hash = "80c2f1a2f18c1334ec6f842f6e46b677";
var AppQuery_graphql_default = node;

// src/web/App.tsx
var import_react_relay = __toESM(require_lib2(), 1);
var jsx_dev_runtime = __toESM(require_jsx_dev_runtime(), 1);
function App() {
  const data = import_react_relay.useLazyLoadQuery(AppQuery_graphql_default, {});
  return jsx_dev_runtime.jsxDEV("pre", {
    children: JSON.stringify(data, null, 4)
  }, undefined, false, undefined, this);
}

// src/app.tsx
var import_relay_runtime = __toESM(require_lib(), 1);
var import_react_relay2 = __toESM(require_lib2(), 1);
var jsx_dev_runtime2 = __toESM(require_jsx_dev_runtime(), 1);
var createEnvironment = function() {
  const network = import_relay_runtime.Network.create(fetchFn);
  const store = new import_relay_runtime.Store(new import_relay_runtime.RecordSource);
  return new import_relay_runtime.Environment({ store, network });
};
var AppShell = function() {
  const environment = import_react.useMemo(() => {
    return createEnvironment();
  }, []);
  return jsx_dev_runtime2.jsxDEV(import_react_relay2.RelayEnvironmentProvider, {
    environment,
    children: jsx_dev_runtime2.jsxDEV(import_react.Suspense, {
      fallback: "Loading...",
      children: jsx_dev_runtime2.jsxDEV(App, {}, undefined, false, undefined, this)
    }, undefined, false, undefined, this)
  }, undefined, false, undefined, this);
};
var fetchFn = (params, variables) => {
  const response = fetch("/graphql", {
    method: "POST",
    headers: [["Content-Type", "application/json"]],
    body: JSON.stringify({
      query: params.text,
      variables
    })
  });
  return import_relay_runtime.Observable.from(response.then((data) => data.json()));
};
var root = client.createRoot(document.body);
root.render(jsx_dev_runtime2.jsxDEV(AppShell, {}, undefined, false, undefined, this));

//# debugId=7CB59874336B712064756e2164756e21
